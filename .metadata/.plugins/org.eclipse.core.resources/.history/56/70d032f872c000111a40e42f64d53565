/*
 *
 *  Name : PriorityQueue.h
 *
 *  Author : nived.sivadas@samraksh.com
 *
 *  Description :
 *
 *
 */
#ifndef _PRIORITY_QUEUE_H_
#define _PRIORITY_QUEUE_H_


#define PQSIZE 32

template <class T>
class PriorityQueue
{
	// Body of the queue
	T queue[PQSIZE + 1];

	// Number of elements in the queue
	INT32 numberOfElements;

	BOOL Reorder()
	{
		// Check if am already at the root
		if(parent(numberOfElements -1) == -1)
		{
				return TRUE;
		}

		if(queue[parent(numberOfElements -1 )] > queue[numberOfElements -1])
		{
			INT32 temp = queue[parent(numberOfElements -1 )];
			queue[parent(numberOfElements -1 )] = queue[numberOfElements -1];
		}

	}

	INT32 parent(INT32 elementId)
	{
		// At root, no parent possible
		if(elementID == 1) return -1;
		// taking the floor
		else return((INT32) elementId/2);
	}

	INT32 child(INT32 elementId)
	{
		return (2 * elementId);
	}

public:
	PriorityQueue()
	{
		numberOfElements = 0;
	}

	// Adds a new element to the priority queue, takes the element as argument
	BOOL enqueue(T item)
	{
		queue[numberOfElements++] = item;

		Reorder();

	}

};



#endif
