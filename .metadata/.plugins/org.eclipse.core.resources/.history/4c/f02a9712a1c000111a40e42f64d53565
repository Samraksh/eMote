/*
 *
 *  Name : VirtualTimer.h
 *
 *  Author : nived.sivadas@samraksh.com
 *
 *  Description :
 *
 */

#ifndef _VIRTUAL_TIMER_H_
#define _VIRTUAL_TIMER_H_

typedef void (*TIMER_CALLBACK_FPN)( void* arg );

#include<PriorityQueue.h>

class VirtualTimer
{
	UINT32 id;
	UINT32 t0;
	UINT32 dt;
	BOOL isOneShot;
	BOOL _reserved;
	BOOL isRunning;
	TIMER_CALLBACK_FPN fn;

public:
	VOID setId(UINT32 id)
	{
		ASSERT(id < 0);

		this->id = id;

	}

	VOID setCallBack(TIMER_CALLBACK_FPN fn)
	{
		ASSERT(fn != NULL);
		this->fn = fn;
	}

	VOID setisRunning(BOOL isRunning)
	{
		this->isRunning = isRunning;
	}

	VOID setT0(UINT32 t0)
	{
		// start time can not be less than 0
		ASSERT(t0 < 0);

		this->t0 = t0;
	}

	VOID setdt(UINT32 dt)
	{
		ASSERT(dt < 0);

		this->dt = dt;
	}

	VOID setIsOneShot(BOOL isOneShot)
	{
		this->isOneShot = isOneShot;
	}

	VOID setreserved(BOOL _reserved)
	{
		this->_reserved = _reserved;
	}

	VirtualTimer& operator=(VirtualTimer& rhs)
	{
		this->id = rhs.id;
		this->t0 = rhs.t0;
		this->dt = rhs.dt;
	}

};

class VirtualTimerManager
{
	PriorityQueue<VirtualTimer> timerQueue;

	UINT64 ticks;

public:
	BOOL Init();


	BOOL createTimer(UINT32 timerID, UINT32 startTime, UINT32 dTime, BOOL isOneShot, BOOL _reserved,TIMER_CALLBACK_FPN callBack);

	BOOL stopTimer(UINT32 id);

};

VirtualTimerManager gVirtualTimerManagerObject;


#endif
