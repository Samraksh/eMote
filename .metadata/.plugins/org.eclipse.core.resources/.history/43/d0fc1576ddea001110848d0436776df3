//-----------------------------------------------------------------------------
//
//                   ** WARNING! ** 
//    This file was generated automatically by a tool.
//    Re-running the tool will overwrite this file.
//    You should copy this file to a custom location
//    before adding any customization in the copy to
//    prevent loss of your changes when the tool is
//    re-run.
//
//-----------------------------------------------------------------------------


#include "InterfaceLibrary.h"
#include "InterfaceLibrary_Samraksh_SPOT_ADCInternal.h"
#include <../../Solutions/STM32F10x/DeviceCode/drivers/netmf_timers.h>

using namespace Samraksh::SPOT;

UINT16 adcBuffer[500];

INT32 ADCInternal::Init( INT32 param0, HRESULT &hr )
{
    INT32 retVal = 0; 

    hal_adc_init((UINT8) param0);

    return retVal;
}

INT32 ADCInternal::GetData( CLR_RT_TypedArray_UINT16 param0, UINT32 param1, UINT32 param2, HRESULT &hr )
{
    INT32 retVal = 0; 

    CLR_RT_TypedArray_UINT16 dataBuf = param0;

    retVal = hal_adc_getData(dataBuf.GetBuffer(), (UINT8) param1, (UINT8) param2);

    return 1;
}

INT32 ADCInternal::ConfigureBatchMode( CLR_RT_TypedArray_UINT16 param0, UINT32 param1, UINT32 param2, UINT32 param3, UINT32 param4, HRESULT &hr )
{
    INT32 retVal = 0; 
    return retVal;
}

INT32 ADCInternal::ConfigureContinuousMode( CLR_RT_TypedArray_UINT16 param0, UINT32 param1, UINT32 param2, UINT32 param3, UINT32 param4, HRESULT &hr )
{
    INT32 retVal = 0; 

    UINT64 ticks = CPU_MicrosecondsToTicks(param4);

    if(param3 > 500)
    	return 0;

    if (!Timer_Driver :: Initialize (Timer_Driver :: c_ADCTimer, TRUE, 0, 0, ADCCallback, NULL))
    {
    		return 0;
    }

    Timer_Driver :: SetCompare (Timer_Driver :: c_ADCTimer, Timer_Driver::GetCounter() + (ticks & 0xffff));

    return retVal;
}

static HRESULT InitializeTestDriver( CLR_RT_HeapBlock_NativeEventDispatcher *pContext, UINT64 userData )
{
   g_Context  = pContext;
   g_UserData = userData;
   return S_OK;
}

static HRESULT EnableDisableTestDriver( CLR_RT_HeapBlock_NativeEventDispatcher *pContext, bool fEnable )
{
   g_TestInterruptEnabled = fEnable;
   return S_OK;
}

static HRESULT CleanupTestDriver( CLR_RT_HeapBlock_NativeEventDispatcher *pContext )
{
    g_Context = NULL;
    g_UserData = 0;
    CleanupNativeEventsFromHALQueue( pContext );
    return S_OK;
}


static const CLR_RT_DriverInterruptMethods g_AdcInteropDriverMethods =
{
  InitializeADCDriver,
  EnableDisableADCDriver,
  CleanupADCDriver
};


const CLR_RT_NativeAssemblyData g_CLR_AssemblyNative_Radio =
{
    "ADCCallback",
    DRIVER_INTERRUPT_METHODS_CHECKSUM,
    &g_AdcInteropDriverMethods
};

