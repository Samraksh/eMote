#include <VirtualTimer.h>

BOOL VirtualTimerManager::Init()
{
	timerQueue.Init();

	if (!Timer_Driver :: Initialize (Timer_Driver :: c_VirtualTimer, TRUE, 0, 0, VirtualTimerHandler, NULL))
	{
		return FALSE;
	}
}

BOOL VirtualTimerManager::enqueue(VirtualTimer vTimer)
{
	Updatedt(Timer_Driver::GetCounter(Timer_Driver::c_VirtualTimer) - vTimer.getInceptionTime());
	timerQueue.enqueue(vTimer);
}

BOOL VirtualTimerManager::createTimer(UINT32 timerID, UINT32 startTime, UINT32 dTime, BOOL isOneShot, BOOL _reserved,TIMER_CALLBACK_FPN callBack)
{
	// Convert the delta into ticks
	UINT64 dTicks = CPU_MillisecondsToTicks(dTime);

	VirtualTimer vTimer;

	vTimer.setId(timerID);
	vTimer.setIsOneShot(isOneShot);
	vTimer.setT0(startTime);
	vTimer.setdt(dTime);
	vTimer.setCallBack(callBack);
	vTimer.setisRunning(TRUE);
	vTimer.setreserved(_reserved);

	// Stores the time at which the timer came into the system
	vTimer.setInceptionTime(Timer_Driver::GetCounter(Timer_Driver::c_VirtualTimer));

	enqueue(vTimer);

	vTimer = timerQueue.getMin();

	if(timerID == vTimer.getId())
	{
		Timer_Driver::SetCompare(Timer_Driver::c_VirtualTimer, Timer_Driver::GetCounter(Timer_Driver::c_VirtualTimer) + vTimer.getdt());
	}

}

BOOL VirtualTimerManager::stopTimer(UINT32 timerID)
{

}

extern "C"
{

void VirtualTimerHandler(void *args)
{
	if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
	  {
	    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1 );
}

}
