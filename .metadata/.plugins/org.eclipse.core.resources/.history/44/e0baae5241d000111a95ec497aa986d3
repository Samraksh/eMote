//-----------------------------------------------------------------------------
//
//                   ** WARNING! ** 
//    This file was generated automatically by a tool.
//    Re-running the tool will overwrite this file.
//    You should copy this file to a custom location
//    before adding any customization in the copy to
//    prevent loss of your changes when the tool is
//    re-run.
//
//-----------------------------------------------------------------------------


#include "InterfaceLibrary.h"
#include "InterfaceLibrary_Samraksh_ADC.h"

using namespace Samraksh;

static CLR_RT_TypedArray_UINT16* gHeapPointerADC;

static UINT16 gAdcBuffer[1500];

INT32 ADC::Init( INT32 param0, HRESULT &hr )
{
    INT32 retVal = 0; 

    hal_adc_init((UINT8) param0);

    return retVal;
}

INT32 ADC::getData( CLR_RT_TypedArray_UINT16 param0, UINT32 param1, UINT32 param2, HRESULT &hr )
{
    INT32 retVal = 0; 

    CLR_RT_TypedArray_UINT16 dataBuf = param0;

    retVal = hal_adc_getData(dataBuf.GetBuffer(), (UINT8) param1, (UINT8) param2);

    return retVal;
}

INT32 ADC::ConfigureBatchMode( CLR_RT_TypedArray_UINT16 param0, UINT32 param1, UINT32 param2, UINT32 param3, UNSUPPORTED_TYPE param4, HRESULT &hr )
{
    INT32 retVal = 0; 

    // Store the address of the heap
    gHeapPointerADC = &param0;

    hal_adc_batchModeRun();

    return retVal;
}

INT32 ADC::ConfigureContinuousMode( CLR_RT_TypedArray_UINT16 param0, UINT32 param1, UINT32 param2, UINT32 param3, UNSUPPORTED_TYPE param4, HRESULT &hr )
{
    INT32 retVal = 0; 
    return retVal;
}

static HRESULT InitializeADCDriver( CLR_RT_HeapBlock_NativeEventDispatcher *pContext, UINT64 userData )
{
   g_Context  = pContext;
   g_UserData = userData;
   return S_OK;
}

static HRESULT EnableDisableADCDriver( CLR_RT_HeapBlock_NativeEventDispatcher *pContext, bool fEnable )
{
   g_TestInterruptEnabled = fEnable;
   return S_OK;
}

static HRESULT CleanupADCDriver( CLR_RT_HeapBlock_NativeEventDispatcher *pContext )
{
    g_Context = NULL;
    g_UserData = 0;
    CleanupNativeEventsFromHALQueue( pContext );
    return S_OK;
}

void ISR_TestProc( CLR_RT_HeapBlock_NativeEventDispatcher *pContext )
{
    GLOBAL_LOCK(irq);
    SaveNativeEventToHALQueue( pContext, UINT32(g_UserData >> 16), UINT32(g_UserData & 0xFFFFFFFF) );
}



static const CLR_RT_DriverInterruptMethods g_InteropSampleDriverMethods =
{
  InitializeADCDriver,
  EnableDisableADCDriver,
  CleanupADCDriver
};

const CLR_RT_NativeAssemblyData g_CLR_AssemblyNative_Adc =
{
    "AdcCallback",
    DRIVER_INTERRUPT_METHODS_CHECKSUM,
    &g_InteropSampleDriverMethods
};

