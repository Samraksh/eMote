MEMORY
{
    LR_FLASH : ORIGIN = 0x08000000, LENGTH = 0x80000
    HEAP : ORIGIN = 0x20009000, LENGTH = 0x2FFC + 1
    STACK : ORIGIN = 0x2000C000, LENGTH = 0x3FFC + 1
    RELOC_RAM : ORIGIN = 0x20000000, LENGTH = 0x9000
}
SECTIONS
{
    ER_FLASH 0x08000000  :
    {
        . = ALIGN(4); 
        KEEP(*(.vectors)) 
        * (i.EntryPoint)
        * (SectionForBootstrapOperations)
        * (.text*)
        * (i.*)
        * (rodata)
        * (.rodata*)
        * (.constdata*)
        * (.conststring*)
        * (SectionForConfig)
        PROVIDE(_sbrk = .);
        PROVIDE(_write = .);
        PROVIDE(_close = .);
        PROVIDE(_fstat = .);
        PROVIDE(_lseek = .);
        PROVIDE(_read = .);
        PROVIDE(_exit = .);
        PROVIDE(_getpid = .);
        PROVIDE(_kill = .);
        PROVIDE(abort = .);
        PROVIDE(__errno = .);
        PROVIDE(_read = .);
        PROVIDE(isatty = .);
        PROVIDE(_isatty = .);
        LONG(0xE12FFF1E); 
        _etext = .; 
        _sidata = .; 
    }>LR_FLASH
    ER_RAM_RO  : ALIGN(0x4)
    {
        _sdata = .; 
        * (SectionForFlashOperations)
    }>LR_FLASH
    ER_RAM_RW  : ALIGN(0x4)
    {
        * (rwdata)
        * (.data*)
        * (.zidata*)
        _edata = .; 
    }>LR_FLASH
    .bss  : ALIGN(0x10)
    {
        _sbss = .; 
        __bss_start__ = _sbss; 
        * (.bss*)
        _ebss = .; 
        __bss_end__ = _ebss; 
        PROVIDE(__exidx_start = .); 
        PROVIDE(__exidx_end = .); 
    }>RELOC_RAM
    /DISCARD/  :
    {
        * (.glue*)
        * (.vfp11*)
        * (.ARM.exidx*)
        * (.ARM.extab*)
    }
    ER_HEAP_BEGIN 0x20009000 :
    {
        * (SectionForHeapBegin)
    }
    ER_HEAP_END 0x2000BFFC :
    {
        * (SectionForHeapEnd)
    }
    ER_STACK_BOTTOM 0x2000C000 :
    {
        * (SectionForStackBottom)
    }
    ER_STACK_TOP 0x2000FFFC :
    {
        * (SectionForStackTop)
    }
}
Load$$ER_FLASH$$Base = ADDR(ER_FLASH);
Image$$ER_FLASH$$Length = SIZEOF(ER_FLASH);
Image$$ER_RAM_RO$$Base = ADDR(ER_RAM_RO);
Image$$ER_RAM_RO$$Length = ADDR(ER_RAM_RW) - ADDR(ER_RAM_RO);
Load$$ER_RAM_RO$$Base = LOADADDR(ER_RAM_RO);
Image$$ER_RAM_RW$$Base = ADDR(ER_RAM_RW);
Image$$ER_RAM_RW$$Length = (ADDR(.bss) + SIZEOF(.bss)) - ADDR(ER_RAM_RW);
Load$$ER_RAM_RW$$Base = LOADADDR(ER_RAM_RO) + (ADDR(ER_RAM_RW) - ADDR(ER_RAM_RO));
Image$$ER_RAM_RW$$ZI$$Base = ADDR(.bss);
Image$$ER_RAM_RW$$ZI$$Length = SIZEOF(.bss);
__use_no_semihosting_swi = 0;
