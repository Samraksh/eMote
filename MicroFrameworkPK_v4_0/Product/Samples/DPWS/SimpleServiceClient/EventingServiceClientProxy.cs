//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using Dpws.Client;
using Dpws.Client.Discovery;
using Dpws.Client.Eventing;
using Dpws.Client.Transport;
using Ws.Services;
using Ws.Services.Utilities;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;

namespace schemas.example.org.EventingService
{
    
    
    public class EventingServiceClientProxy : DpwsClient
    {
        
        private IEventingServiceCallback m_eventHandler = null;
        
        public DpwsServiceTypes EventSources = new DpwsServiceTypes();
        
        public string ServiceEndpoint = null;
               
        public EventingServiceClientProxy(IEventingServiceCallback callbackHandler)
        {
            // Set the client callback implementation property
            m_eventHandler = callbackHandler;
            Init();
        }
        
        public EventingServiceClientProxy(int port, IEventingServiceCallback callbackHandler) : 
                base(port)
        {
            // Set the client callback implementation property
            m_eventHandler = callbackHandler;
            Init();
        }
        
        public virtual void Init()
        {

            // // Set client endpoint address
            EndpointAddress = "urn:uuid:f88b4279-3b4f-491e-9d67-2c7a2c2d10e7";

            // Add client callback operations and event source types
            ServiceOperations.Add(new WsServiceOperation("http://schemas.example.org/EventingService", "SimpleEvent"));
            EventSources.Add(new DpwsServiceType("SimpleEvent", "http://schemas.example.org/EventingService"));
            ServiceOperations.Add(new WsServiceOperation("http://schemas.example.org/EventingService", "IntegerEvent"));
            EventSources.Add(new DpwsServiceType("IntegerEvent", "http://schemas.example.org/EventingService"));
        }
        
        public virtual Byte[] SimpleEvent(WsWsaHeader header, XmlReader reader)
        {
            // Build request object
            SimpleEventDataContractSerializer reqDcs;
            reqDcs = new SimpleEventDataContractSerializer("SimpleEvent", "http://schemas.example.org/EventingService");
            SimpleEvent req;
            req = ((SimpleEvent)(reqDcs.ReadObject(reader)));

            // Call service operation to process request.
            m_eventHandler.SimpleEvent(req);

            // Return null response for event callback messages
            return null;
        }
        
        public virtual Byte[] IntegerEvent(WsWsaHeader header, XmlReader reader)
        {
            // Build request object
            IntegerEventDataContractSerializer reqDcs;
            reqDcs = new IntegerEventDataContractSerializer("IntegerEvent", "http://schemas.example.org/EventingService");
            IntegerEvent req;
            req = ((IntegerEvent)(reqDcs.ReadObject(reader)));

            // Call service operation to process request.
            m_eventHandler.IntegerEvent(req);

            // Return null response for event callback messages
            return null;
        }
    }
}
