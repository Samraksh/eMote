//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace schemas.example.org.AttachmentService
{
    
    
    [DataContract(Namespace="http://schemas.example.org/AttachmentService")]
    public class OneWayAttachment
    {
        
        [DataMember(Order=0)]
        public byte[] Param;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlElement[] Any;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlAttribute[] AnyAttr;
    }
    
    public class OneWayAttachmentDataContractSerializer : DataContractSerializer
    {
        
        public WsMtomBodyParts BodyParts = new WsMtomBodyParts();
        
        public OneWayAttachmentDataContractSerializer(string _rootName, string _rootNameSpace) : 
                base(_rootName, _rootNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            OneWayAttachment OneWayAttachmentField = null;
            if (IsParentStartElement(reader, false, true))
            {
                OneWayAttachmentField = new OneWayAttachment();
                OneWayAttachmentField.AnyAttr = ReadAnyAttribute(reader);
                reader.Read();
                if (IsChildStartElement(reader, "Param", false, true))
                {
                    reader.Read();
                    IsAttribute(reader, "href");
                    string contentID;
                    contentID = reader.Value;
                    reader.MoveToElement();
                    reader.ReadStartElement("Include", "http://www.w3.org/2004/08/xop/include");
                    reader.ReadEndElement();
                    OneWayAttachmentField.Param = GetBodyPartContent(contentID, BodyParts);
                    reader.ReadEndElement();
                }
                OneWayAttachmentField.Any = ReadAnyElement(reader, false);
                reader.ReadEndElement();
            }
            return OneWayAttachmentField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            OneWayAttachment OneWayAttachmentField = ((OneWayAttachment)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                WriteAnyAttribute(writer, OneWayAttachmentField.AnyAttr);
                if (WriteChildElement(writer, "Param", false, true, OneWayAttachmentField.Param))
                {
                    BodyParts.Add(CreateNewBodyPart(OneWayAttachmentField.Param, "<1@body>"));
                    writer.WriteStartElement("xop", "Include", "http://www.w3.org/2004/08/xop/include");
                    writer.WriteAttributeString(null, "href", null, "cid:1@body");
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                }
                WriteAnyElement(writer, OneWayAttachmentField.Any, false);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://schemas.example.org/AttachmentService")]
    public class TwoWayAttachmentRequest
    {
        
        [DataMember(Order=0)]
        public byte[] Param;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlElement[] Any;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlAttribute[] AnyAttr;
    }
    
    public class TwoWayAttachmentRequestDataContractSerializer : DataContractSerializer
    {
        
        public WsMtomBodyParts BodyParts = new WsMtomBodyParts();
        
        public TwoWayAttachmentRequestDataContractSerializer(string _rootName, string _rootNameSpace) : 
                base(_rootName, _rootNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            TwoWayAttachmentRequest TwoWayAttachmentRequestField = null;
            if (IsParentStartElement(reader, false, true))
            {
                TwoWayAttachmentRequestField = new TwoWayAttachmentRequest();
                TwoWayAttachmentRequestField.AnyAttr = ReadAnyAttribute(reader);
                reader.Read();
                if (IsChildStartElement(reader, "Param", false, true))
                {
                    reader.Read();
                    IsAttribute(reader, "href");
                    string contentID;
                    contentID = reader.Value;
                    reader.MoveToElement();
                    reader.ReadStartElement("Include", "http://www.w3.org/2004/08/xop/include");
                    reader.ReadEndElement();
                    TwoWayAttachmentRequestField.Param = GetBodyPartContent(contentID, BodyParts);
                    reader.ReadEndElement();
                }
                TwoWayAttachmentRequestField.Any = ReadAnyElement(reader, false);
                reader.ReadEndElement();
            }
            return TwoWayAttachmentRequestField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            TwoWayAttachmentRequest TwoWayAttachmentRequestField = ((TwoWayAttachmentRequest)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                WriteAnyAttribute(writer, TwoWayAttachmentRequestField.AnyAttr);
                if (WriteChildElement(writer, "Param", false, true, TwoWayAttachmentRequestField.Param))
                {
                    BodyParts.Add(CreateNewBodyPart(TwoWayAttachmentRequestField.Param, "<1@body>"));
                    writer.WriteStartElement("xop", "Include", "http://www.w3.org/2004/08/xop/include");
                    writer.WriteAttributeString(null, "href", null, "cid:1@body");
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                }
                WriteAnyElement(writer, TwoWayAttachmentRequestField.Any, false);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://schemas.example.org/AttachmentService")]
    public class TwoWayAttachmentResponse
    {
        
        [DataMember(Order=0)]
        public byte[] Param;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlElement[] Any;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlAttribute[] AnyAttr;
    }
    
    public class TwoWayAttachmentResponseDataContractSerializer : DataContractSerializer
    {
        
        public WsMtomBodyParts BodyParts = new WsMtomBodyParts();
        
        public TwoWayAttachmentResponseDataContractSerializer(string _rootName, string _rootNameSpace) : 
                base(_rootName, _rootNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            TwoWayAttachmentResponse TwoWayAttachmentResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                TwoWayAttachmentResponseField = new TwoWayAttachmentResponse();
                TwoWayAttachmentResponseField.AnyAttr = ReadAnyAttribute(reader);
                reader.Read();
                if (IsChildStartElement(reader, "Param", false, true))
                {
                    reader.Read();
                    IsAttribute(reader, "href");
                    string contentID;
                    contentID = reader.Value;
                    reader.MoveToElement();
                    reader.ReadStartElement("Include", "http://www.w3.org/2004/08/xop/include");
                    reader.ReadEndElement();
                    TwoWayAttachmentResponseField.Param = GetBodyPartContent(contentID, BodyParts);
                    reader.ReadEndElement();
                }
                TwoWayAttachmentResponseField.Any = ReadAnyElement(reader, false);
                reader.ReadEndElement();
            }
            return TwoWayAttachmentResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            TwoWayAttachmentResponse TwoWayAttachmentResponseField = ((TwoWayAttachmentResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                WriteAnyAttribute(writer, TwoWayAttachmentResponseField.AnyAttr);
                if (WriteChildElement(writer, "Param", false, true, TwoWayAttachmentResponseField.Param))
                {
                    BodyParts.Add(CreateNewBodyPart(TwoWayAttachmentResponseField.Param, "<1@body>"));
                    writer.WriteStartElement("xop", "Include", "http://www.w3.org/2004/08/xop/include");
                    writer.WriteAttributeString(null, "href", null, "cid:1@body");
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                }
                WriteAnyElement(writer, TwoWayAttachmentResponseField.Any, false);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [ServiceContract(Namespace="http://schemas.example.org/AttachmentService")]
    [PolicyAssertion(Namespace="http://schemas.xmlsoap.org/ws/2005/05/devprof", Name="Profile", PolicyID="Attachment")]
    [PolicyAssertion(Namespace="http://schemas.xmlsoap.org/ws/2005/05/devprof", Name="OptimizedMimeSerialization", PolicyID="Attachment")]
    public interface IAttachmentService
    {
        
        [OperationContract(Action="http://schemas.example.org/AttachmentService/OneWayAttachment", IsOneWay=true)]
        void OneWayAttachment(OneWayAttachment req);
        
        [OperationContract(Action="http://schemas.example.org/AttachmentService/TwoWayAttachmentRequest")]
        TwoWayAttachmentResponse TwoWayAttachment(TwoWayAttachmentRequest req);
    }
}
