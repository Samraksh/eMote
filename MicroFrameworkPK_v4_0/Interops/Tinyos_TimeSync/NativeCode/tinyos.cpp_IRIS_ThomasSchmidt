#include <tinyhal.h>


#include "stm32f10x.h"
#include <spi/stm32f10x_spi.h>
#include "spi/netmf_spi.h"
#include "rtc/stm32f10x_rtc.h"
#include "SPOT_Hardware.h"
#include "misc/misc.h"
#include "exti/stm32f10x_exti.h"
#include "pwr/stm32f10x_pwr.h"
#include "bkp/stm32f10x_bkp.h"

#define DEBUG_NIV

#define SPIx             SPI1
#define SPIx_CLK         RCC_APB2Periph_SPI1
#define SPIx_GPIO        GPIOA
#define SPIx_GPIO_CLK    RCC_APB2Periph_GPIOA
#define SPIx_NSS	     GPIO_Pin_4 //nss
#define SPIx_PIN_SCK     GPIO_Pin_5 //sck
#define SPIx_PIN_MISO	 GPIO_Pin_6 //miso
#define SPIx_PIN_MOSI    GPIO_Pin_7 //mosi

#define SPIy             SPI2
#define SPIy_CLK         RCC_APB1Periph_SPI2
#define SPIy_GPIO        GPIOB
#define SPIy_GPIO_CLK    RCC_APB2Periph_GPIOB
#define SPIy_NSS	     GPIO_Pin_12 //nss
#define SPIy_PIN_SCK     GPIO_Pin_13 //sck
#define SPIy_PIN_MISO	 GPIO_Pin_14 //miso
#define SPIy_PIN_MOSI    GPIO_Pin_15 //mosi




#define nx_struct struct
#define nx_union union
#define dbg(mode, format, ...) ((void)0)
#define dbg_clear(mode, format, ...) ((void)0)
#define dbg_active(mode) 0

SPI_CONFIGURATION config;

// 121 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/stdint.h" 3
typedef int int8_t __attribute((__mode__(__QI__))) ;
typedef unsigned int uint8_t __attribute((__mode__(__QI__))) ;
typedef int int16_t __attribute((__mode__(__HI__))) ;
typedef unsigned int uint16_t __attribute((__mode__(__HI__))) ;
//typedef int int32_t __attribute((__mode__(__SI__))) ;
//typedef unsigned int uint32_t __attribute((__mode__(__SI__))) ;

typedef int int64_t __attribute((__mode__(__DI__))) ;
typedef unsigned int uint64_t __attribute((__mode__(__DI__))) ;
//line 142
//typedef int16_t intptr_t;




//typedef uint16_t uintptr_t;
//line 159
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;



typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
//line 213
//typedef int8_t int_fast8_t;




//typedef uint8_t uint_fast8_t;




//typedef int16_t int_fast16_t;




//typedef uint16_t uint_fast16_t;




//typedef int32_t int_fast32_t;




//typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
//line 273
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
// 77 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/inttypes.h"
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
// 235 "/usr/lib/ncc/nesc_nx.h"
static __inline uint8_t __nesc_ntoh_uint8(const void *source);




static __inline uint8_t __nesc_hton_uint8(void *target, uint8_t value);





static __inline uint8_t __nesc_ntoh_leuint8(const void *source);




static __inline uint8_t __nesc_hton_leuint8(void *target, uint8_t value);
//line 264
static __inline uint16_t __nesc_ntoh_uint16(const void *source);




static __inline uint16_t __nesc_hton_uint16(void *target, uint16_t value);






static __inline uint16_t __nesc_ntoh_leuint16(const void *source);




static __inline uint16_t __nesc_hton_leuint16(void *target, uint16_t value);
//line 294
static __inline uint32_t __nesc_ntoh_uint32(const void *source);






static __inline uint32_t __nesc_hton_uint32(void *target, uint32_t value);
//line 326
static __inline int32_t __nesc_ntoh_int32(const void *source);
//line 326
static __inline int32_t __nesc_hton_int32(void *target, int32_t value);
//line 385
typedef struct { char data[1]; } __attribute__((packed)) nx_int8_t;typedef int8_t __nesc_nxbase_nx_int8_t  ;
typedef struct { char data[2]; } __attribute__((packed)) nx_int16_t;typedef int16_t __nesc_nxbase_nx_int16_t  ;
typedef struct { char data[4]; } __attribute__((packed)) nx_int32_t;typedef int32_t __nesc_nxbase_nx_int32_t  ;
typedef struct { char data[8]; } __attribute__((packed)) nx_int64_t;typedef int64_t __nesc_nxbase_nx_int64_t  ;
typedef struct { char data[1]; } __attribute__((packed)) nx_uint8_t;typedef uint8_t __nesc_nxbase_nx_uint8_t  ;
typedef struct { char data[2]; } __attribute__((packed)) nx_uint16_t;typedef uint16_t __nesc_nxbase_nx_uint16_t  ;
typedef struct { char data[4]; } __attribute__((packed)) nx_uint32_t;typedef uint32_t __nesc_nxbase_nx_uint32_t  ;
typedef struct { char data[8]; } __attribute__((packed)) nx_uint64_t;typedef uint64_t __nesc_nxbase_nx_uint64_t  ;


typedef struct { char data[1]; } __attribute__((packed)) nxle_int8_t;typedef int8_t __nesc_nxbase_nxle_int8_t  ;
typedef struct { char data[2]; } __attribute__((packed)) nxle_int16_t;typedef int16_t __nesc_nxbase_nxle_int16_t  ;
typedef struct { char data[4]; } __attribute__((packed)) nxle_int32_t;typedef int32_t __nesc_nxbase_nxle_int32_t  ;
typedef struct { char data[8]; } __attribute__((packed)) nxle_int64_t;typedef int64_t __nesc_nxbase_nxle_int64_t  ;
typedef struct { char data[1]; } __attribute__((packed)) nxle_uint8_t;typedef uint8_t __nesc_nxbase_nxle_uint8_t  ;
typedef struct { char data[2]; } __attribute__((packed)) nxle_uint16_t;typedef uint16_t __nesc_nxbase_nxle_uint16_t  ;
typedef struct { char data[4]; } __attribute__((packed)) nxle_uint32_t;typedef uint32_t __nesc_nxbase_nxle_uint32_t  ;
typedef struct { char data[8]; } __attribute__((packed)) nxle_uint64_t;typedef uint64_t __nesc_nxbase_nxle_uint64_t  ;
// 213 "/usr/lib/gcc/avr/3.4.6/include/stddef.h" 3
typedef unsigned int size_t;
// 116 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/string.h" 3
extern void *memset(void *, int , size_t );
// 325 "/usr/lib/gcc/avr/3.4.6/include/stddef.h" 3
//typedef int wchar_t;
// 71 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/stdlib.h"
//line 68
// typedef struct __nesc_unnamed4242 {
  // int quot;
  // int rem;
// } div_t;





//line 74
// typedef struct __nesc_unnamed4243 {
  // long quot;
  // long rem;
// } ldiv_t;


typedef int (*__compar_fn_t)(const void *, const void *);
// 151 "/usr/lib/gcc/avr/3.4.6/include/stddef.h" 3
typedef int ptrdiff_t;
// 40 "/opt/tinyos-2.x/tos/system/../lib/safe/include/annots_stage1.h"
struct __nesc_attr_safe {
};
//line 41
struct __nesc_attr_unsafe {
};
// 23 "/opt/tinyos-2.x/tos/system/tos.h"
//typedef uint8_t bool;
// enum __nesc_unnamed4244 {
// //line 24
  // FALSE = 0, TRUE = 1
// };
typedef nx_int8_t nx_bool;
uint16_t TOS_NODE_ID = 1;






struct __nesc_attr_atmostonce {
};
//line 35
struct __nesc_attr_atleastonce {
};
//line 36
struct __nesc_attr_exactlyonce {
};
// 51 "/opt/tinyos-2.x/tos/types/TinyError.h"
enum __nesc_unnamed4245 {
//  SUCCESS = 0,
  FAIL = 1,
  ESIZE = 2,
  ECANCEL = 3,
  EOFF = 4,
  EBUSY = 5,
  EINVAL = 6,
  ERETRY = 7,
  ERESERVE = 8,
  EALREADY = 9,
  ENOMEM = 10,
  ENOACK = 11,
  ELAST = 11
};

typedef uint8_t error_t  ;

static inline error_t ecombine(error_t r1, error_t r2)  ;
// 210 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/avr/pgmspace.h" 3
typedef void prog_void __attribute((__progmem__)) ;
typedef char prog_char __attribute((__progmem__)) ;
typedef unsigned char prog_uchar __attribute((__progmem__)) ;

typedef int8_t prog_int8_t __attribute((__progmem__)) ;
typedef uint8_t prog_uint8_t __attribute((__progmem__)) ;
typedef int16_t prog_int16_t __attribute((__progmem__)) ;
typedef uint16_t prog_uint16_t __attribute((__progmem__)) ;
typedef int32_t prog_int32_t __attribute((__progmem__)) ;
typedef uint32_t prog_uint32_t __attribute((__progmem__)) ;

typedef int64_t prog_int64_t __attribute((__progmem__)) ;
typedef uint64_t prog_uint64_t __attribute((__progmem__)) ;
// 25 "/opt/tinyos-2.x/tos/chips/atm128/atm128const.h"
typedef uint8_t const_uint8_t __attribute((__progmem__)) ;
typedef uint16_t const_uint16_t __attribute((__progmem__)) ;
typedef uint32_t const_uint32_t __attribute((__progmem__)) ;
typedef int8_t const_int8_t __attribute((__progmem__)) ;
typedef int16_t const_int16_t __attribute((__progmem__)) ;
typedef int32_t const_int32_t __attribute((__progmem__)) ;
// 90 "/opt/tinyos-2.x/tos/chips/atm1281/atm128hardware.h"
static __inline void __nesc_enable_interrupt(void)  ;



static __inline void __nesc_disable_interrupt(void)  ;




typedef uint8_t __nesc_atomic_t;
__nesc_atomic_t __nesc_atomic_start(void );
void __nesc_atomic_end(__nesc_atomic_t original_SREG);









//line 110
__inline __nesc_atomic_t
__nesc_atomic_start(void )   ;









//line 120
__inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG)   ;







typedef uint8_t mcu_power_t  ;


enum __nesc_unnamed4246 {
  ATM128_POWER_IDLE = 0,
  ATM128_POWER_ADC_NR = 1,
  ATM128_POWER_EXT_STANDBY = 2,
  ATM128_POWER_SAVE = 3,
  ATM128_POWER_STANDBY = 4,
  ATM128_POWER_DOWN = 5
};


static inline mcu_power_t mcombine(mcu_power_t m1, mcu_power_t m2)  ;
//line 155
//line 147
typedef struct __nesc_unnamed4247 {

  uint8_t porf : 1;
  uint8_t extrf : 1;
  uint8_t borf : 1;
  uint8_t wdrf : 1;
  uint8_t jtrf : 1;
  uint8_t resv1 : 3;
} Atm128_MCUSR_t;










//line 158
typedef struct __nesc_unnamed4248 {

  uint8_t srw00 : 1;
  uint8_t srw01 : 1;
  uint8_t srw10 : 1;
  uint8_t srw11 : 1;
  uint8_t srl : 3;
  uint8_t sre : 1;
} Atm128_XMCRA_t;







//line 169
typedef struct __nesc_unnamed4249 {

  uint8_t xmm : 3;
  uint8_t resv1 : 4;
  uint8_t xmbk : 1;
} Atm128_XMCRB_t;







typedef struct { char data[4]; } __attribute__((packed)) nx_float;typedef float __nesc_nxbase_nx_float  ;
// 82 "/opt/tinyos-2.x/tos/chips/atm1281/adc/Atm128Adc.h"
enum __nesc_unnamed4250 {
  ATM128_ADC_VREF_OFF = 0,
  ATM128_ADC_VREF_AVCC = 1,
  ATM128_ADC_VREF_1_1 = 2,
  ATM128_ADC_VREF_2_56 = 3
};


enum __nesc_unnamed4251 {
  ATM128_ADC_RIGHT_ADJUST = 0,
  ATM128_ADC_LEFT_ADJUST = 1
};



enum __nesc_unnamed4252 {
  ATM128_ADC_SNGL_ADC0 = 0,
  ATM128_ADC_SNGL_ADC1,
  ATM128_ADC_SNGL_ADC2,
  ATM128_ADC_SNGL_ADC3,
  ATM128_ADC_SNGL_ADC4,
  ATM128_ADC_SNGL_ADC5,
  ATM128_ADC_SNGL_ADC6,
  ATM128_ADC_SNGL_ADC7,
  ATM128_ADC_DIFF_ADC00_10x,
  ATM128_ADC_DIFF_ADC10_10x,
  ATM128_ADC_DIFF_ADC00_200x,
  ATM128_ADC_DIFF_ADC10_200x,
  ATM128_ADC_DIFF_ADC22_10x,
  ATM128_ADC_DIFF_ADC32_10x,
  ATM128_ADC_DIFF_ADC22_200x,
  ATM128_ADC_DIFF_ADC32_200x,
  ATM128_ADC_DIFF_ADC01_1x,
  ATM128_ADC_DIFF_ADC11_1x,
  ATM128_ADC_DIFF_ADC21_1x,
  ATM128_ADC_DIFF_ADC31_1x,
  ATM128_ADC_DIFF_ADC41_1x,
  ATM128_ADC_DIFF_ADC51_1x,
  ATM128_ADC_DIFF_ADC61_1x,
  ATM128_ADC_DIFF_ADC71_1x,
  ATM128_ADC_DIFF_ADC02_1x,
  ATM128_ADC_DIFF_ADC12_1x,
  ATM128_ADC_DIFF_ADC22_1x,
  ATM128_ADC_DIFF_ADC32_1x,
  ATM128_ADC_DIFF_ADC42_1x,
  ATM128_ADC_DIFF_ADC52_1x,
  ATM128_ADC_SNGL_1_23,
  ATM128_ADC_SNGL_GND
};







//line 133
typedef struct __nesc_unnamed4253 {

  uint8_t mux : 5;
  uint8_t adlar : 1;
  uint8_t refs : 2;
} Atm128Admux_t;




enum __nesc_unnamed4254 {
  ATM128_ADC_PRESCALE_2 = 0,
  ATM128_ADC_PRESCALE_2b,
  ATM128_ADC_PRESCALE_4,
  ATM128_ADC_PRESCALE_8,
  ATM128_ADC_PRESCALE_16,
  ATM128_ADC_PRESCALE_32,
  ATM128_ADC_PRESCALE_64,
  ATM128_ADC_PRESCALE_128,



  ATM128_ADC_PRESCALE
};


enum __nesc_unnamed4255 {
  ATM128_ADC_ENABLE_OFF = 0,
  ATM128_ADC_ENABLE_ON
};


enum __nesc_unnamed4256 {
  ATM128_ADC_START_CONVERSION_OFF = 0,
  ATM128_ADC_START_CONVERSION_ON
};


enum __nesc_unnamed4257 {
  ATM128_ADC_FREE_RUNNING_OFF = 0,
  ATM128_ADC_FREE_RUNNING_ON
};


enum __nesc_unnamed4258 {
  ATM128_ADC_INT_FLAG_OFF = 0,
  ATM128_ADC_INT_FLAG_ON
};


enum __nesc_unnamed4259 {
  ATM128_ADC_INT_ENABLE_OFF = 0,
  ATM128_ADC_INT_ENABLE_ON
};










//line 189
typedef struct __nesc_unnamed4260 {

  uint8_t adps : 3;
  uint8_t adie : 1;
  uint8_t adif : 1;
  uint8_t adate : 1;
  uint8_t adsc : 1;
  uint8_t aden : 1;
} Atm128Adcsra_t;









//line 200
typedef struct __nesc_unnamed4261 {

  uint8_t adts : 3;
  uint8_t mux5 : 1;
  uint8_t resv1 : 2;
  uint8_t acme : 1;
  uint8_t resv2 : 1;
} Atm128Adcsrb_t;


typedef uint8_t Atm128_ADCH_t;
typedef uint8_t Atm128_ADCL_t;
// 40 "/opt/tinyos-2.x/tos/lib/timer/Timer.h"
typedef struct __nesc_unnamed4262 {
//line 40
  int notUsed;
}
//line 40
TMilli;
typedef struct __nesc_unnamed4263 {
//line 41
  int notUsed;
}
//line 41
T32khz;
typedef struct __nesc_unnamed4264 {
//line 42
  int notUsed;
}
//line 42
TMicro;
// 81 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm128Timer.h"
enum __nesc_unnamed4265 {
  ATM128_CLK8_OFF = 0x0,
  ATM128_CLK8_NORMAL = 0x1,
  ATM128_CLK8_DIVIDE_8 = 0x2,
  ATM128_CLK8_DIVIDE_32 = 0x3,
  ATM128_CLK8_DIVIDE_64 = 0x4,
  ATM128_CLK8_DIVIDE_128 = 0x5,
  ATM128_CLK8_DIVIDE_256 = 0x6,
  ATM128_CLK8_DIVIDE_1024 = 0x7
};


enum __nesc_unnamed4266 {
  ATM128_CLK16_OFF = 0x0,
  ATM128_CLK16_NORMAL = 0x1,
  ATM128_CLK16_DIVIDE_8 = 0x2,
  ATM128_CLK16_DIVIDE_64 = 0x3,
  ATM128_CLK16_DIVIDE_256 = 0x4,
  ATM128_CLK16_DIVIDE_1024 = 0x5,
  ATM128_CLK16_EXTERNAL_FALL = 0x6,
  ATM128_CLK16_EXTERNAL_RISE = 0x7
};


enum __nesc_unnamed4267 {
  AVR_CLOCK_OFF = 0,
  AVR_CLOCK_ON = 1,
  AVR_CLOCK_DIVIDE_8 = 2
};

enum __nesc_unnamed4268 {
  ATM128_TIMER_COMPARE_NORMAL = 0,
  ATM128_TIMER_COMPARE_TOGGLE,
  ATM128_TIMER_COMPARE_CLEAR,
  ATM128_TIMER_COMPARE_SET
};



enum __nesc_unnamed4269 {
  ATM128_WAVE8_NORMAL = 0,
  ATM128_WAVE8_PWM,
  ATM128_WAVE8_CTC,
  ATM128_WAVE8_PWM_FAST
};


enum __nesc_unnamed4270 {
  ATM128_WAVE16_NORMAL = 0,
  ATM128_WAVE16_PWM_8BIT,
  ATM128_WAVE16_PWM_9BIT,
  ATM128_WAVE16_PWM_10BIT,
  ATM128_WAVE16_CTC_COMPARE,
  ATM128_WAVE16_PWM_FAST_8BIT,
  ATM128_WAVE16_PWM_FAST_9BIT,
  ATM128_WAVE16_PWM_FAST_10BIT,
  ATM128_WAVE16_PWM_CAPTURE_LOW,
  ATM128_WAVE16_PWM_COMPARE_LOW,
  ATM128_WAVE16_PWM_CAPTURE_HIGH,
  ATM128_WAVE16_PWM_COMPARE_HIGH,
  ATM128_WAVE16_CTC_CAPTURE,
  ATM128_WAVE16_RESERVED,
  ATM128_WAVE16_PWM_FAST_CAPTURE,
  ATM128_WAVE16_PWM_FAST_COMPARE
};


enum __nesc_unnamed4271 {
  ATM128_COMPARE_OFF = 0,
  ATM128_COMPARE_TOGGLE,
  ATM128_COMPARE_CLEAR,
  ATM128_COMPARE_SET
};
//line 168
//line 156
typedef union __nesc_unnamed4272 {

  uint8_t flat;
  struct __nesc_unnamed4273 {
    uint8_t wgm00 : 1;
    uint8_t wgm01 : 1;
    uint8_t resv1 : 2;
    uint8_t com0b0 : 1;
    uint8_t com0b1 : 1;
    uint8_t com0a0 : 1;
    uint8_t com0a1 : 1;
  } bits;
} Atm128_TCCR0A_t;
//line 183
//line 171
typedef union __nesc_unnamed4274 {

  uint8_t flat;
  struct __nesc_unnamed4275 {
    uint8_t cs00 : 1;
    uint8_t cs01 : 1;
    uint8_t cs02 : 2;
    uint8_t wgm02 : 1;
    uint8_t resv1 : 2;
    uint8_t foc0b : 1;
    uint8_t foc0a : 1;
  } bits;
} Atm128_TCCR0B_t;
//line 195
//line 186
typedef union __nesc_unnamed4276 {

  uint8_t flat;
  struct __nesc_unnamed4277 {
    uint8_t toie0 : 1;
    uint8_t ocie0a : 1;
    uint8_t ocie0e : 1;
    uint8_t resv1 : 5;
  } bits;
} Atm128_TIMSK0_t;
//line 207
//line 198
typedef union __nesc_unnamed4278 {

  uint8_t flat;
  struct __nesc_unnamed4279 {
    uint8_t tov0 : 1;
    uint8_t ocf0a : 1;
    uint8_t ocf0b : 1;
    uint8_t resv1 : 5;
  } bits;
} Atm128_TIFR0_t;
//line 223
//line 210
typedef union __nesc_unnamed4280 {

  uint8_t flat;
  struct __nesc_unnamed4281 {
    uint8_t tcr2bub : 1;
    uint8_t tcr2aub : 1;
    uint8_t ocr2bub : 1;
    uint8_t ocr2aub : 1;
    uint8_t tcn2ub : 1;
    uint8_t as2 : 1;
    uint8_t exclk : 1;
    uint8_t resv1 : 1;
  } bits;
} Atm128_ASSR_t;
//line 236
//line 226
typedef union __nesc_unnamed4282 {

  uint8_t flat;
  struct __nesc_unnamed4283 {
    uint8_t wgm20 : 1;
    uint8_t wgm21 : 1;
    uint8_t resv1 : 2;
    uint8_t comb : 2;
    uint8_t coma : 2;
  } bits;
} Atm128_TCCR2A_t;
//line 249
//line 239
typedef union __nesc_unnamed4284 {

  uint8_t flat;
  struct __nesc_unnamed4285 {
    uint8_t cs : 3;
    uint8_t wgm22 : 1;
    uint8_t resv1 : 2;
    uint8_t foc2b : 1;
    uint8_t foc2a : 1;
  } bits;
} Atm128_TCCR2B_t;
//line 261
//line 252
typedef union __nesc_unnamed4286 {

  uint8_t flat;
  struct __nesc_unnamed4287 {
    uint8_t toie : 1;
    uint8_t ociea : 1;
    uint8_t ocieb : 1;
    uint8_t resv1 : 5;
  } bits;
} Atm128_TIMSK2_t;
//line 273
//line 264
typedef union __nesc_unnamed4288 {

  uint8_t flat;
  struct __nesc_unnamed4289 {
    uint8_t tov : 1;
    uint8_t ocfa : 1;
    uint8_t ocfb : 1;
    uint8_t resv1 : 5;
  } bits;
} Atm128_TIFR2_t;
//line 286
//line 277
typedef union __nesc_unnamed4290 {

  uint8_t flat;
  struct __nesc_unnamed4291 {
    uint8_t wgm01 : 2;
    uint8_t comc : 2;
    uint8_t comb : 2;
    uint8_t coma : 2;
  } bits;
} Atm128_TCCRA_t;
//line 299
//line 289
typedef union __nesc_unnamed4292 {

  uint8_t flat;
  struct __nesc_unnamed4293 {
    uint8_t cs : 3;
    uint8_t wgm23 : 2;
    uint8_t resv1 : 1;
    uint8_t ices : 1;
    uint8_t icnc : 1;
  } bits;
} Atm128_TCCRB_t;
//line 311
//line 302
typedef union __nesc_unnamed4294 {

  uint8_t flat;
  struct __nesc_unnamed4295 {
    uint8_t resv1 : 5;
    uint8_t focc : 1;
    uint8_t focb : 1;
    uint8_t foca : 1;
  } bits;
} Atm128_TCCRC_t;
//line 326
//line 314
typedef union __nesc_unnamed4296 {

  uint8_t flat;
  struct __nesc_unnamed4297 {
    uint8_t toie : 1;
    uint8_t ociea : 1;
    uint8_t ocieb : 1;
    uint8_t ociec : 1;
    uint8_t resv1 : 1;
    uint8_t icie : 1;
    uint8_t resv2 : 2;
  } bits;
} Atm128_TIMSK_t;
//line 341
//line 329
typedef union __nesc_unnamed4298 {

  uint8_t flat;
  struct __nesc_unnamed4299 {
    uint8_t tov : 1;
    uint8_t ocfa : 1;
    uint8_t ocfb : 1;
    uint8_t ocfc : 1;
    uint8_t resv1 : 1;
    uint8_t icf : 1;
    uint8_t resv2 : 2;
  } bits;
} Atm128_TIFR_t;
//line 353
//line 344
typedef union __nesc_unnamed4300 {

  uint8_t flat;
  struct __nesc_unnamed4301 {
    uint8_t psrsync : 1;
    uint8_t psrasy : 1;
    uint8_t resv1 : 5;
    uint8_t tsm : 1;
  } bits;
} Atm128_GTCCR_t;



typedef uint8_t Atm128_TCNT1H_t;
typedef uint8_t Atm128_TCNT1L_t;
typedef uint8_t Atm128_TCNT3H_t;
typedef uint8_t Atm128_TCNT3L_t;
typedef uint8_t Atm128_TCNT4H_t;
typedef uint8_t Atm128_TCNT4L_t;
typedef uint8_t Atm128_TCNT5H_t;
typedef uint8_t Atm128_TCNT5L_t;


typedef uint8_t Atm128_OCR1AH_t;
typedef uint8_t Atm128_OCR1AL_t;
typedef uint8_t Atm128_OCR1BH_t;
typedef uint8_t Atm128_OCR1BL_t;
typedef uint8_t Atm128_OCR1CH_t;
typedef uint8_t Atm128_OCR1CL_t;


typedef uint8_t Atm128_OCR3AH_t;
typedef uint8_t Atm128_OCR3AL_t;
typedef uint8_t Atm128_OCR3BH_t;
typedef uint8_t Atm128_OCR3BL_t;
typedef uint8_t Atm128_OCR3CH_t;
typedef uint8_t Atm128_OCR3CL_t;


typedef uint8_t Atm128_OCR4AH_t;
typedef uint8_t Atm128_OCR4AL_t;
typedef uint8_t Atm128_OCR4BH_t;
typedef uint8_t Atm128_OCR4BL_t;
typedef uint8_t Atm128_OCR4CH_t;
typedef uint8_t Atm128_OCR4CL_t;


typedef uint8_t Atm128_OCR5AH_t;
typedef uint8_t Atm128_OCR5AL_t;
typedef uint8_t Atm128_OCR5BH_t;
typedef uint8_t Atm128_OCR5BL_t;
typedef uint8_t Atm128_OCR5CH_t;
typedef uint8_t Atm128_OCR5CL_t;


typedef uint8_t Atm128_ICR1H_t;
typedef uint8_t Atm128_ICR1L_t;
typedef uint8_t Atm128_ICR3H_t;
typedef uint8_t Atm128_ICR3L_t;
typedef uint8_t Atm128_ICR4H_t;
typedef uint8_t Atm128_ICR4L_t;
typedef uint8_t Atm128_ICR5H_t;
typedef uint8_t Atm128_ICR5L_t;
// 85 "/opt/tinyos-2.x/tos/platforms/iris/MicaTimer.h"
typedef struct __nesc_unnamed4302 {
}
//line 85
T64khz;
typedef struct __nesc_unnamed4303 {
}
//line 86
T128khz;
typedef struct __nesc_unnamed4304 {
}
//line 87
T2mhz;
typedef struct __nesc_unnamed4305 {
}
//line 88
T4mhz;
//line 158
typedef TMicro TOne;
typedef TMicro TThree;
typedef uint32_t counter_one_overflow_t;
typedef uint16_t counter_three_overflow_t;
enum __nesc_unnamed4306 {
  MICA_PRESCALER_ONE = ATM128_CLK16_DIVIDE_8,
  MICA_DIVIDE_ONE_FOR_32KHZ_LOG2 = 5,
  MICA_PRESCALER_THREE = ATM128_CLK16_DIVIDE_8,
  MICA_DIVIDE_THREE_FOR_MICRO_LOG2 = 0,
  EXT_STANDBY_T0_THRESHOLD = 12
};





enum __nesc_unnamed4307 {
  PLATFORM_MHZ = 8
};
// 62 "/opt/tinyos-2.x/tos/platforms/micaz/hardware.h"
enum __nesc_unnamed4308 {
  TOS_SLEEP_NONE = ATM128_POWER_IDLE
};


enum __nesc_unnamed4309 {
  CHANNEL_THERMISTOR = ATM128_ADC_SNGL_ADC1
};

enum __nesc_unnamed4310 {
  PLATFORM_BAUDRATE = 57600L
};
// 37 "RadioCountToLeds.h"
//line 33
typedef nx_struct radio_count_msg {
  nx_uint16_t src;
  nx_uint16_t count;
  nx_uint16_t vals[50];
} __attribute__((packed)) radio_count_msg_t;

enum __nesc_unnamed4311 {
  AM_RADIO_COUNT_MSG = 239
};
// 43 "/opt/tinyos-2.x/tos/types/Leds.h"
enum __nesc_unnamed4312 {
  LEDS_LED0 = 1 << 0,
  LEDS_LED1 = 1 << 1,
  LEDS_LED2 = 1 << 2,
  LEDS_LED3 = 1 << 3,
  LEDS_LED4 = 1 << 4,
  LEDS_LED5 = 1 << 5,
  LEDS_LED6 = 1 << 6,
  LEDS_LED7 = 1 << 7
};
// 41 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayer.h"
//line 38
typedef nx_struct rf230_header_t {

  nxle_uint8_t length;
} __attribute__((packed)) rf230_header_t;









//line 43
typedef struct rf230_metadata_t {

  uint8_t lqi;
  union  {

    uint8_t power;
    uint8_t rssi;
  } ;
} rf230_metadata_t;

enum rf230_registers_enum {

  RF230_TRX_STATUS = 0x01,
  RF230_TRX_STATE = 0x02,
  RF230_TRX_CTRL_0 = 0x03,
  RF230_PHY_TX_PWR = 0x05,
  RF230_PHY_RSSI = 0x06,
  RF230_PHY_ED_LEVEL = 0x07,
  RF230_PHY_CC_CCA = 0x08,
  RF230_CCA_THRES = 0x09,
  RF230_IRQ_MASK = 0x0E,
  RF230_IRQ_STATUS = 0x0F,
  RF230_VREG_CTRL = 0x10,
  RF230_BATMON = 0x11,
  RF230_XOSC_CTRL = 0x12,
  RF230_PLL_CF = 0x1A,
  RF230_PLL_DCU = 0x1B,
  RF230_PART_NUM = 0x1C,
  RF230_VERSION_NUM = 0x1D,
  RF230_MAN_ID_0 = 0x1E,
  RF230_MAN_ID_1 = 0x1F,
  RF230_SHORT_ADDR_0 = 0x20,
  RF230_SHORT_ADDR_1 = 0x21,
  RF230_PAN_ID_0 = 0x22,
  RF230_PAN_ID_1 = 0x23,
  RF230_IEEE_ADDR_0 = 0x24,
  RF230_IEEE_ADDR_1 = 0x25,
  RF230_IEEE_ADDR_2 = 0x26,
  RF230_IEEE_ADDR_3 = 0x27,
  RF230_IEEE_ADDR_4 = 0x28,
  RF230_IEEE_ADDR_5 = 0x29,
  RF230_IEEE_ADDR_6 = 0x2A,
  RF230_IEEE_ADDR_7 = 0x2B,
  RF230_XAH_CTRL = 0x2C,
  RF230_CSMA_SEED_0 = 0x2D,
  RF230_CSMA_SEED_1 = 0x2E
};

enum rf230_trx_register_enums {

  RF230_CCA_DONE = 1 << 7,
  RF230_CCA_STATUS = 1 << 6,
  RF230_TRX_STATUS_MASK = 0x1F,
  RF230_P_ON = 0,
  RF230_BUSY_RX = 1,
  RF230_BUSY_TX = 2,
  RF230_RX_ON = 6,
  RF230_TRX_OFF = 8,
  RF230_PLL_ON = 9,
  RF230_SLEEP = 15,
  RF230_BUSY_RX_AACK = 17,
  RF230_BUSR_TX_ARET = 18,
  RF230_RX_AACK_ON = 22,
  RF230_TX_ARET_ON = 25,
  RF230_RX_ON_NOCLK = 28,
  RF230_AACK_ON_NOCLK = 29,
  RF230_BUSY_RX_AACK_NOCLK = 30,
  RF230_STATE_TRANSITION_IN_PROGRESS = 31,
  RF230_TRAC_STATUS_MASK = 0xE0,
  RF230_TRAC_SUCCESS = 0,
  RF230_TRAC_SUCCESS_DATA_PENDING = 1 << 5,
  RF230_TRAC_CHANNEL_ACCESS_FAILURE = 3 << 5,
  RF230_TRAC_NO_ACK = 5 << 5,
  RF230_TRAC_INVALID = 7 << 5,
  RF230_TRX_CMD_MASK = 0x1F,
  RF230_NOP = 0,
  RF230_TX_START = 2,
  RF230_FORCE_TRX_OFF = 3
};

enum rf230_phy_register_enums {

  RF230_TX_AUTO_CRC_ON = 1 << 7,
  RF230_TX_PWR_MASK = 0x0F,
  RF230_RSSI_MASK = 0x1F,
  RF230_CCA_REQUEST = 1 << 7,
  RF230_CCA_MODE_0 = 0 << 5,
  RF230_CCA_MODE_1 = 1 << 5,
  RF230_CCA_MODE_2 = 2 << 5,
  RF230_CCA_MODE_3 = 3 << 5,
  RF230_CHANNEL_DEFAULT = 11,
  RF230_CHANNEL_MASK = 0x1F,
  RF230_CCA_CS_THRES_SHIFT = 4,
  RF230_CCA_ED_THRES_SHIFT = 0
};

enum rf230_irq_register_enums {

  RF230_IRQ_BAT_LOW = 1 << 7,
  RF230_IRQ_TRX_UR = 1 << 6,
  RF230_IRQ_TRX_END = 1 << 3,
  RF230_IRQ_RX_START = 1 << 2,
  RF230_IRQ_PLL_UNLOCK = 1 << 1,
  RF230_IRQ_PLL_LOCK = 1 << 0
};

enum rf230_control_register_enums {

  RF230_AVREG_EXT = 1 << 7,
  RF230_AVDD_OK = 1 << 6,
  RF230_DVREG_EXT = 1 << 3,
  RF230_DVDD_OK = 1 << 2,
  RF230_BATMON_OK = 1 << 5,
  RF230_BATMON_VHR = 1 << 4,
  RF230_BATMON_VTH_MASK = 0x0F,
  RF230_XTAL_MODE_OFF = 0 << 4,
  RF230_XTAL_MODE_EXTERNAL = 4 << 4,
  RF230_XTAL_MODE_INTERNAL = 15 << 4
};

enum rf230_pll_register_enums {

  RF230_PLL_CF_START = 1 << 7,
  RF230_PLL_DCU_START = 1 << 7
};

enum rf230_spi_command_enums {

  RF230_CMD_REGISTER_READ = 0x80,
  RF230_CMD_REGISTER_WRITE = 0xC0,
  RF230_CMD_REGISTER_MASK = 0x3F,
  RF230_CMD_FRAME_READ = 0x20,
  RF230_CMD_FRAME_WRITE = 0x60,
  RF230_CMD_SRAM_READ = 0x00,
  RF230_CMD_SRAM_WRITE = 0x40
};
// 251 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/util/crc16.h"
//line 250
static __inline uint16_t
_crc_ccitt_update(uint16_t __crc, uint8_t __data);
// 42 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/RadioConfig.h"
enum __nesc_unnamed4313 {





  RF230_TRX_CTRL_0_VALUE = 0,





  RF230_CCA_MODE_VALUE = RF230_CCA_MODE_3,





  RF230_CCA_THRES_VALUE = 0xC7
};
//line 82
static __inline uint16_t RF230_CRCBYTE_COMMAND(uint16_t crc, uint8_t data);







typedef TOne TRadio;
// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayer.h"
//line 42
typedef nx_struct network_header_t {

  nxle_uint8_t network;
} __attribute__((packed)) network_header_t;
// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.h"
//line 38
typedef nx_struct ieee154_header_t {

  nxle_uint16_t fcf;
  nxle_uint8_t dsn;
  nxle_uint16_t destpan;
  nxle_uint16_t dest;
  nxle_uint16_t src;
} __attribute__((packed)) ieee154_header_t;

enum ieee154_fcf_enums {
  IEEE154_FCF_FRAME_TYPE = 0,
  IEEE154_FCF_SECURITY_ENABLED = 3,
  IEEE154_FCF_FRAME_PENDING = 4,
  IEEE154_FCF_ACK_REQ = 5,
  IEEE154_FCF_INTRAPAN = 6,
  IEEE154_FCF_DEST_ADDR_MODE = 10,
  IEEE154_FCF_SRC_ADDR_MODE = 14
};

enum ieee154_fcf_type_enums {
  IEEE154_TYPE_BEACON = 0,
  IEEE154_TYPE_DATA = 1,
  IEEE154_TYPE_ACK = 2,
  IEEE154_TYPE_MAC_CMD = 3,
  IEEE154_TYPE_MASK = 7
};

enum iee154_fcf_addr_mode_enums {
  IEEE154_ADDR_NONE = 0,
  IEEE154_ADDR_SHORT = 2,
  IEEE154_ADDR_EXT = 3,
  IEEE154_ADDR_MASK = 3
};
// 6 "/opt/tinyos-2.x/tos/types/AM.h"
typedef nx_uint8_t nx_am_id_t;
typedef nx_uint8_t nx_am_group_t;
typedef nx_uint16_t nx_am_addr_t;

typedef uint8_t am_id_t;
typedef uint8_t am_group_t;
typedef uint16_t am_addr_t;

enum __nesc_unnamed4314 {
  AM_BROADCAST_ADDR = 0xffff
};









enum __nesc_unnamed4315 {
  TOS_AM_GROUP = 0x22,
  TOS_AM_ADDRESS = 1
};
// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayer.h"
//line 40
typedef nx_struct activemessage_header_t {

  nx_am_id_t type;
} __attribute__((packed)) activemessage_header_t;
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayer.h"
//line 38
typedef struct flags_metadata_t {


  uint8_t flags;
} flags_metadata_t;
// 41 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayer.h"
//line 38
typedef struct timestamp_metadata_t {

  uint32_t timestamp;
} timestamp_metadata_t;
// 41 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/LowPowerListeningLayer.h"
//line 38
typedef struct lpl_metadata_t {

  uint16_t sleepint;
} lpl_metadata_t;
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayer.h"
//line 38
typedef struct link_metadata_t {

  uint16_t maxRetries;
  uint16_t retryDelay;
} link_metadata_t;
// 58 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230Radio.h"
//line 48
typedef nx_struct rf230packet_header_t {

  rf230_header_t rf230;
  ieee154_header_t ieee154;

  network_header_t network;


  activemessage_header_t am;
} __attribute__((packed))
rf230packet_header_t;




//line 60
typedef nx_struct rf230packet_footer_t {
} __attribute__((packed))

rf230packet_footer_t;
//line 76
//line 65
typedef struct rf230packet_metadata_t {





  link_metadata_t link;

  timestamp_metadata_t timestamp;
  flags_metadata_t flags;
  rf230_metadata_t rf230;
} rf230packet_metadata_t;
// 83 "/opt/tinyos-2.x/tos/lib/serial/Serial.h"
typedef uint8_t uart_id_t;

// Nived : Intialising the structure globally

SPI_InitTypeDef SPI_InitStructure;



enum __nesc_unnamed4316 {
  HDLC_FLAG_BYTE = 0x7e,
  HDLC_CTLESC_BYTE = 0x7d
};



enum __nesc_unnamed4317 {
  TOS_SERIAL_ACTIVE_MESSAGE_ID = 0,
  TOS_SERIAL_CC1000_ID = 1,
  TOS_SERIAL_802_15_4_ID = 2,
  TOS_SERIAL_UNKNOWN_ID = 255
};


enum __nesc_unnamed4318 {
  SERIAL_PROTO_ACK = 67,
  SERIAL_PROTO_PACKET_ACK = 68,
  SERIAL_PROTO_PACKET_NOACK = 69,
  SERIAL_PROTO_PACKET_UNKNOWN = 255
};
//line 121
//line 109
typedef struct radio_stats {
  uint8_t version;
  uint8_t flags;
  uint8_t reserved;
  uint8_t platform;
  uint16_t MTU;
  uint16_t radio_crc_fail;
  uint16_t radio_queue_drops;
  uint16_t serial_crc_fail;
  uint16_t serial_tx_fail;
  uint16_t serial_short_packets;
  uint16_t serial_proto_drops;
} radio_stats_t;







//line 123
typedef nx_struct serial_header {
  nx_am_addr_t dest;
  nx_am_addr_t src;
  nx_uint8_t length;
  nx_am_group_t group;
  nx_am_id_t type;
} __attribute__((packed)) serial_header_t;




//line 131
typedef nx_struct serial_packet {
  serial_header_t header;
  nx_uint8_t data[];
} __attribute__((packed)) serial_packet_t;



//line 136
typedef nx_struct serial_metadata {
  nx_uint8_t ack;
} __attribute__((packed)) serial_metadata_t;
// 43 "/opt/tinyos-2.x/tos/platforms/iris/platform_message.h"
//line 40
typedef union message_header {
  rf230packet_header_t rf230;
  serial_header_t serial;
} message_header_t;



//line 45
typedef union message_footer {
  rf230packet_footer_t rf230;
} message_footer_t;



//line 49
typedef union message_metadata {
  rf230packet_metadata_t rf230;
} message_metadata_t;
// 19 "/opt/tinyos-2.x/tos/types/message.h"
//line 14
typedef nx_struct message_t {
  nx_uint8_t header[sizeof(message_header_t )];
  nx_uint8_t data[120];
  nx_uint8_t footer[sizeof(message_footer_t )];
  nx_uint8_t metadata[sizeof(message_metadata_t )];
} __attribute__((packed)) message_t;
// 44 "/opt/tinyos-2.x/tos/types/Ieee154.h"
typedef uint16_t ieee154_panid_t;
typedef uint16_t ieee154_saddr_t;

enum __nesc_unnamed4319 {
  IEEE154_BROADCAST_ADDR = 0xffff
};
// 33 "/opt/tinyos-2.x/tos/types/Resource.h"
typedef uint8_t resource_client_id_t;
// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeSyncMessageLayer.h"
typedef nx_int32_t timesync_relative_t;


typedef nx_uint32_t timesync_absolute_t;









//line 50
typedef nx_struct timesync_footer_t {

  nx_am_id_t type;
  nx_union timestamp_t {

    timesync_relative_t relative;
    timesync_absolute_t absolute;
  } __attribute__((packed)) timestamp;
} __attribute__((packed)) timesync_footer_t;
// 41 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.h"
enum __nesc_unnamed4320 {
  ATM128_SPI_CLK_DIVIDE_4 = 0,
  ATM128_SPI_CLK_DIVIDE_16 = 1,
  ATM128_SPI_CLK_DIVIDE_64 = 2,
  ATM128_SPI_CLK_DIVIDE_128 = 3
};
//line 58
//line 49
typedef struct __nesc_unnamed4321 {
  uint8_t spie : 1;
  uint8_t spe : 1;
  uint8_t dord : 1;
  uint8_t mstr : 1;
  uint8_t cpol : 1;
  uint8_t cpha : 1;
  uint8_t spr : 2;
}
Atm128SPIControl_s;



//line 59
typedef union __nesc_unnamed4322 {
  uint8_t flat;
  Atm128SPIControl_s bits;
} Atm128SPIControl_t;

typedef Atm128SPIControl_t Atm128_SPCR_t;








//line 67
typedef struct __nesc_unnamed4323 {
  uint8_t spif : 1;
  uint8_t wcol : 1;
  uint8_t rsvd : 5;
  uint8_t spi2x : 1;
}
Atm128SPIStatus_s;



//line 74
typedef union __nesc_unnamed4324 {
  uint8_t flat;
  Atm128SPIStatus_s bits;
} Atm128SPIStatus_t;

typedef Atm128SPIStatus_t Atm128_SPSR_t;

typedef uint8_t Atm128_SPDR_t;
typedef TMilli RadioCountToLedsC__MilliTimer__precision_tag;
enum AMQueueP____nesc_unnamed4325 {
  AMQueueP__NUM_CLIENTS = 1U
};
typedef TRadio RF230RadioP__PacketTimeStamp__precision_tag;
typedef uint32_t RF230RadioP__PacketTimeStamp__size_type;
typedef TRadio RadioAlarmP__Alarm__precision_tag;
typedef uint16_t RadioAlarmP__Alarm__size_type;
typedef TMilli PacketLinkLayerP__DelayTimer__precision_tag;
enum HilTimerMilliC____nesc_unnamed4326 {
  HilTimerMilliC__TIMER_COUNT = 2U
};
typedef TMilli /*AlarmCounterMilliP.Atm128AlarmAsyncC*/Atm128AlarmAsyncC$0__precision;
typedef /*AlarmCounterMilliP.Atm128AlarmAsyncC*/Atm128AlarmAsyncC$0__precision /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__precision;
typedef /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__precision /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__precision_tag;
typedef uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__size_type;
typedef /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__precision /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__precision_tag;
typedef uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__size_type;
typedef uint8_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__size_type;
typedef uint8_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__timer_size;
typedef uint8_t HplAtm1281Timer2AsyncP__Compare__size_type;
typedef uint8_t HplAtm1281Timer2AsyncP__Timer__timer_size;
typedef TMilli /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__precision_tag;
typedef /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__precision_tag /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__precision_tag;
typedef uint32_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type;
typedef /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__precision_tag /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__precision_tag;
typedef TMilli /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__precision_tag;
typedef /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__precision_tag /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__precision_tag;
typedef /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__precision_tag /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__precision_tag;
typedef TMilli /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__precision_tag;
typedef /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__precision_tag /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__LocalTime__precision_tag;
typedef /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__precision_tag /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__Counter__precision_tag;
typedef uint32_t /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__Counter__size_type;
typedef uint16_t RandomMlcgC__SeedInit__parameter;
typedef TRadio TimeStampingLayerP__PacketTimeStampRadio__precision_tag;
typedef uint32_t TimeStampingLayerP__PacketTimeStampRadio__size_type;
typedef TRadio TimeStampingLayerP__LocalTimeRadio__precision_tag;
typedef TMilli TimeStampingLayerP__LocalTimeMilli__precision_tag;
typedef TMilli TimeStampingLayerP__PacketTimeStampMilli__precision_tag;
typedef uint32_t TimeStampingLayerP__PacketTimeStampMilli__size_type;
typedef TMicro RF230DriverLayerP__BusyWait__precision_tag;
typedef uint16_t RF230DriverLayerP__BusyWait__size_type;
typedef uint8_t RF230DriverLayerP__PacketRSSI__value_type;
typedef TRadio RF230DriverLayerP__PacketTimeStamp__precision_tag;
typedef uint32_t RF230DriverLayerP__PacketTimeStamp__size_type;
typedef TRadio RF230DriverLayerP__LocalTime__precision_tag;
typedef uint8_t RF230DriverLayerP__PacketTransmitPower__value_type;
typedef uint8_t RF230DriverLayerP__PacketTimeSyncOffset__value_type;
typedef uint8_t RF230DriverLayerP__PacketLinkQuality__value_type;
typedef uint16_t HplRF230P__Capture__size_type;
typedef uint16_t HplAtm1281Timer1P__CompareA__size_type;
typedef uint16_t HplAtm1281Timer1P__Capture__size_type;
typedef uint16_t HplAtm1281Timer1P__CompareB__size_type;
typedef uint16_t HplAtm1281Timer1P__CompareC__size_type;
typedef uint16_t HplAtm1281Timer1P__Timer__timer_size;
typedef uint16_t /*InitOneP.InitOne*/Atm128TimerInitC$0__timer_size;
typedef /*InitOneP.InitOne*/Atm128TimerInitC$0__timer_size /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__timer_size;
typedef TOne /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__frequency_tag;
typedef uint16_t /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size;
typedef /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__frequency_tag /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__precision_tag;
typedef /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__size_type;
typedef /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__size_type;
typedef /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__timer_size;
enum /*HplRF230C.AlarmC*/AlarmOne16C$0____nesc_unnamed4327 {
  AlarmOne16C$0__COMPARE_ID = 0U
};
typedef TOne /*CounterOne16C.NCounter*/Atm128CounterC$0__frequency_tag;
typedef uint16_t /*CounterOne16C.NCounter*/Atm128CounterC$0__timer_size;
typedef /*CounterOne16C.NCounter*/Atm128CounterC$0__frequency_tag /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__precision_tag;
typedef /*CounterOne16C.NCounter*/Atm128CounterC$0__timer_size /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__size_type;
typedef /*CounterOne16C.NCounter*/Atm128CounterC$0__timer_size /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__timer_size;
typedef TMicro /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_precision_tag;
typedef uint32_t /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type;
typedef TMicro /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_precision_tag;
typedef uint16_t /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_size_type;
typedef uint32_t /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__upper_count_type;
typedef /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_precision_tag /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__precision_tag;
typedef /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__size_type;
typedef /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_precision_tag /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__precision_tag;
typedef /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__size_type;
typedef TMicro /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__precision_tag;
typedef /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__precision_tag /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__LocalTime__precision_tag;
typedef /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__precision_tag /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__precision_tag;
typedef uint32_t /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__size_type;
typedef TMicro BusyWaitMicroC__BusyWait__precision_tag;
typedef uint16_t BusyWaitMicroC__BusyWait__size_type;
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t PlatformP__Init__init(void);
//line 62
static  error_t MotePlatformP__PlatformInit__init(void);
// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__makeOutput(void);
//line 40
static   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__set(void);
static   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__clr(void);

static void mf_gpio_set(int Pin);
static void mf_gpio_clr(int Pin);
static void mf_gpio_makeOutput( int Pin);
static void mf_gpio_makeInput( int Pin);




static   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__makeOutput(void);
//line 40
static   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__set(void);
static   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__clr(void);
static   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__toggle(void);



static   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__makeOutput(void);
//line 40
static   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__set(void);
static   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__clr(void);


static   void /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__makeInput(void);
//line 41
static   void /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__clr(void);




static   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__makeOutput(void);
//line 40
static   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__set(void);
static   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__clr(void);




static   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__makeOutput(void);
//line 40
static   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__set(void);
static   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__clr(void);




static   void /*HplAtm128GeneralIOC.PortB.Bit1*/HplAtm128GeneralIOPinP$9__IO__makeOutput(void);
//line 46
static   void /*HplAtm128GeneralIOC.PortB.Bit2*/HplAtm128GeneralIOPinP$10__IO__makeOutput(void);
//line 44
static   void /*HplAtm128GeneralIOC.PortB.Bit3*/HplAtm128GeneralIOPinP$11__IO__makeInput(void);

static   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__makeOutput(void);
//line 40
static   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__set(void);
static   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__clr(void);


static   void /*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__makeInput(void);
//line 41
static   void /*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__clr(void);


static   void /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__makeInput(void);
//line 41
static   void /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__clr(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t MeasureClockC__Init__init(void);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t SchedulerBasicP__TaskBasic__postTask(
// 56 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
uint8_t arg_0x7efc0800);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void SchedulerBasicP__TaskBasic__default__runTask(
// 56 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
uint8_t arg_0x7efc0800);
// 57 "/opt/tinyos-2.x/tos/interfaces/Scheduler.nc"
static  void SchedulerBasicP__Scheduler__init(void);
//line 72
static  void SchedulerBasicP__Scheduler__taskLoop(void);
//line 65
static  bool SchedulerBasicP__Scheduler__runNextTask(void);
// 76 "/opt/tinyos-2.x/tos/interfaces/McuSleep.nc"
static   void McuSleepC__McuSleep__sleep(void);
// 52 "/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc"
static   void McuSleepC__McuPowerState__update(void);
// 113 "/opt/tinyos-2.x/tos/interfaces/SplitControl.nc"
static  void RadioCountToLedsC__AMControl__startDone(error_t arg_0x7eac3198);
//line 138
static  void RadioCountToLedsC__AMControl__stopDone(error_t arg_0x7eac3d48);
// 60 "/opt/tinyos-2.x/tos/interfaces/Boot.nc"
static  void RadioCountToLedsC__Boot__booted(void);
// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  void RadioCountToLedsC__AMSend__sendDone(message_t *arg_0x7eae3640, error_t arg_0x7eae37c8);
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
static  message_t *RadioCountToLedsC__Receive__receive(message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
// 83 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void RadioCountToLedsC__MilliTimer__fired(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t LedsP__Init__init(void);
// 61 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
static   void LedsP__Leds__led0Off(void);





static   void LedsP__Leds__led0Toggle(void);




static   void LedsP__Leds__led1On(void);




static   void LedsP__Leds__led1Off(void);
//line 94
static   void LedsP__Leds__led2Off(void);
//line 56
static   void LedsP__Leds__led0On(void);
//line 89
static   void LedsP__Leds__led2On(void);
// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  error_t /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__send(am_addr_t arg_0x7eae42e0, message_t *arg_0x7eae4490, uint8_t arg_0x7eae4618);
// 100 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__sendDone(message_t *arg_0x7e9f5358, error_t arg_0x7e9f54e0);
// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__sendDone(
// 48 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
am_id_t arg_0x7e9d1e50,
// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
message_t *arg_0x7eae3640, error_t arg_0x7eae37c8);
// 75 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
static  error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__send(
// 46 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
uint8_t arg_0x7e9d14f0,
// 75 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
message_t *arg_0x7ea00248, uint8_t arg_0x7ea003d0);
//line 100
static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__default__sendDone(
// 46 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
uint8_t arg_0x7e9d14f0,
// 100 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
message_t *arg_0x7e9f5358, error_t arg_0x7e9f54e0);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__runTask(void);
//line 75
static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__CancelTask__runTask(void);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
static  error_t RF230RadioP__ActiveMessageConfig__checkFrame(message_t *arg_0x7e8738b8);
//line 40
static  am_addr_t RF230RadioP__ActiveMessageConfig__destination(message_t *arg_0x7e8766b8);








static  void RF230RadioP__ActiveMessageConfig__setSource(message_t *arg_0x7e8756f0, am_addr_t arg_0x7e875880);
//line 43
static  void RF230RadioP__ActiveMessageConfig__setDestination(message_t *arg_0x7e876b88, am_addr_t arg_0x7e876d18);
//line 55
static  void RF230RadioP__ActiveMessageConfig__setGroup(message_t *arg_0x7e873248, am_group_t arg_0x7e8733d8);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RF230RadioP__RadioAlarm__fired(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
static   uint8_t RF230RadioP__RF230DriverConfig__maxPayloadLength(void);
//line 40
static   uint8_t RF230RadioP__RF230DriverConfig__headerLength(message_t *arg_0x7e8b13e8);
//line 52
static   uint8_t RF230RadioP__RF230DriverConfig__metadataLength(message_t *arg_0x7e8b1ca0);






static   uint8_t RF230RadioP__RF230DriverConfig__headerPreloadLength(void);





static   bool RF230RadioP__RF230DriverConfig__requiresRssiCca(message_t *arg_0x7e8b0658);
// 86 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
static   void RF230RadioP__SoftwareAckConfig__reportChannelError(void);
//line 80
static   void RF230RadioP__SoftwareAckConfig__createAckPacket(message_t *arg_0x7e8a3678, message_t *arg_0x7e8a3828);
//line 55
static   bool RF230RadioP__SoftwareAckConfig__requiresAckWait(message_t *arg_0x7e8a6d68);






static   bool RF230RadioP__SoftwareAckConfig__isAckPacket(message_t *arg_0x7e8a4380);






static   bool RF230RadioP__SoftwareAckConfig__verifyAckPacket(message_t *arg_0x7e8a4970, message_t *arg_0x7e8a4b20);
//line 43
static   uint16_t RF230RadioP__SoftwareAckConfig__getAckTimeout(void);





static   void RF230RadioP__SoftwareAckConfig__setAckRequired(message_t *arg_0x7e8a6698, bool arg_0x7e8a6820);
//line 75
static   bool RF230RadioP__SoftwareAckConfig__requiresAckReply(message_t *arg_0x7e8a3140);
// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueConfig.nc"
static   void RF230RadioP__UniqueConfig__setSequenceNumber(message_t *arg_0x7e897510, uint8_t arg_0x7e897698);





static   void RF230RadioP__UniqueConfig__reportChannelError(void);
//line 42
static   uint8_t RF230RadioP__UniqueConfig__getSequenceNumber(message_t *arg_0x7e8a0a70);




static   am_addr_t RF230RadioP__UniqueConfig__getSender(message_t *arg_0x7e897010);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionConfig.nc"
static   uint16_t RF230RadioP__RandomCollisionConfig__getCongestionBackoff(message_t *arg_0x7e885670);
//line 40
static   uint16_t RF230RadioP__RandomCollisionConfig__getInitialBackoff(message_t *arg_0x7e885140);










static   uint16_t RF230RadioP__RandomCollisionConfig__getMinimumBackoff(void);





static   uint16_t RF230RadioP__RandomCollisionConfig__getTransmitBarrier(message_t *arg_0x7e884010);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RadioAlarmP__RadioAlarm__default__fired(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
uint8_t arg_0x7e7d3868);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RadioAlarmP__RadioAlarm__wait(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
uint8_t arg_0x7e7d3868,
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
uint16_t arg_0x7e8481b8);




static   void RadioAlarmP__RadioAlarm__cancel(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
uint8_t arg_0x7e7d3868);
// 44 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   bool RadioAlarmP__RadioAlarm__isFree(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
uint8_t arg_0x7e7d3868);
// 64 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   uint16_t RadioAlarmP__RadioAlarm__getNow(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
uint8_t arg_0x7e7d3868);
// 78 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   void RadioAlarmP__Alarm__fired(void);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static   void RadioAlarmP__Tasklet__run(void);










static   void TaskletC__Tasklet__schedule(void);
//line 72
static  void TaskletC__Tasklet__suspend(void);






static  void TaskletC__Tasklet__resume(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void ActiveMessageLayerP__SubSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
static  message_t *ActiveMessageLayerP__SubReceive__receive(message_t *arg_0x7e7a0ec0);
// 59 "/opt/tinyos-2.x/tos/interfaces/SendNotifier.nc"
static  void ActiveMessageLayerP__SendNotifier__default__aboutToSend(
// 47 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e787300,
// 59 "/opt/tinyos-2.x/tos/interfaces/SendNotifier.nc"
am_addr_t arg_0x7e967820, message_t *arg_0x7e9679d0);
// 78 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
static  uint8_t ActiveMessageLayerP__Packet__payloadLength(message_t *arg_0x7eab5010);
//line 126
static  void *ActiveMessageLayerP__Packet__getPayload(message_t *arg_0x7eab4540, uint8_t arg_0x7eab46c8);
//line 106
static  uint8_t ActiveMessageLayerP__Packet__maxPayloadLength(void);
//line 94
static  void ActiveMessageLayerP__Packet__setPayloadLength(message_t *arg_0x7eab5690, uint8_t arg_0x7eab5818);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t ActiveMessageLayerP__RadioPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t ActiveMessageLayerP__RadioPacket__maxPayloadLength(void);
//line 54
static   void ActiveMessageLayerP__RadioPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t ActiveMessageLayerP__RadioPacket__headerLength(message_t *arg_0x7e845478);
// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  error_t ActiveMessageLayerP__AMSend__send(
// 44 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e790df8,
// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
am_addr_t arg_0x7eae42e0, message_t *arg_0x7eae4490, uint8_t arg_0x7eae4618);
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
static  message_t *ActiveMessageLayerP__Snoop__default__receive(
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e789d20,
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
//line 78
static  message_t *ActiveMessageLayerP__Receive__default__receive(
// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e789748,
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
// 68 "/opt/tinyos-2.x/tos/interfaces/AMPacket.nc"
static  am_addr_t ActiveMessageLayerP__AMPacket__address(void);









static  am_addr_t ActiveMessageLayerP__AMPacket__destination(message_t *arg_0x7ea33010);
//line 121
static  void ActiveMessageLayerP__AMPacket__setSource(message_t *arg_0x7ea315d8, am_addr_t arg_0x7ea31768);
//line 103
static  void ActiveMessageLayerP__AMPacket__setDestination(message_t *arg_0x7ea33bd8, am_addr_t arg_0x7ea33d68);
//line 147
static  am_id_t ActiveMessageLayerP__AMPacket__type(message_t *arg_0x7ea30680);
//line 162
static  void ActiveMessageLayerP__AMPacket__setType(message_t *arg_0x7ea30c18, am_id_t arg_0x7ea30da0);
//line 136
static  bool ActiveMessageLayerP__AMPacket__isForMe(message_t *arg_0x7ea31f20);
static  void ActiveMessageLayerP__AMPacket__setGroup(message_t *arg_0x7ea26c48, am_group_t arg_0x7ea26dd8);
//line 187







static  am_group_t ActiveMessageLayerP__AMPacket__localGroup(void);
// 55 "/opt/tinyos-2.x/tos/system/ActiveMessageAddressC.nc"
static   am_addr_t ActiveMessageAddressC__amAddress(void);
// 50 "/opt/tinyos-2.x/tos/interfaces/ActiveMessageAddress.nc"
static   am_addr_t ActiveMessageAddressC__ActiveMessageAddress__amAddress(void);




static   am_group_t ActiveMessageAddressC__ActiveMessageAddress__amGroup(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__granted(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__send(message_t *arg_0x7e7988a8);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__Init__init(void);
// 79 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
static   error_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__enqueue(resource_client_id_t arg_0x7e6f01e0);
//line 53
static   bool /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEmpty(void);








static   bool /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEnqueued(resource_client_id_t arg_0x7e6f17d8);







static   resource_client_id_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__dequeue(void);
// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__requested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 61 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__immediateRequested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 65 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__unconfigure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 59 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__configure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__release(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__immediateRequest(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__request(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__default__granted(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__runTask(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void Ieee154MessageLayerC__SubSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
static  message_t *Ieee154MessageLayerC__SubReceive__receive(message_t *arg_0x7e7a0ec0);
// 78 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
static  uint8_t Ieee154MessageLayerC__Packet__payloadLength(message_t *arg_0x7eab5010);
// 97 "/opt/tinyos-2.x/tos/interfaces/Ieee154Send.nc"
static  void Ieee154MessageLayerC__Ieee154Send__default__sendDone(message_t *arg_0x7e8f2b08, error_t arg_0x7e8f2c90);
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
static  message_t *Ieee154MessageLayerC__Ieee154Receive__default__receive(message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void TinyosNetworkLayerC__SubSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
static  message_t *TinyosNetworkLayerC__SubReceive__receive(message_t *arg_0x7e7a0ec0);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t TinyosNetworkLayerC__Ieee154Packet__payloadLength(message_t *arg_0x7e845a50);
//line 43
static   uint8_t TinyosNetworkLayerC__Ieee154Packet__headerLength(message_t *arg_0x7e845478);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t TinyosNetworkLayerC__TinyosSend__send(message_t *arg_0x7e7988a8);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t TinyosNetworkLayerC__TinyosPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t TinyosNetworkLayerC__TinyosPacket__maxPayloadLength(void);
//line 54
static   void TinyosNetworkLayerC__TinyosPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t TinyosNetworkLayerC__TinyosPacket__headerLength(message_t *arg_0x7e845478);
// 37 "/opt/tinyos-2.x/tos/interfaces/Ieee154Packet.nc"
static  ieee154_saddr_t Ieee154PacketLayerP__Ieee154Packet__address(void);

static  ieee154_saddr_t Ieee154PacketLayerP__Ieee154Packet__destination(message_t *arg_0x7e8e1e28);







static  bool Ieee154PacketLayerP__Ieee154Packet__isForMe(message_t *arg_0x7e8d64c8);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t Ieee154PacketLayerP__RadioPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t Ieee154PacketLayerP__RadioPacket__maxPayloadLength(void);
//line 54
static   void Ieee154PacketLayerP__RadioPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t Ieee154PacketLayerP__RadioPacket__headerLength(message_t *arg_0x7e845478);
// 75 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__isAckFrame(message_t *arg_0x7e864928);
//line 120
static   uint8_t Ieee154PacketLayerP__Ieee154PacketLayer__getDSN(message_t *arg_0x7e860bb0);
//line 69
static   void Ieee154PacketLayerP__Ieee154PacketLayer__createDataFrame(message_t *arg_0x7e864378);
//line 125
static   void Ieee154PacketLayerP__Ieee154PacketLayer__setDSN(message_t *arg_0x7e858140, uint8_t arg_0x7e8582c8);
//line 88
static   void Ieee154PacketLayerP__Ieee154PacketLayer__createAckReply(message_t *arg_0x7e863468, message_t *arg_0x7e863618);
//line 156
static   void Ieee154PacketLayerP__Ieee154PacketLayer__setSrcAddr(message_t *arg_0x7e855520, uint16_t arg_0x7e8556b0);
//line 151
static   uint16_t Ieee154PacketLayerP__Ieee154PacketLayer__getSrcAddr(message_t *arg_0x7e855010);
//line 63
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__isDataFrame(message_t *arg_0x7e866e10);
//line 94
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__verifyAckReply(message_t *arg_0x7e863be8, message_t *arg_0x7e863d98);




static   bool Ieee154PacketLayerP__Ieee154PacketLayer__getAckRequired(message_t *arg_0x7e861380);
//line 162
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckWait(message_t *arg_0x7e855bc8);
//line 146
static   void Ieee154PacketLayerP__Ieee154PacketLayer__setDestAddr(message_t *arg_0x7e856900, uint16_t arg_0x7e856a90);
//line 136
static   void Ieee154PacketLayerP__Ieee154PacketLayer__setDestPan(message_t *arg_0x7e858d08, uint16_t arg_0x7e858e98);
//line 105
static   void Ieee154PacketLayerP__Ieee154PacketLayer__setAckRequired(message_t *arg_0x7e861890, bool arg_0x7e861a18);
//line 168
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckReply(message_t *arg_0x7e853140);
//line 141
static   uint16_t Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(message_t *arg_0x7e8563f0);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void UniqueLayerP__SubSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *UniqueLayerP__SubReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool UniqueLayerP__SubReceive__header(message_t *arg_0x7e5fb7d0);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t UniqueLayerP__Send__send(message_t *arg_0x7e7988a8);
// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Neighborhood.nc"
static   void UniqueLayerP__Neighborhood__evicted(uint8_t arg_0x7e5ea4e8);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t UniqueLayerP__Init__init(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodFlag.nc"
static   bool NeighborhoodP__NeighborhoodFlag__get(
// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
uint8_t arg_0x7e5d15a8,
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodFlag.nc"
uint8_t arg_0x7e5e7308);




static   void NeighborhoodP__NeighborhoodFlag__set(
// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
uint8_t arg_0x7e5d15a8,
// 51 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodFlag.nc"
uint8_t arg_0x7e5e77e0);
// 71 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Neighborhood.nc"
static   uint8_t NeighborhoodP__Neighborhood__insertNode(am_addr_t arg_0x7e5ebe28);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t NeighborhoodP__Init__init(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void PacketLinkLayerP__SubSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void PacketLinkLayerP__send__runTask(void);
// 83 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void PacketLinkLayerP__DelayTimer__fired(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t PacketLinkLayerP__Send__send(message_t *arg_0x7e7988a8);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t PacketLinkLayerP__RadioPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t PacketLinkLayerP__RadioPacket__maxPayloadLength(void);
//line 54
static   void PacketLinkLayerP__RadioPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t PacketLinkLayerP__RadioPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t PacketLinkLayerP__RadioPacket__metadataLength(message_t *arg_0x7e843a08);
// 65 "/opt/tinyos-2.x/tos/interfaces/PacketLink.nc"
static  uint16_t PacketLinkLayerP__PacketLink__getRetryDelay(message_t *arg_0x7e955b08);
//line 46
static  void PacketLinkLayerP__PacketLink__setRetries(message_t *arg_0x7e957748, uint16_t arg_0x7e9578e0);
//line 59
static  uint16_t PacketLinkLayerP__PacketLink__getRetries(message_t *arg_0x7e9555e0);
// 109 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__size_type /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getNow(void);
//line 103
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__startAt(/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__size_type arg_0x7e7d9678, /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__size_type arg_0x7e7d9808);
//line 116
static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__size_type /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getAlarm(void);
//line 73
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__stop(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Init__init(void);
// 64 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__size_type /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__get(void);
// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__fired(void);
// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__overflow(void);
// 89 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc"
static   uint8_t HplAtm1281Timer2AsyncP__TimerCtrl__getInterruptFlag(void);
//line 82
static   void HplAtm1281Timer2AsyncP__TimerCtrl__setControlB(uint8_t arg_0x7e51bc70);
//line 81
static   void HplAtm1281Timer2AsyncP__TimerCtrl__setControlA(uint8_t arg_0x7e51b7c8);
// 62 "/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc"
static   mcu_power_t HplAtm1281Timer2AsyncP__McuPowerOverride__lowestState(void);
// 68 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc"
static   void HplAtm1281Timer2AsyncP__TimerAsync__setTimer2Asynchronous(void);
//line 86
static   int HplAtm1281Timer2AsyncP__TimerAsync__compareABusy(void);
// 48 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   HplAtm1281Timer2AsyncP__Compare__size_type HplAtm1281Timer2AsyncP__Compare__get(void);





static   void HplAtm1281Timer2AsyncP__Compare__set(HplAtm1281Timer2AsyncP__Compare__size_type arg_0x7e517d90);










static   void HplAtm1281Timer2AsyncP__Compare__start(void);
// 61 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   HplAtm1281Timer2AsyncP__Timer__timer_size HplAtm1281Timer2AsyncP__Timer__get(void);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__runTask(void);
// 78 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__fired(void);
// 136 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  uint32_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__getNow(void);
//line 129
static  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__startOneShotAt(uint32_t arg_0x7ead39b8, uint32_t arg_0x7ead3b48);
//line 78
static  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__stop(void);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__runTask(void);
// 83 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__fired(void);
//line 83
static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__default__fired(
// 48 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
uint8_t arg_0x7e3d55c8);
// 64 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startPeriodic(
// 48 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
uint8_t arg_0x7e3d55c8,
// 64 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
uint32_t arg_0x7ead66d8);








static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startOneShot(
// 48 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
uint8_t arg_0x7e3d55c8,
// 73 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
uint32_t arg_0x7ead6ca8);




static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__stop(
// 48 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
uint8_t arg_0x7e3d55c8);
// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   void /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__Counter__overflow(void);
// 104 "/opt/tinyos-2.x/tos/interfaces/SplitControl.nc"
static  error_t MessageBufferLayerP__SplitControl__start(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t MessageBufferLayerP__SoftwareInit__init(void);
// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioState.nc"
static   void MessageBufferLayerP__RadioState__done(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t MessageBufferLayerP__Send__send(message_t *arg_0x7e7988a8);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void MessageBufferLayerP__stateDoneTask__runTask(void);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *MessageBufferLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool MessageBufferLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void MessageBufferLayerP__sendTask__runTask(void);
//line 75
static  void MessageBufferLayerP__deliverTask__runTask(void);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   void MessageBufferLayerP__RadioSend__ready(void);
//line 56
static   void MessageBufferLayerP__RadioSend__sendDone(error_t arg_0x7e390a40);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioChannel.nc"
static  void MessageBufferLayerP__RadioChannel__default__setChannelDone(void);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static   void MessageBufferLayerP__Tasklet__run(void);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   void RandomCollisionLayerP__SubSend__ready(void);
//line 56
static   void RandomCollisionLayerP__SubSend__sendDone(error_t arg_0x7e390a40);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *RandomCollisionLayerP__SubReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool RandomCollisionLayerP__SubReceive__header(message_t *arg_0x7e5fb7d0);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RandomCollisionLayerP__RadioAlarm__fired(void);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   error_t RandomCollisionLayerP__RadioSend__send(message_t *arg_0x7e390380);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void RandomCollisionLayerP__calcNextRandom__runTask(void);
// 52 "/opt/tinyos-2.x/tos/interfaces/Random.nc"
static   uint16_t RandomMlcgC__Random__rand16(void);
//line 46
static   uint32_t RandomMlcgC__Random__rand32(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t RandomMlcgC__Init__init(void);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   void SoftwareAckLayerP__SubSend__ready(void);
//line 56
static   void SoftwareAckLayerP__SubSend__sendDone(error_t arg_0x7e390a40);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *SoftwareAckLayerP__SubReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool SoftwareAckLayerP__SubReceive__header(message_t *arg_0x7e5fb7d0);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void SoftwareAckLayerP__RadioAlarm__fired(void);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   error_t SoftwareAckLayerP__RadioSend__send(message_t *arg_0x7e390380);
// 59 "/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc"
static   error_t SoftwareAckLayerP__PacketAcknowledgements__requestAck(message_t *arg_0x7ea21228);
//line 85
static   bool SoftwareAckLayerP__PacketAcknowledgements__wasAcked(message_t *arg_0x7ea20010);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t MetadataFlagsLayerC__RadioPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t MetadataFlagsLayerC__RadioPacket__maxPayloadLength(void);
//line 54
static   void MetadataFlagsLayerC__RadioPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t MetadataFlagsLayerC__RadioPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t MetadataFlagsLayerC__RadioPacket__metadataLength(message_t *arg_0x7e843a08);
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
static   void MetadataFlagsLayerC__PacketFlag__clear(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
uint8_t arg_0x7e2f3310,
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
message_t *arg_0x7e309868);
//line 40
static   bool MetadataFlagsLayerC__PacketFlag__get(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
uint8_t arg_0x7e2f3310,
// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
message_t *arg_0x7e30a758);




static   void MetadataFlagsLayerC__PacketFlag__setValue(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
uint8_t arg_0x7e2f3310,
// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
message_t *arg_0x7e30ac60, bool arg_0x7e30ade8);




static   void MetadataFlagsLayerC__PacketFlag__set(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
uint8_t arg_0x7e2f3310,
// 50 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
message_t *arg_0x7e309370);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t TimeStampingLayerP__RadioPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t TimeStampingLayerP__RadioPacket__maxPayloadLength(void);
//line 54
static   void TimeStampingLayerP__RadioPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t TimeStampingLayerP__RadioPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t TimeStampingLayerP__RadioPacket__metadataLength(message_t *arg_0x7e843a08);
// 70 "/opt/tinyos-2.x/tos/interfaces/PacketTimeStamp.nc"
static   void TimeStampingLayerP__PacketTimeStampRadio__clear(message_t *arg_0x7e945638);







static   void TimeStampingLayerP__PacketTimeStampRadio__set(message_t *arg_0x7e945b60, TimeStampingLayerP__PacketTimeStampRadio__size_type arg_0x7e945cf0);
// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioCCA.nc"
static   void RF230DriverLayerP__RadioCCA__default__done(error_t arg_0x7e357460);
// 51 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketField.nc"
static   void RF230DriverLayerP__PacketRSSI__clear(message_t *arg_0x7e924450);





static   void RF230DriverLayerP__PacketRSSI__set(message_t *arg_0x7e924938, RF230DriverLayerP__PacketRSSI__value_type arg_0x7e924ac8);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t RF230DriverLayerP__SoftwareInit__init(void);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RF230DriverLayerP__RadioAlarm__fired(void);
// 56 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioState.nc"
static   error_t RF230DriverLayerP__RadioState__turnOn(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketField.nc"
static   RF230DriverLayerP__PacketTransmitPower__value_type RF230DriverLayerP__PacketTransmitPower__get(message_t *arg_0x7e925e78);
//line 40
static   bool RF230DriverLayerP__PacketTransmitPower__isSet(message_t *arg_0x7e925968);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t RF230DriverLayerP__RadioPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t RF230DriverLayerP__RadioPacket__maxPayloadLength(void);
//line 54
static   void RF230DriverLayerP__RadioPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t RF230DriverLayerP__RadioPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t RF230DriverLayerP__RadioPacket__metadataLength(message_t *arg_0x7e843a08);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketField.nc"
static   RF230DriverLayerP__PacketTimeSyncOffset__value_type RF230DriverLayerP__PacketTimeSyncOffset__get(message_t *arg_0x7e925e78);
//line 40
static   bool RF230DriverLayerP__PacketTimeSyncOffset__isSet(message_t *arg_0x7e925968);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t RF230DriverLayerP__PlatformInit__init(void);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void RF230DriverLayerP__SpiResource__granted(void);
// 57 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketField.nc"
static   void RF230DriverLayerP__PacketLinkQuality__set(message_t *arg_0x7e924938, RF230DriverLayerP__PacketLinkQuality__value_type arg_0x7e924ac8);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   error_t RF230DriverLayerP__RadioSend__send(message_t *arg_0x7e390380);
// 61 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
static   void RF230DriverLayerP__IRQ__captured(uint16_t arg_0x7e23aa30);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static   void RF230DriverLayerP__Tasklet__run(void);
// 60 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
static   void HplRF230P__Capture__captured(HplRF230P__Capture__size_type arg_0x7e1543a0);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t HplRF230P__PlatformInit__init(void);
// 66 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
static   void HplRF230P__IRQ__disable(void);
//line 53
static   error_t HplRF230P__IRQ__captureRisingEdge(void);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void Atm128SpiP__zeroTask__runTask(void);
// 82 "/opt/tinyos-2.x/tos/interfaces/SpiPacket.nc"
static   void Atm128SpiP__SpiPacket__default__sendDone(uint8_t *arg_0x7e132648, uint8_t *arg_0x7e1327f0, uint16_t arg_0x7e132980,
error_t arg_0x7e132b18);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void Atm128SpiP__ResourceArbiter__granted(
// 99 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11b410);
// 45 "/opt/tinyos-2.x/tos/interfaces/SpiByte.nc"
static   uint8_t Atm128SpiP__SpiByte__write(uint8_t arg_0x7e139d78);
// 109 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
static   void Atm128SpiP__Spi__dataReady(uint8_t arg_0x7e115f08);
// 57 "/opt/tinyos-2.x/tos/interfaces/FastSpiByte.nc"
static   void Atm128SpiP__FastSpiByte__splitWrite(uint8_t arg_0x7e23f530);
//line 69
static   uint8_t Atm128SpiP__FastSpiByte__splitReadWrite(uint8_t arg_0x7e23fe68);
//line 63
static   uint8_t Atm128SpiP__FastSpiByte__splitRead(void);
//line 76
static   uint8_t Atm128SpiP__FastSpiByte__write(uint8_t arg_0x7e23e3d8);
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t Atm128SpiP__Resource__release(
// 95 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11e0b8);
// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t Atm128SpiP__Resource__immediateRequest(
// 95 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11e0b8);
// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t Atm128SpiP__Resource__request(
// 95 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11e0b8);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void Atm128SpiP__Resource__default__granted(
// 95 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11e0b8);
// 128 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   uint8_t Atm128SpiP__Resource__isOwner(
// 95 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11e0b8);
// 89 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
static   void HplAtm128SpiP__SPI__sleep(void);
//line 83
static   void HplAtm128SpiP__SPI__initMaster(void);
//line 122
static   void HplAtm128SpiP__SPI__setMasterBit(bool arg_0x7e112c08);
//line 113
static   void HplAtm128SpiP__SPI__enableInterrupt(bool arg_0x7e114478);
//line 97
static   uint8_t HplAtm128SpiP__SPI__read(void);
//line 142
static   void HplAtm128SpiP__SPI__setMasterDoubleSpeed(bool arg_0x7e100680);
//line 131
static   void HplAtm128SpiP__SPI__setClock(uint8_t arg_0x7e110480);
//line 125
static   void HplAtm128SpiP__SPI__setClockPolarity(bool arg_0x7e111490);
//line 103
static   void HplAtm128SpiP__SPI__write(uint8_t arg_0x7e1159f8);
//line 116
static   void HplAtm128SpiP__SPI__enableSpi(bool arg_0x7e114c48);
//line 128
static   void HplAtm128SpiP__SPI__setClockPhase(bool arg_0x7e111c70);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__Init__init(void);
// 79 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
static   error_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__enqueue(resource_client_id_t arg_0x7e6f01e0);
//line 53
static   bool /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEmpty(void);








static   bool /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEnqueued(resource_client_id_t arg_0x7e6f17d8);







static   resource_client_id_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__dequeue(void);
// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__requested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 61 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__immediateRequested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 65 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__unconfigure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 59 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__configure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__release(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__immediateRequest(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__request(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 128 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   uint8_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__isOwner(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 90 "/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc"
static   bool /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ArbiterInfo__inUse(void);
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__runTask(void);
// 91 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc"
static   uint8_t HplAtm1281Timer1P__TimerCtrl__getInterruptFlag(void);
//line 83
static   void HplAtm1281Timer1P__TimerCtrl__setControlB(uint8_t arg_0x7e055b68);
//line 80
static   uint8_t HplAtm1281Timer1P__TimerCtrl__getControlB(void);
// 62 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void HplAtm1281Timer1P__CompareA__reset(void);
//line 54
static   void HplAtm1281Timer1P__CompareA__set(HplAtm1281Timer1P__CompareA__size_type arg_0x7e517d90);










static   void HplAtm1281Timer1P__CompareA__start(void);


static   void HplAtm1281Timer1P__CompareA__stop(void);
// 88 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
static   void HplAtm1281Timer1P__Capture__setEdge(bool arg_0x7e153988);
//line 47
static   HplAtm1281Timer1P__Capture__size_type HplAtm1281Timer1P__Capture__get(void);
//line 64
static   void HplAtm1281Timer1P__Capture__reset(void);


static   void HplAtm1281Timer1P__Capture__start(void);


static   void HplAtm1281Timer1P__Capture__stop(void);
// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void HplAtm1281Timer1P__CompareB__default__fired(void);
//line 58
static   void HplAtm1281Timer1P__CompareC__default__fired(void);
// 87 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   bool HplAtm1281Timer1P__Timer__test(void);
//line 61
static   HplAtm1281Timer1P__Timer__timer_size HplAtm1281Timer1P__Timer__get(void);
//line 104
static   void HplAtm1281Timer1P__Timer__setScale(uint8_t arg_0x7e5257e0);
//line 67
static   void HplAtm1281Timer1P__Timer__set(HplAtm1281Timer1P__Timer__timer_size arg_0x7e527b70);










static   void HplAtm1281Timer1P__Timer__start(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t /*InitOneP.InitOne*/Atm128TimerInitC$0__Init__init(void);
// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__overflow(void);
// 109 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__size_type /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__getNow(void);
//line 103
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__startAt(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__size_type arg_0x7e7d9678, /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__size_type arg_0x7e7d9808);
//line 66
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__start(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__size_type arg_0x7e7e0550);






static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__stop(void);
// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__fired(void);
// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__overflow(void);
// 64 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__size_type /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__get(void);






static   bool /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__isOverflowPending(void);
// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__overflow(void);
// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   void /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__overflow(void);
//line 64
static   /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__get(void);
// 61 "/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc"
static   uint32_t /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__LocalTime__get(void);
// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   void /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__overflow(void);
// 66 "/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc"
static   void BusyWaitMicroC__BusyWait__wait(BusyWaitMicroC__BusyWait__size_type arg_0x7e235010);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t PlatformP__MoteInit__init(void);
//line 62
static  error_t PlatformP__MeasureClock__init(void);
// 51 "/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc"
static inline void PlatformP__power_init(void);






static inline  error_t PlatformP__Init__init(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static  error_t MotePlatformP__SubInit__init(void);
// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void MotePlatformP__SerialIdPin__makeInput(void);
//line 41
static   void MotePlatformP__SerialIdPin__clr(void);
// 26 "/opt/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc"
static inline  error_t MotePlatformP__PlatformInit__init(void);
// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__set(void);
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__clr(void);




static __inline   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__makeOutput(void);
//line 55
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__set(void);
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__clr(void);




static __inline   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__makeOutput(void);
//line 55
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__set(void);
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__clr(void);
static inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__toggle(void);



static __inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__makeOutput(void);
//line 56
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__clr(void);


static __inline   void /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__makeInput(void);
//line 55
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__set(void);
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__clr(void);




static __inline   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__makeOutput(void);
//line 55
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__set(void);
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__clr(void);




static __inline   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__makeOutput(void);
//line 61
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit1*/HplAtm128GeneralIOPinP$9__IO__makeOutput(void);
//line 61
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit2*/HplAtm128GeneralIOPinP$10__IO__makeOutput(void);
//line 59
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit3*/HplAtm128GeneralIOPinP$11__IO__makeInput(void);
//line 55
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__set(void);
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__clr(void);


static __inline   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__makeOutput(void);
//line 56
static __inline   void /*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__clr(void);


static __inline   void /*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__makeInput(void);
//line 56
static __inline   void /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__clr(void);


static __inline   void /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__makeInput(void);
// 67 "/opt/tinyos-2.x/tos/platforms/iris/MeasureClockC.nc"
enum MeasureClockC____nesc_unnamed4328 {


  MeasureClockC__MAGIC = 488 / (16 / PLATFORM_MHZ)
};

uint16_t MeasureClockC__cycles;

static inline  error_t MeasureClockC__Init__init(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static error_t RealMainP__SoftwareInit__init(void);
// 60 "/opt/tinyos-2.x/tos/interfaces/Boot.nc"
static void RealMainP__Boot__booted(void);
// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static error_t RealMainP__PlatformInit__init(void);
// 57 "/opt/tinyos-2.x/tos/interfaces/Scheduler.nc"
static void RealMainP__Scheduler__init(void);
//line 72
static void RealMainP__Scheduler__taskLoop(void);
//line 65
static bool RealMainP__Scheduler__runNextTask(void);
// 63 "/opt/tinyos-2.x/tos/system/RealMainP.nc"
int main_tinyos(void)   ;
// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void SchedulerBasicP__TaskBasic__runTask(
// 56 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
uint8_t arg_0x7efc0800);
// 76 "/opt/tinyos-2.x/tos/interfaces/McuSleep.nc"
static   void SchedulerBasicP__McuSleep__sleep(void);
// 61 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
enum SchedulerBasicP____nesc_unnamed4329 {

  SchedulerBasicP__NUM_TASKS = 12U,
  SchedulerBasicP__NO_TASK = 255
};


uint8_t SchedulerBasicP__m_head;
uint8_t SchedulerBasicP__m_tail;
uint8_t SchedulerBasicP__m_next[SchedulerBasicP__NUM_TASKS];

void printSchedulerContents()
{
	for(uint16_t i = 0; i < SchedulerBasicP__NUM_TASKS; i++)
	{
		hal_printf("%d \t",SchedulerBasicP__m_next[i]);
	}
}







static __inline uint8_t SchedulerBasicP__popTask(void);
//line 97
static inline bool SchedulerBasicP__isWaiting(uint8_t id);




static inline bool SchedulerBasicP__pushTask(uint8_t id);
//line 124
static inline  void SchedulerBasicP__Scheduler__init(void);









static  bool SchedulerBasicP__Scheduler__runNextTask(void);
//line 149
static inline  void SchedulerBasicP__Scheduler__taskLoop(void);
//line 170
static   error_t SchedulerBasicP__TaskBasic__postTask(uint8_t id);




static   void SchedulerBasicP__TaskBasic__default__runTask(uint8_t id);
// 62 "/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc"
static   mcu_power_t McuSleepC__McuPowerOverride__lowestState(void);
// 99 "/opt/tinyos-2.x/tos/chips/atm1281/McuSleepC.nc"
const_uint8_t McuSleepC__atm128PowerBits[ATM128_POWER_DOWN + 1] = {
0,
1 << 1, ((
1 << 3) | (1 << 2)) | (1 << 1), (
1 << 2) | (1 << 1), (
1 << 3) | (1 << 2),
1 << 2 };

static inline mcu_power_t McuSleepC__getPowerState(void);
//line 147
static inline   void McuSleepC__McuSleep__sleep(void);
//line 161
static inline   void McuSleepC__McuPowerState__update(void);
// 104 "/opt/tinyos-2.x/tos/interfaces/SplitControl.nc"
static  error_t RadioCountToLedsC__AMControl__start(void);
// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  error_t RadioCountToLedsC__AMSend__send(am_addr_t arg_0x7eae42e0, message_t *arg_0x7eae4490, uint8_t arg_0x7eae4618);
// 126 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
static  void *RadioCountToLedsC__Packet__getPayload(message_t *arg_0x7eab4540, uint8_t arg_0x7eab46c8);
//line 106
static  uint8_t RadioCountToLedsC__Packet__maxPayloadLength(void);
// 64 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void RadioCountToLedsC__MilliTimer__startPeriodic(uint32_t arg_0x7ead66d8);
// 61 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
static   void RadioCountToLedsC__Leds__led0Off(void);





static   void RadioCountToLedsC__Leds__led0Toggle(void);




static   void RadioCountToLedsC__Leds__led1On(void);




static   void RadioCountToLedsC__Leds__led1Off(void);
//line 94
static   void RadioCountToLedsC__Leds__led2Off(void);
//line 56
static   void RadioCountToLedsC__Leds__led0On(void);
//line 89
static   void RadioCountToLedsC__Leds__led2On(void);
// 59 "RadioCountToLedsC.nc"
message_t RadioCountToLedsC__packet;

bool RadioCountToLedsC__locked;
uint16_t RadioCountToLedsC__counter = 0;

static inline  void RadioCountToLedsC__Boot__booted(void);





static inline  void RadioCountToLedsC__AMControl__startDone(error_t err);









static inline  void RadioCountToLedsC__AMControl__stopDone(error_t err);



static inline  void RadioCountToLedsC__MilliTimer__fired(void);
//line 110
static inline  message_t *RadioCountToLedsC__Receive__receive(message_t *bufPtr,
void *payload, uint8_t len);
//line 138
static inline  void RadioCountToLedsC__AMSend__sendDone(message_t *bufPtr, error_t error);
// 42 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void LedsP__Led0__toggle(void);



static   void LedsP__Led0__makeOutput(void);
//line 40
static   void LedsP__Led0__set(void);
static   void LedsP__Led0__clr(void);




static   void LedsP__Led1__makeOutput(void);
//line 40
static   void LedsP__Led1__set(void);
static   void LedsP__Led1__clr(void);




static   void LedsP__Led2__makeOutput(void);
//line 40
static   void LedsP__Led2__set(void);
static   void LedsP__Led2__clr(void);
// 56 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline  error_t LedsP__Init__init(void);
//line 74
static inline   void LedsP__Leds__led0On(void);




static inline   void LedsP__Leds__led0Off(void);




static inline   void LedsP__Leds__led0Toggle(void);




static inline   void LedsP__Leds__led1On(void);




static inline   void LedsP__Leds__led1Off(void);









static inline   void LedsP__Leds__led2On(void);




static inline   void LedsP__Leds__led2Off(void);
// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__sendDone(message_t *arg_0x7eae3640, error_t arg_0x7eae37c8);
// 75 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
static  error_t /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__send(message_t *arg_0x7ea00248, uint8_t arg_0x7ea003d0);
// 103 "/opt/tinyos-2.x/tos/interfaces/AMPacket.nc"
static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMPacket__setDestination(message_t *arg_0x7ea33bd8, am_addr_t arg_0x7ea33d68);
//line 162
static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMPacket__setType(message_t *arg_0x7ea30c18, am_id_t arg_0x7ea30da0);
// 53 "/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc"
static inline  error_t /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__send(am_addr_t dest,
message_t *msg,
uint8_t len);









static inline  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__sendDone(message_t *m, error_t err);
// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__send(
// 48 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
am_id_t arg_0x7e9d1e50,
// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
am_addr_t arg_0x7eae42e0, message_t *arg_0x7eae4490, uint8_t arg_0x7eae4618);
// 100 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__sendDone(
// 46 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
uint8_t arg_0x7e9d14f0,
// 100 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
message_t *arg_0x7e9f5358, error_t arg_0x7e9f54e0);
// 78 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
static  uint8_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Packet__payloadLength(message_t *arg_0x7eab5010);
//line 94
static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Packet__setPayloadLength(message_t *arg_0x7eab5690, uint8_t arg_0x7eab5818);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__postTask(void);
// 78 "/opt/tinyos-2.x/tos/interfaces/AMPacket.nc"
static  am_addr_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__destination(message_t *arg_0x7ea33010);
//line 147
static  am_id_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__type(message_t *arg_0x7ea30680);
// 126 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
enum /*AMQueueP.AMQueueImplP*/AMQueueImplP$0____nesc_unnamed4330 {
//line 126
  AMQueueImplP$0__CancelTask = 0U
};
//line 126
typedef int /*AMQueueP.AMQueueImplP*/AMQueueImplP$0____nesc_sillytask_CancelTask[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__CancelTask];
//line 169
enum /*AMQueueP.AMQueueImplP*/AMQueueImplP$0____nesc_unnamed4331 {
//line 169
  AMQueueImplP$0__errorTask = 1U
};
//line 169
typedef int /*AMQueueP.AMQueueImplP*/AMQueueImplP$0____nesc_sillytask_errorTask[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask];
//line 57
//line 55
typedef struct /*AMQueueP.AMQueueImplP*/AMQueueImplP$0____nesc_unnamed4332 {
  message_t *msg;
} /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue_entry_t;

uint8_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current = 1;
/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue_entry_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[1];
uint8_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__cancelMask[1 / 8 + 1];

static void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__tryToSend(void);

static inline void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__nextPacket(void);
//line 90
static inline  error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__send(uint8_t clientId, message_t *msg,
uint8_t len);
//line 126
static inline  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__CancelTask__runTask(void);
//line 163
static inline void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__sendDone(uint8_t last, message_t *msg, error_t err);





static inline  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__runTask(void);




static void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__tryToSend(void);
//line 189
static inline  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__sendDone(am_id_t id, message_t *msg, error_t err);
//line 215
static inline   void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__default__sendDone(uint8_t id, message_t *msg, error_t err);
// 64 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   uint16_t RF230RadioP__RadioAlarm__getNow(void);
// 75 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
static   bool RF230RadioP__Ieee154PacketLayer__isAckFrame(message_t *arg_0x7e864928);
//line 120
static   uint8_t RF230RadioP__Ieee154PacketLayer__getDSN(message_t *arg_0x7e860bb0);
//line 69
static   void RF230RadioP__Ieee154PacketLayer__createDataFrame(message_t *arg_0x7e864378);
//line 125
static   void RF230RadioP__Ieee154PacketLayer__setDSN(message_t *arg_0x7e858140, uint8_t arg_0x7e8582c8);
//line 88
static   void RF230RadioP__Ieee154PacketLayer__createAckReply(message_t *arg_0x7e863468, message_t *arg_0x7e863618);
//line 156
static   void RF230RadioP__Ieee154PacketLayer__setSrcAddr(message_t *arg_0x7e855520, uint16_t arg_0x7e8556b0);
//line 151
static   uint16_t RF230RadioP__Ieee154PacketLayer__getSrcAddr(message_t *arg_0x7e855010);
//line 63
static   bool RF230RadioP__Ieee154PacketLayer__isDataFrame(message_t *arg_0x7e866e10);
//line 94
static   bool RF230RadioP__Ieee154PacketLayer__verifyAckReply(message_t *arg_0x7e863be8, message_t *arg_0x7e863d98);
//line 162
static   bool RF230RadioP__Ieee154PacketLayer__requiresAckWait(message_t *arg_0x7e855bc8);
//line 146
static   void RF230RadioP__Ieee154PacketLayer__setDestAddr(message_t *arg_0x7e856900, uint16_t arg_0x7e856a90);
//line 136
static   void RF230RadioP__Ieee154PacketLayer__setDestPan(message_t *arg_0x7e858d08, uint16_t arg_0x7e858e98);
//line 105
static   void RF230RadioP__Ieee154PacketLayer__setAckRequired(message_t *arg_0x7e861890, bool arg_0x7e861a18);
//line 168
static   bool RF230RadioP__Ieee154PacketLayer__requiresAckReply(message_t *arg_0x7e853140);
//line 141
static   uint16_t RF230RadioP__Ieee154PacketLayer__getDestAddr(message_t *arg_0x7e8563f0);
// 73 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint8_t RF230RadioP__RF230DriverConfig__headerLength(message_t *msg);




static inline   uint8_t RF230RadioP__RF230DriverConfig__maxPayloadLength(void);




static inline   uint8_t RF230RadioP__RF230DriverConfig__metadataLength(message_t *msg);




static inline   uint8_t RF230RadioP__RF230DriverConfig__headerPreloadLength(void);





static inline   bool RF230RadioP__RF230DriverConfig__requiresRssiCca(message_t *msg);






static inline   bool RF230RadioP__SoftwareAckConfig__requiresAckWait(message_t *msg);




static inline   bool RF230RadioP__SoftwareAckConfig__isAckPacket(message_t *msg);




static inline   bool RF230RadioP__SoftwareAckConfig__verifyAckPacket(message_t *data, message_t *ack);




static inline   void RF230RadioP__SoftwareAckConfig__setAckRequired(message_t *msg, bool ack);




static inline   bool RF230RadioP__SoftwareAckConfig__requiresAckReply(message_t *msg);




static inline   void RF230RadioP__SoftwareAckConfig__createAckPacket(message_t *data, message_t *ack);








static inline   uint16_t RF230RadioP__SoftwareAckConfig__getAckTimeout(void);




static inline   void RF230RadioP__SoftwareAckConfig__reportChannelError(void);








static inline   uint8_t RF230RadioP__UniqueConfig__getSequenceNumber(message_t *msg);




static inline   void RF230RadioP__UniqueConfig__setSequenceNumber(message_t *msg, uint8_t dsn);




static inline   am_addr_t RF230RadioP__UniqueConfig__getSender(message_t *msg);




static inline   void RF230RadioP__UniqueConfig__reportChannelError(void);








static inline  am_addr_t RF230RadioP__ActiveMessageConfig__destination(message_t *msg);




static inline  void RF230RadioP__ActiveMessageConfig__setDestination(message_t *msg, am_addr_t addr);









static inline  void RF230RadioP__ActiveMessageConfig__setSource(message_t *msg, am_addr_t addr);









static inline  void RF230RadioP__ActiveMessageConfig__setGroup(message_t *msg, am_group_t grp);




static inline  error_t RF230RadioP__ActiveMessageConfig__checkFrame(message_t *msg);
//line 220
enum RF230RadioP____nesc_unnamed4333 {

  RF230RadioP__TRAFFIC_UPDATE_PERIOD = 100,
  RF230RadioP__TRAFFIC_MAX_BYTES = (uint16_t )(RF230RadioP__TRAFFIC_UPDATE_PERIOD * 1000UL / 32)
};
//line 266
static inline   uint16_t RF230RadioP__RandomCollisionConfig__getMinimumBackoff(void);








static inline   uint16_t RF230RadioP__RandomCollisionConfig__getInitialBackoff(message_t *msg);








static inline   uint16_t RF230RadioP__RandomCollisionConfig__getCongestionBackoff(message_t *msg);






static inline   uint16_t RF230RadioP__RandomCollisionConfig__getTransmitBarrier(message_t *msg);
//line 307
static inline   void RF230RadioP__RadioAlarm__fired(void);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RadioAlarmP__RadioAlarm__fired(
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
uint8_t arg_0x7e7d3868);
// 109 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   RadioAlarmP__Alarm__size_type RadioAlarmP__Alarm__getNow(void);
//line 66
static   void RadioAlarmP__Alarm__start(RadioAlarmP__Alarm__size_type arg_0x7e7e0550);






static   void RadioAlarmP__Alarm__stop(void);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static   void RadioAlarmP__Tasklet__schedule(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
 uint8_t RadioAlarmP__state;
enum RadioAlarmP____nesc_unnamed4334 {

  RadioAlarmP__STATE_READY = 0,
  RadioAlarmP__STATE_WAIT = 1,
  RadioAlarmP__STATE_FIRED = 2
};

 uint8_t RadioAlarmP__alarm;

static inline   void RadioAlarmP__Alarm__fired(void);










static __inline   uint16_t RadioAlarmP__RadioAlarm__getNow(uint8_t id);




static inline   void RadioAlarmP__Tasklet__run(void);








static inline    void RadioAlarmP__RadioAlarm__default__fired(uint8_t id);



static __inline   bool RadioAlarmP__RadioAlarm__isFree(uint8_t id);




static inline   void RadioAlarmP__RadioAlarm__wait(uint8_t id, uint16_t timeout);








static inline   void RadioAlarmP__RadioAlarm__cancel(uint8_t id);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static   void TaskletC__Tasklet__run(void);
// 72 "/opt/tinyos-2.x/tos/chips/rf2xx/util/TaskletC.nc"
uint8_t TaskletC__state;

static void TaskletC__doit(void);
//line 94
static __inline  void TaskletC__Tasklet__suspend(void);




static  void TaskletC__Tasklet__resume(void);
//line 112
static   void TaskletC__Tasklet__schedule(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t ActiveMessageLayerP__SubSend__send(message_t *arg_0x7e7988a8);
// 59 "/opt/tinyos-2.x/tos/interfaces/SendNotifier.nc"
static  void ActiveMessageLayerP__SendNotifier__aboutToSend(
// 47 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e787300,
// 59 "/opt/tinyos-2.x/tos/interfaces/SendNotifier.nc"
am_addr_t arg_0x7e967820, message_t *arg_0x7e9679d0);
// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
static  void ActiveMessageLayerP__AMSend__sendDone(
// 44 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e790df8,
// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
message_t *arg_0x7eae3640, error_t arg_0x7eae37c8);
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
static  message_t *ActiveMessageLayerP__Snoop__receive(
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e789d20,
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t ActiveMessageLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t ActiveMessageLayerP__SubPacket__maxPayloadLength(void);
//line 54
static   void ActiveMessageLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t ActiveMessageLayerP__SubPacket__headerLength(message_t *arg_0x7e845478);
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
static  message_t *ActiveMessageLayerP__Receive__receive(
// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
am_id_t arg_0x7e789748,
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
static  error_t ActiveMessageLayerP__Config__checkFrame(message_t *arg_0x7e8738b8);
//line 40
static  am_addr_t ActiveMessageLayerP__Config__destination(message_t *arg_0x7e8766b8);








static  void ActiveMessageLayerP__Config__setSource(message_t *arg_0x7e8756f0, am_addr_t arg_0x7e875880);
//line 43
static  void ActiveMessageLayerP__Config__setDestination(message_t *arg_0x7e876b88, am_addr_t arg_0x7e876d18);
//line 55
static  void ActiveMessageLayerP__Config__setGroup(message_t *arg_0x7e873248, am_group_t arg_0x7e8733d8);
// 50 "/opt/tinyos-2.x/tos/interfaces/ActiveMessageAddress.nc"
static   am_addr_t ActiveMessageLayerP__ActiveMessageAddress__amAddress(void);




static   am_group_t ActiveMessageLayerP__ActiveMessageAddress__amGroup(void);
// 62 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline activemessage_header_t *ActiveMessageLayerP__getHeader(message_t *msg);




static inline void *ActiveMessageLayerP__getPayload(message_t *msg);






static  error_t ActiveMessageLayerP__AMSend__send(am_id_t id, am_addr_t addr, message_t *msg, uint8_t len);
//line 93
static __inline  void ActiveMessageLayerP__SubSend__sendDone(message_t *msg, error_t error);
//line 117
static inline   void ActiveMessageLayerP__SendNotifier__default__aboutToSend(am_id_t id, am_addr_t addr, message_t *msg);





static inline  message_t *ActiveMessageLayerP__SubReceive__receive(message_t *msg);
//line 136
static inline   message_t *ActiveMessageLayerP__Receive__default__receive(am_id_t id, message_t *msg, void *payload, uint8_t len);




static inline   message_t *ActiveMessageLayerP__Snoop__default__receive(am_id_t id, message_t *msg, void *payload, uint8_t len);






static __inline  am_addr_t ActiveMessageLayerP__AMPacket__address(void);




static __inline  am_group_t ActiveMessageLayerP__AMPacket__localGroup(void);




static __inline  bool ActiveMessageLayerP__AMPacket__isForMe(message_t *msg);





static __inline  am_addr_t ActiveMessageLayerP__AMPacket__destination(message_t *msg);




static __inline  void ActiveMessageLayerP__AMPacket__setDestination(message_t *msg, am_addr_t addr);









static __inline  void ActiveMessageLayerP__AMPacket__setSource(message_t *msg, am_addr_t addr);




static __inline  am_id_t ActiveMessageLayerP__AMPacket__type(message_t *msg);




static __inline  void ActiveMessageLayerP__AMPacket__setType(message_t *msg, am_id_t type);









static __inline  void ActiveMessageLayerP__AMPacket__setGroup(message_t *msg, am_group_t grp);










static   uint8_t ActiveMessageLayerP__RadioPacket__headerLength(message_t *msg);




static inline   uint8_t ActiveMessageLayerP__RadioPacket__payloadLength(message_t *msg);




static inline   void ActiveMessageLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length);




static inline   uint8_t ActiveMessageLayerP__RadioPacket__maxPayloadLength(void);
//line 247
static inline  uint8_t ActiveMessageLayerP__Packet__payloadLength(message_t *msg);




static inline  void ActiveMessageLayerP__Packet__setPayloadLength(message_t *msg, uint8_t len);




static inline  uint8_t ActiveMessageLayerP__Packet__maxPayloadLength(void);




static  void *ActiveMessageLayerP__Packet__getPayload(message_t *msg, uint8_t len);
// 62 "/opt/tinyos-2.x/tos/system/ActiveMessageAddressC.nc"
am_addr_t ActiveMessageAddressC__addr = TOS_AM_ADDRESS;


am_group_t ActiveMessageAddressC__group = TOS_AM_GROUP;






static inline   am_addr_t ActiveMessageAddressC__ActiveMessageAddress__amAddress(void);
//line 93
static inline   am_group_t ActiveMessageAddressC__ActiveMessageAddress__amGroup(void);
//line 106
static   am_addr_t ActiveMessageAddressC__amAddress(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__send(message_t *arg_0x7e7988a8);
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__release(void);
//line 97
static   error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__immediateRequest(void);
//line 88
static   error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__request(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 51 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc"
message_t */*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__pending;

static inline  error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__send(message_t *msg);
//line 68
static inline  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__granted(void);









static inline  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__sendDone(message_t *msg, error_t result);
// 49 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
enum /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0____nesc_unnamed4335 {
//line 49
  FcfsResourceQueueC$0__NO_ENTRY = 0xFF
};
uint8_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ[1U];
uint8_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY;
uint8_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qTail = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY;

static inline  error_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__Init__init(void);




static inline   bool /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEmpty(void);



static inline   bool /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEnqueued(resource_client_id_t id);



static inline   resource_client_id_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__dequeue(void);
//line 82
static inline   error_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__enqueue(resource_client_id_t id);
// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__requested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 61 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__immediateRequested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 65 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__unconfigure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 59 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__configure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 79 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__enqueue(resource_client_id_t arg_0x7e6f01e0);
//line 53
static   bool /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__isEmpty(void);
//line 70
static   resource_client_id_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__dequeue(void);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__granted(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__postTask(void);
// 69 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
enum /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0____nesc_unnamed4336 {
//line 69
  SimpleArbiterP$0__grantedTask = 2U
};
//line 69
typedef int /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0____nesc_sillytask_grantedTask[/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask];
//line 62
enum /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0____nesc_unnamed4337 {
//line 62
  SimpleArbiterP$0__RES_IDLE = 0, SimpleArbiterP$0__RES_GRANTING = 1, SimpleArbiterP$0__RES_BUSY = 2
};
//line 63
enum /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0____nesc_unnamed4338 {
//line 63
  SimpleArbiterP$0__NO_RES = 0xFF
};
uint8_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_IDLE;
 uint8_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__NO_RES;
 uint8_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__reqResId;



static inline   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__request(uint8_t id);
//line 84
static inline   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__immediateRequest(uint8_t id);
//line 97
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__release(uint8_t id);
//line 155
static inline  void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__runTask(void);









static inline   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__default__granted(uint8_t id);

static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__requested(uint8_t id);

static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__immediateRequested(uint8_t id);

static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__configure(uint8_t id);

static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__unconfigure(uint8_t id);
// 47 "/opt/tinyos-2.x/tos/interfaces/Ieee154Packet.nc"
static  bool Ieee154MessageLayerC__Ieee154Packet__isForMe(message_t *arg_0x7e8d64c8);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t Ieee154MessageLayerC__RadioPacket__payloadLength(message_t *arg_0x7e845a50);
//line 43
static   uint8_t Ieee154MessageLayerC__RadioPacket__headerLength(message_t *arg_0x7e845478);
// 97 "/opt/tinyos-2.x/tos/interfaces/Ieee154Send.nc"
static  void Ieee154MessageLayerC__Ieee154Send__sendDone(message_t *arg_0x7e8f2b08, error_t arg_0x7e8f2c90);
// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
static  message_t *Ieee154MessageLayerC__Ieee154Receive__receive(message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08);
// 57 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc"
static inline void *Ieee154MessageLayerC__getPayload(message_t *msg);
//line 69
static inline  uint8_t Ieee154MessageLayerC__Packet__payloadLength(message_t *msg);
//line 128
static inline  void Ieee154MessageLayerC__SubSend__sendDone(message_t *msg, error_t error);




static inline   void Ieee154MessageLayerC__Ieee154Send__default__sendDone(message_t *msg, error_t error);









static inline  message_t *Ieee154MessageLayerC__SubReceive__receive(message_t *msg);








static inline   message_t *Ieee154MessageLayerC__Ieee154Receive__default__receive(message_t *msg, void *payload, uint8_t len);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t TinyosNetworkLayerC__SubSend__send(message_t *arg_0x7e7988a8);
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
static  message_t *TinyosNetworkLayerC__TinyosReceive__receive(message_t *arg_0x7e7a0ec0);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t TinyosNetworkLayerC__SubPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t TinyosNetworkLayerC__SubPacket__maxPayloadLength(void);
//line 54
static   void TinyosNetworkLayerC__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t TinyosNetworkLayerC__SubPacket__headerLength(message_t *arg_0x7e845478);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void TinyosNetworkLayerC__TinyosSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
//line 54
static  void TinyosNetworkLayerC__Ieee154Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
static  message_t *TinyosNetworkLayerC__Ieee154Receive__receive(message_t *arg_0x7e7a0ec0);
// 91 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   uint8_t TinyosNetworkLayerC__Ieee154Packet__headerLength(message_t *msg);




static inline   uint8_t TinyosNetworkLayerC__Ieee154Packet__payloadLength(message_t *msg);
//line 127
static inline network_header_t *TinyosNetworkLayerC__getHeader(message_t *msg);




static  error_t TinyosNetworkLayerC__TinyosSend__send(message_t *msg);
//line 145
enum TinyosNetworkLayerC____nesc_unnamed4339 {


  TinyosNetworkLayerC__PAYLOAD_OFFSET = sizeof(network_header_t )
};




static inline   uint8_t TinyosNetworkLayerC__TinyosPacket__headerLength(message_t *msg);




static inline   uint8_t TinyosNetworkLayerC__TinyosPacket__payloadLength(message_t *msg);




static inline   void TinyosNetworkLayerC__TinyosPacket__setPayloadLength(message_t *msg, uint8_t length);




static inline   uint8_t TinyosNetworkLayerC__TinyosPacket__maxPayloadLength(void);
//line 214
static inline  void TinyosNetworkLayerC__SubSend__sendDone(message_t *msg, error_t result);







static inline  message_t *TinyosNetworkLayerC__SubReceive__receive(message_t *msg);
// 50 "/opt/tinyos-2.x/tos/interfaces/ActiveMessageAddress.nc"
static   am_addr_t Ieee154PacketLayerP__ActiveMessageAddress__amAddress(void);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t Ieee154PacketLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t Ieee154PacketLayerP__SubPacket__maxPayloadLength(void);
//line 54
static   void Ieee154PacketLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t Ieee154PacketLayerP__SubPacket__headerLength(message_t *arg_0x7e845478);
// 57 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
enum Ieee154PacketLayerP____nesc_unnamed4340 {

  Ieee154PacketLayerP__IEEE154_DATA_FRAME_MASK = (((IEEE154_TYPE_MASK << IEEE154_FCF_FRAME_TYPE)
   | (1 << IEEE154_FCF_INTRAPAN))
   | (IEEE154_ADDR_MASK << IEEE154_FCF_DEST_ADDR_MODE))
   | (IEEE154_ADDR_MASK << IEEE154_FCF_SRC_ADDR_MODE),

  Ieee154PacketLayerP__IEEE154_DATA_FRAME_VALUE = (((IEEE154_TYPE_DATA << IEEE154_FCF_FRAME_TYPE)
   | (1 << IEEE154_FCF_INTRAPAN))
   | (IEEE154_ADDR_SHORT << IEEE154_FCF_DEST_ADDR_MODE))
   | (IEEE154_ADDR_SHORT << IEEE154_FCF_SRC_ADDR_MODE),

  Ieee154PacketLayerP__IEEE154_ACK_FRAME_LENGTH = 3,
  Ieee154PacketLayerP__IEEE154_ACK_FRAME_MASK = IEEE154_TYPE_MASK << IEEE154_FCF_FRAME_TYPE,
  Ieee154PacketLayerP__IEEE154_ACK_FRAME_VALUE = IEEE154_TYPE_ACK << IEEE154_FCF_FRAME_TYPE
};

static inline ieee154_header_t *Ieee154PacketLayerP__getHeader(message_t *msg);
//line 94
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__isDataFrame(message_t *msg);




static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__createDataFrame(message_t *msg);




static   bool Ieee154PacketLayerP__Ieee154PacketLayer__isAckFrame(message_t *msg);










static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__createAckReply(message_t *data, message_t *ack);








static inline   bool Ieee154PacketLayerP__Ieee154PacketLayer__verifyAckReply(message_t *data, message_t *ack);







static inline   bool Ieee154PacketLayerP__Ieee154PacketLayer__getAckRequired(message_t *msg);




static   void Ieee154PacketLayerP__Ieee154PacketLayer__setAckRequired(message_t *msg, bool ack);
//line 158
static inline   uint8_t Ieee154PacketLayerP__Ieee154PacketLayer__getDSN(message_t *msg);




static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setDSN(message_t *msg, uint8_t dsn);









static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setDestPan(message_t *msg, uint16_t pan);




static   uint16_t Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(message_t *msg);




static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setDestAddr(message_t *msg, uint16_t addr);




static inline   uint16_t Ieee154PacketLayerP__Ieee154PacketLayer__getSrcAddr(message_t *msg);




static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setSrcAddr(message_t *msg, uint16_t addr);




static inline   bool Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckWait(message_t *msg);






static   bool Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckReply(message_t *msg);
//line 218
static inline  ieee154_saddr_t Ieee154PacketLayerP__Ieee154Packet__address(void);




static inline  ieee154_saddr_t Ieee154PacketLayerP__Ieee154Packet__destination(message_t *msg);
//line 243
static inline  bool Ieee154PacketLayerP__Ieee154Packet__isForMe(message_t *msg);
//line 266
static   uint8_t Ieee154PacketLayerP__RadioPacket__headerLength(message_t *msg);




static inline   uint8_t Ieee154PacketLayerP__RadioPacket__payloadLength(message_t *msg);




static   void Ieee154PacketLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length);




static inline   uint8_t Ieee154PacketLayerP__RadioPacket__maxPayloadLength(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t UniqueLayerP__SubSend__send(message_t *arg_0x7e7988a8);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodFlag.nc"
static   bool UniqueLayerP__NeighborhoodFlag__get(uint8_t arg_0x7e5e7308);




static   void UniqueLayerP__NeighborhoodFlag__set(uint8_t arg_0x7e5e77e0);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void UniqueLayerP__Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 71 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Neighborhood.nc"
static   uint8_t UniqueLayerP__Neighborhood__insertNode(am_addr_t arg_0x7e5ebe28);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *UniqueLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool UniqueLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0);
// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueConfig.nc"
static   void UniqueLayerP__UniqueConfig__setSequenceNumber(message_t *arg_0x7e897510, uint8_t arg_0x7e897698);





static   void UniqueLayerP__UniqueConfig__reportChannelError(void);
//line 42
static   uint8_t UniqueLayerP__UniqueConfig__getSequenceNumber(message_t *arg_0x7e8a0a70);




static   am_addr_t UniqueLayerP__UniqueConfig__getSender(message_t *arg_0x7e897010);
// 61 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
uint8_t UniqueLayerP__sequenceNumber;

static inline  error_t UniqueLayerP__Init__init(void);





static inline  error_t UniqueLayerP__Send__send(message_t *msg);










static inline  void UniqueLayerP__SubSend__sendDone(message_t *msg, error_t error);




static inline   bool UniqueLayerP__SubReceive__header(message_t *msg);





 uint8_t UniqueLayerP__receivedNumbers[5];

static inline   message_t *UniqueLayerP__SubReceive__receive(message_t *msg);
//line 116
static inline   void UniqueLayerP__Neighborhood__evicted(uint8_t idx);
// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Neighborhood.nc"
static   void NeighborhoodP__Neighborhood__evicted(uint8_t arg_0x7e5ea4e8);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
 am_addr_t NeighborhoodP__nodes[5];
 uint8_t NeighborhoodP__ages[5];
 uint8_t NeighborhoodP__flags[5];
 uint8_t NeighborhoodP__time;
 uint8_t NeighborhoodP__last;

static inline  error_t NeighborhoodP__Init__init(void);
//line 94
static inline  uint8_t  NeighborhoodP__Neighborhood__insertNode(am_addr_t node);
//line 158
static __inline   bool NeighborhoodP__NeighborhoodFlag__get(uint8_t bit, uint8_t idx);




static __inline   void NeighborhoodP__NeighborhoodFlag__set(uint8_t bit, uint8_t idx);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  error_t PacketLinkLayerP__SubSend__send(message_t *arg_0x7e7988a8);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t PacketLinkLayerP__send__postTask(void);
// 73 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void PacketLinkLayerP__DelayTimer__startOneShot(uint32_t arg_0x7ead6ca8);




static  void PacketLinkLayerP__DelayTimer__stop(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void PacketLinkLayerP__Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t PacketLinkLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t PacketLinkLayerP__SubPacket__maxPayloadLength(void);
//line 54
static   void PacketLinkLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t PacketLinkLayerP__SubPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t PacketLinkLayerP__SubPacket__metadataLength(message_t *arg_0x7e843a08);
// 59 "/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc"
static   error_t PacketLinkLayerP__PacketAcknowledgements__requestAck(message_t *arg_0x7ea21228);
//line 85
static   bool PacketLinkLayerP__PacketAcknowledgements__wasAcked(message_t *arg_0x7ea20010);
// 98 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
enum PacketLinkLayerP____nesc_unnamed4341 {
//line 98
  PacketLinkLayerP__send = 3U
};
//line 98
typedef int PacketLinkLayerP____nesc_sillytask_send[PacketLinkLayerP__send];
//line 91
message_t *PacketLinkLayerP__currentSendMsg;


uint16_t PacketLinkLayerP__totalRetries;




static void PacketLinkLayerP__signalDone(error_t error);




static inline link_metadata_t *PacketLinkLayerP__getMeta(message_t *msg);










static inline  void PacketLinkLayerP__PacketLink__setRetries(message_t *msg, uint16_t maxRetries);
//line 131
static  uint16_t PacketLinkLayerP__PacketLink__getRetries(message_t *msg);






static  uint16_t PacketLinkLayerP__PacketLink__getRetryDelay(message_t *msg);
//line 157
static inline  error_t PacketLinkLayerP__Send__send(message_t *msg);
//line 183
static inline  void PacketLinkLayerP__SubSend__sendDone(message_t *msg, error_t error);
//line 211
static inline  void PacketLinkLayerP__DelayTimer__fired(void);






static inline  void PacketLinkLayerP__send__runTask(void);










static void PacketLinkLayerP__signalDone(error_t error);
//line 242
static inline   uint8_t PacketLinkLayerP__RadioPacket__headerLength(message_t *msg);



static inline   uint8_t PacketLinkLayerP__RadioPacket__payloadLength(message_t *msg);



static inline   void PacketLinkLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length);



static inline   uint8_t PacketLinkLayerP__RadioPacket__maxPayloadLength(void);



static inline   uint8_t PacketLinkLayerP__RadioPacket__metadataLength(message_t *msg);
// 89 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc"
static   uint8_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__getInterruptFlag(void);
//line 82
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__setControlB(uint8_t arg_0x7e51bc70);
//line 81
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__setControlA(uint8_t arg_0x7e51b7c8);
// 78 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__fired(void);
// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__overflow(void);
// 68 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc"
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerAsync__setTimer2Asynchronous(void);
//line 86
static   int /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerAsync__compareABusy(void);
// 48 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__size_type /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__get(void);





static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__set(/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__size_type arg_0x7e517d90);










static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__start(void);
// 61 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__timer_size /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__get(void);
// 73 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
uint8_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__set;
uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__t0;
//line 74
uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__dt;
 uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base;



enum /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0____nesc_unnamed4342 {
  Atm1281AlarmAsyncP$0__MINDT = 2,
  Atm1281AlarmAsyncP$0__MAXT = 230
};



static void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setInterrupt(void);


static inline  error_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Init__init(void);
//line 112
static inline void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setOcr2A(uint8_t n);
//line 128
static void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setInterrupt(void);
//line 187
static inline   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__fired(void);
//line 199
static   uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__get(void);
//line 242
static inline   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__stop(void);







static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__startAt(uint32_t nt0, uint32_t ndt);









static inline   uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getNow(void);



static inline   uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getAlarm(void);



static inline   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__overflow(void);
// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void HplAtm1281Timer2AsyncP__Compare__fired(void);
// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void HplAtm1281Timer2AsyncP__Timer__overflow(void);
// 99 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   uint8_t HplAtm1281Timer2AsyncP__Timer__get(void);
//line 131
static inline   void HplAtm1281Timer2AsyncP__TimerCtrl__setControlA(uint8_t x);





static inline   void HplAtm1281Timer2AsyncP__TimerCtrl__setControlB(uint8_t x);
//line 154
static inline   uint8_t HplAtm1281Timer2AsyncP__TimerCtrl__getInterruptFlag(void);
//line 181
static inline   void HplAtm1281Timer2AsyncP__Compare__start(void);









static inline   uint8_t HplAtm1281Timer2AsyncP__Compare__get(void);


static inline   void HplAtm1281Timer2AsyncP__Compare__set(uint8_t t);









static __inline void HplAtm1281Timer2AsyncP__stabiliseTimer2(void);
//line 219
static inline   mcu_power_t HplAtm1281Timer2AsyncP__McuPowerOverride__lowestState(void);
//line 242
void __vector_13(void) __attribute((signal))   ;







void __vector_15(void) __attribute((signal))   ;
//line 266
static inline   void HplAtm1281Timer2AsyncP__TimerAsync__setTimer2Asynchronous(void);
//line 278
static inline   int HplAtm1281Timer2AsyncP__TimerAsync__compareABusy(void);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__postTask(void);
// 109 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__getNow(void);
//line 103
static   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__startAt(/*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type arg_0x7e7d9678, /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type arg_0x7e7d9808);
//line 116
static   /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__getAlarm(void);
//line 73
static   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__stop(void);
// 83 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__fired(void);
// 74 "/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc"
enum /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0____nesc_unnamed4343 {
//line 74
  AlarmToTimerC$0__fired = 4U
};
//line 74
typedef int /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0____nesc_sillytask_fired[/*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired];
//line 55
uint32_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__m_dt;
bool /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__m_oneshot;

static inline void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__start(uint32_t t0, uint32_t dt, bool oneshot);
//line 71
static inline  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__stop(void);


static inline  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__runTask(void);






static inline   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__fired(void);
//line 93
static inline  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__startOneShotAt(uint32_t t0, uint32_t dt);


static inline  uint32_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__getNow(void);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__postTask(void);
// 136 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
static  uint32_t /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__getNow(void);
//line 129
static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__startOneShotAt(uint32_t arg_0x7ead39b8, uint32_t arg_0x7ead3b48);
//line 78
static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__stop(void);




static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__fired(
// 48 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
uint8_t arg_0x7e3d55c8);
//line 71
enum /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0____nesc_unnamed4344 {
//line 71
  VirtualizeTimerC$0__updateFromTimer = 5U
};
//line 71
typedef int /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0____nesc_sillytask_updateFromTimer[/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer];
//line 53
enum /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0____nesc_unnamed4345 {

  VirtualizeTimerC$0__NUM_TIMERS = 3U,
  VirtualizeTimerC$0__END_OF_LIST = 255
};








//line 59
typedef struct /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0____nesc_unnamed4346 {

  uint32_t t0;
  uint32_t dt;
  bool isoneshot : 1;
  bool isrunning : 1;
  bool _reserved : 6;
} /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer_t;

/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer_t /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__m_timers[/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__NUM_TIMERS];




static void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__fireTimers(uint32_t now);
//line 100
static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__runTask(void);
//line 139
static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__fired(void);




static void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__startTimer(uint8_t num, uint32_t t0, uint32_t dt, bool isoneshot);









static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startPeriodic(uint8_t num, uint32_t dt);




static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startOneShot(uint8_t num, uint32_t dt);




static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__stop(uint8_t num);
//line 204
static inline   void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__default__fired(uint8_t num);
// 58 "/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc"
static inline   void /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__Counter__overflow(void);
// 113 "/opt/tinyos-2.x/tos/interfaces/SplitControl.nc"
static  void MessageBufferLayerP__SplitControl__startDone(error_t arg_0x7eac3198);
//line 138
static  void MessageBufferLayerP__SplitControl__stopDone(error_t arg_0x7eac3d48);
// 56 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioState.nc"
static   error_t MessageBufferLayerP__RadioState__turnOn(void);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
static  void MessageBufferLayerP__Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t MessageBufferLayerP__stateDoneTask__postTask(void);
//line 67
static   error_t MessageBufferLayerP__sendTask__postTask(void);
// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
static  message_t *MessageBufferLayerP__Receive__receive(message_t *arg_0x7e7a0ec0);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t MessageBufferLayerP__deliverTask__postTask(void);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   error_t MessageBufferLayerP__RadioSend__send(message_t *arg_0x7e390380);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioChannel.nc"
static  void MessageBufferLayerP__RadioChannel__setChannelDone(void);
// 72 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static  void MessageBufferLayerP__Tasklet__suspend(void);






static  void MessageBufferLayerP__Tasklet__resume(void);
// 144 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
enum MessageBufferLayerP____nesc_unnamed4347 {
//line 144
  MessageBufferLayerP__stateDoneTask = 6U
};
//line 144
typedef int MessageBufferLayerP____nesc_sillytask_stateDoneTask[MessageBufferLayerP__stateDoneTask];
//line 189
enum MessageBufferLayerP____nesc_unnamed4348 {
//line 189
  MessageBufferLayerP__sendTask = 7U
};
//line 189
typedef int MessageBufferLayerP____nesc_sillytask_sendTask[MessageBufferLayerP__sendTask];
//line 322
enum MessageBufferLayerP____nesc_unnamed4349 {
//line 322
  MessageBufferLayerP__deliverTask = 8U
};
//line 322
typedef int MessageBufferLayerP____nesc_sillytask_deliverTask[MessageBufferLayerP__deliverTask];
//line 63
 uint8_t MessageBufferLayerP__state;
enum MessageBufferLayerP____nesc_unnamed4350 {

  MessageBufferLayerP__STATE_READY = 0,
  MessageBufferLayerP__STATE_TX_PENDING = 1,
  MessageBufferLayerP__STATE_TX_RETRY = 2,
  MessageBufferLayerP__STATE_TX_SEND = 3,
  MessageBufferLayerP__STATE_TX_DONE = 4,
  MessageBufferLayerP__STATE_TURN_ON = 5,
  MessageBufferLayerP__STATE_TURN_OFF = 6,
  MessageBufferLayerP__STATE_CHANNEL = 7
};

static  error_t MessageBufferLayerP__SplitControl__start(void);
//line 144
static inline  void MessageBufferLayerP__stateDoneTask__runTask(void);
//line 163
static inline   void MessageBufferLayerP__RadioState__done(void);
//line 176
static inline   void MessageBufferLayerP__RadioChannel__default__setChannelDone(void);





message_t *MessageBufferLayerP__txMsg;
 error_t MessageBufferLayerP__txError;
uint8_t MessageBufferLayerP__retries;


enum MessageBufferLayerP____nesc_unnamed4351 {
//line 187
  MessageBufferLayerP__MAX_RETRIES = 5
};
static inline  void MessageBufferLayerP__sendTask__runTask(void);
//line 217
static   void MessageBufferLayerP__RadioSend__sendDone(error_t error);
//line 230
static  error_t MessageBufferLayerP__Send__send(message_t *msg);
//line 252
static   void MessageBufferLayerP__RadioSend__ready(void);








static inline   void MessageBufferLayerP__Tasklet__run(void);
//line 291
enum MessageBufferLayerP____nesc_unnamed4352 {

  MessageBufferLayerP__RECEIVE_QUEUE_SIZE = 3
};

message_t MessageBufferLayerP__receiveQueueData[MessageBufferLayerP__RECEIVE_QUEUE_SIZE];
message_t *MessageBufferLayerP__receiveQueue[MessageBufferLayerP__RECEIVE_QUEUE_SIZE];

uint8_t MessageBufferLayerP__receiveQueueHead;
uint8_t MessageBufferLayerP__receiveQueueSize;

static inline  error_t MessageBufferLayerP__SoftwareInit__init(void);









static inline   bool MessageBufferLayerP__RadioReceive__header(message_t *msg);









static inline  void MessageBufferLayerP__deliverTask__runTask(void);
//line 351
static inline   message_t *MessageBufferLayerP__RadioReceive__receive(message_t *msg);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   error_t RandomCollisionLayerP__SubSend__send(message_t *arg_0x7e390380);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RandomCollisionLayerP__RadioAlarm__wait(uint16_t arg_0x7e8481b8);
//line 44
static   bool RandomCollisionLayerP__RadioAlarm__isFree(void);
//line 64
static   uint16_t RandomCollisionLayerP__RadioAlarm__getNow(void);
// 52 "/opt/tinyos-2.x/tos/interfaces/Random.nc"
static   uint16_t RandomCollisionLayerP__Random__rand16(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionConfig.nc"
static   uint16_t RandomCollisionLayerP__Config__getCongestionBackoff(message_t *arg_0x7e885670);
//line 40
static   uint16_t RandomCollisionLayerP__Config__getInitialBackoff(message_t *arg_0x7e885140);










static   uint16_t RandomCollisionLayerP__Config__getMinimumBackoff(void);





static   uint16_t RandomCollisionLayerP__Config__getTransmitBarrier(message_t *arg_0x7e884010);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *RandomCollisionLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool RandomCollisionLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   void RandomCollisionLayerP__RadioSend__ready(void);
//line 56
static   void RandomCollisionLayerP__RadioSend__sendDone(error_t arg_0x7e390a40);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t RandomCollisionLayerP__calcNextRandom__postTask(void);
// 78 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
enum RandomCollisionLayerP____nesc_unnamed4353 {
//line 78
  RandomCollisionLayerP__calcNextRandom = 9U
};
//line 78
typedef int RandomCollisionLayerP____nesc_sillytask_calcNextRandom[RandomCollisionLayerP__calcNextRandom];
//line 57
 uint8_t RandomCollisionLayerP__state;
enum RandomCollisionLayerP____nesc_unnamed4354 {

  RandomCollisionLayerP__STATE_READY = 0,
  RandomCollisionLayerP__STATE_TX_PENDING_FIRST = 1,
  RandomCollisionLayerP__STATE_TX_PENDING_SECOND = 2,
  RandomCollisionLayerP__STATE_TX_SENDING = 3,

  RandomCollisionLayerP__STATE_BARRIER = 0x80
};

 message_t *RandomCollisionLayerP__txMsg;
 uint16_t RandomCollisionLayerP__txBarrier;

static inline   void RandomCollisionLayerP__SubSend__ready(void);





uint16_t RandomCollisionLayerP__nextRandom;
static inline  void RandomCollisionLayerP__calcNextRandom__runTask(void);





static uint16_t RandomCollisionLayerP__getBackoff(uint16_t maxBackoff);
//line 98
static inline   error_t RandomCollisionLayerP__RadioSend__send(message_t *msg);
//line 110
static inline   void RandomCollisionLayerP__RadioAlarm__fired(void);
//line 155
static inline   void RandomCollisionLayerP__SubSend__sendDone(error_t error);







static inline   bool RandomCollisionLayerP__SubReceive__header(message_t *msg);




static inline   message_t *RandomCollisionLayerP__SubReceive__receive(message_t *msg);
// 52 "/opt/tinyos-2.x/tos/system/RandomMlcgC.nc"
uint32_t RandomMlcgC__seed;


static inline  error_t RandomMlcgC__Init__init(void);
//line 69
static   uint32_t RandomMlcgC__Random__rand32(void);
//line 89
static inline   uint16_t RandomMlcgC__Random__rand16(void);
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   error_t SoftwareAckLayerP__SubSend__send(message_t *arg_0x7e390380);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void SoftwareAckLayerP__RadioAlarm__wait(uint16_t arg_0x7e8481b8);




static   void SoftwareAckLayerP__RadioAlarm__cancel(void);
//line 44
static   bool SoftwareAckLayerP__RadioAlarm__isFree(void);
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
static   void SoftwareAckLayerP__AckReceivedFlag__clear(message_t *arg_0x7e309868);
//line 40
static   bool SoftwareAckLayerP__AckReceivedFlag__get(message_t *arg_0x7e30a758);




static   void SoftwareAckLayerP__AckReceivedFlag__setValue(message_t *arg_0x7e30ac60, bool arg_0x7e30ade8);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *SoftwareAckLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool SoftwareAckLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0);
// 86 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
static   void SoftwareAckLayerP__SoftwareAckConfig__reportChannelError(void);
//line 80
static   void SoftwareAckLayerP__SoftwareAckConfig__createAckPacket(message_t *arg_0x7e8a3678, message_t *arg_0x7e8a3828);
//line 55
static   bool SoftwareAckLayerP__SoftwareAckConfig__requiresAckWait(message_t *arg_0x7e8a6d68);






static   bool SoftwareAckLayerP__SoftwareAckConfig__isAckPacket(message_t *arg_0x7e8a4380);






static   bool SoftwareAckLayerP__SoftwareAckConfig__verifyAckPacket(message_t *arg_0x7e8a4970, message_t *arg_0x7e8a4b20);
//line 43
static   uint16_t SoftwareAckLayerP__SoftwareAckConfig__getAckTimeout(void);





static   void SoftwareAckLayerP__SoftwareAckConfig__setAckRequired(message_t *arg_0x7e8a6698, bool arg_0x7e8a6820);
//line 75
static   bool SoftwareAckLayerP__SoftwareAckConfig__requiresAckReply(message_t *arg_0x7e8a3140);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   void SoftwareAckLayerP__RadioSend__ready(void);
//line 56
static   void SoftwareAckLayerP__RadioSend__sendDone(error_t arg_0x7e390a40);
// 60 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
 uint8_t SoftwareAckLayerP__state;
enum SoftwareAckLayerP____nesc_unnamed4355 {

  SoftwareAckLayerP__STATE_READY = 0,
  SoftwareAckLayerP__STATE_DATA_SEND = 1,
  SoftwareAckLayerP__STATE_ACK_WAIT = 2,
  SoftwareAckLayerP__STATE_ACK_SEND = 3
};

 message_t *SoftwareAckLayerP__txMsg;
 message_t SoftwareAckLayerP__ackMsg;

static inline   void SoftwareAckLayerP__SubSend__ready(void);





static inline   error_t SoftwareAckLayerP__RadioSend__send(message_t *msg);
//line 97
static inline   void SoftwareAckLayerP__SubSend__sendDone(error_t error);
//line 124
static inline   void SoftwareAckLayerP__RadioAlarm__fired(void);









static inline   bool SoftwareAckLayerP__SubReceive__header(message_t *msg);







static inline   message_t *SoftwareAckLayerP__SubReceive__receive(message_t *msg);
//line 178
static inline   error_t SoftwareAckLayerP__PacketAcknowledgements__requestAck(message_t *msg);
//line 192
static inline   bool SoftwareAckLayerP__PacketAcknowledgements__wasAcked(message_t *msg);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t MetadataFlagsLayerC__SubPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t MetadataFlagsLayerC__SubPacket__maxPayloadLength(void);
//line 54
static   void MetadataFlagsLayerC__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t MetadataFlagsLayerC__SubPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t MetadataFlagsLayerC__SubPacket__metadataLength(message_t *arg_0x7e843a08);
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline flags_metadata_t *MetadataFlagsLayerC__getMeta(message_t *msg);






static   bool MetadataFlagsLayerC__PacketFlag__get(uint8_t bit, message_t *msg);




static   void MetadataFlagsLayerC__PacketFlag__set(uint8_t bit, message_t *msg);






static inline   void MetadataFlagsLayerC__PacketFlag__clear(uint8_t bit, message_t *msg);






static inline   void MetadataFlagsLayerC__PacketFlag__setValue(uint8_t bit, message_t *msg, bool value);









static inline   uint8_t MetadataFlagsLayerC__RadioPacket__headerLength(message_t *msg);




static inline   uint8_t MetadataFlagsLayerC__RadioPacket__payloadLength(message_t *msg);




static inline   void MetadataFlagsLayerC__RadioPacket__setPayloadLength(message_t *msg, uint8_t length);




static inline   uint8_t MetadataFlagsLayerC__RadioPacket__maxPayloadLength(void);




static inline   uint8_t MetadataFlagsLayerC__RadioPacket__metadataLength(message_t *msg);
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
static   void TimeStampingLayerP__TimeStampFlag__clear(message_t *arg_0x7e309868);
//line 50
static   void TimeStampingLayerP__TimeStampFlag__set(message_t *arg_0x7e309370);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t TimeStampingLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50);









static   uint8_t TimeStampingLayerP__SubPacket__maxPayloadLength(void);
//line 54
static   void TimeStampingLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198);
//line 43
static   uint8_t TimeStampingLayerP__SubPacket__headerLength(message_t *arg_0x7e845478);
//line 65
static   uint8_t TimeStampingLayerP__SubPacket__metadataLength(message_t *arg_0x7e843a08);
// 60 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline timestamp_metadata_t *TimeStampingLayerP__getMeta(message_t *msg);
//line 77
static inline   void TimeStampingLayerP__PacketTimeStampRadio__clear(message_t *msg);




static inline   void TimeStampingLayerP__PacketTimeStampRadio__set(message_t *msg, uint32_t value);
//line 116
static inline   uint8_t TimeStampingLayerP__RadioPacket__headerLength(message_t *msg);




static inline   uint8_t TimeStampingLayerP__RadioPacket__payloadLength(message_t *msg);




static inline   void TimeStampingLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length);




static inline   uint8_t TimeStampingLayerP__RadioPacket__maxPayloadLength(void);




static inline   uint8_t TimeStampingLayerP__RadioPacket__metadataLength(message_t *msg);
// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioCCA.nc"
static   void RF230DriverLayerP__RadioCCA__done(error_t arg_0x7e357460);
// 66 "/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc"
static   void RF230DriverLayerP__BusyWait__wait(RF230DriverLayerP__BusyWait__size_type arg_0x7e235010);
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
static   void RF230DriverLayerP__RSSIFlag__clear(message_t *arg_0x7e309868);
//line 50
static   void RF230DriverLayerP__RSSIFlag__set(message_t *arg_0x7e309370);
// 70 "/opt/tinyos-2.x/tos/interfaces/PacketTimeStamp.nc"
static   void RF230DriverLayerP__PacketTimeStamp__clear(message_t *arg_0x7e945638);







static   void RF230DriverLayerP__PacketTimeStamp__set(message_t *arg_0x7e945b60, RF230DriverLayerP__PacketTimeStamp__size_type arg_0x7e945cf0);
// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void RF230DriverLayerP__RSTN__makeOutput(void);
//line 40
static   void RF230DriverLayerP__RSTN__set(void);
static   void RF230DriverLayerP__RSTN__clr(void);
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RF230DriverLayerP__RadioAlarm__wait(uint16_t arg_0x7e8481b8);
//line 44
static   bool RF230DriverLayerP__RadioAlarm__isFree(void);
//line 64
static   uint16_t RF230DriverLayerP__RadioAlarm__getNow(void);
// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioState.nc"
static   void RF230DriverLayerP__RadioState__done(void);
// 61 "/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc"
static   uint32_t RF230DriverLayerP__LocalTime__get(void);
// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void RF230DriverLayerP__SLP_TR__makeOutput(void);
//line 40
static   void RF230DriverLayerP__SLP_TR__set(void);
static   void RF230DriverLayerP__SLP_TR__clr(void);
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
static   uint8_t RF230DriverLayerP__Config__maxPayloadLength(void);
//line 40
static   uint8_t RF230DriverLayerP__Config__headerLength(message_t *arg_0x7e8b13e8);
//line 52
static   uint8_t RF230DriverLayerP__Config__metadataLength(message_t *arg_0x7e8b1ca0);






static   uint8_t RF230DriverLayerP__Config__headerPreloadLength(void);





static   bool RF230DriverLayerP__Config__requiresRssiCca(message_t *arg_0x7e8b0658);
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
static   message_t *RF230DriverLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8);
//line 46
static   bool RF230DriverLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0);
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t RF230DriverLayerP__SpiResource__release(void);
//line 97
static   error_t RF230DriverLayerP__SpiResource__immediateRequest(void);
//line 88
static   error_t RF230DriverLayerP__SpiResource__request(void);
//line 128
static   bool RF230DriverLayerP__SpiResource__isOwner(void);
// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void RF230DriverLayerP__SELN__makeOutput(void);
//line 40
static   void RF230DriverLayerP__SELN__set(void);
static   void RF230DriverLayerP__SELN__clr(void);
// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
static   void RF230DriverLayerP__RadioSend__ready(void);
//line 56
static   void RF230DriverLayerP__RadioSend__sendDone(error_t arg_0x7e390a40);
// 66 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
static   void RF230DriverLayerP__IRQ__disable(void);
//line 53
static   error_t RF230DriverLayerP__IRQ__captureRisingEdge(void);
// 57 "/opt/tinyos-2.x/tos/interfaces/FastSpiByte.nc"
static   void RF230DriverLayerP__FastSpiByte__splitWrite(uint8_t arg_0x7e23f530);
//line 69
static   uint8_t RF230DriverLayerP__FastSpiByte__splitReadWrite(uint8_t arg_0x7e23fe68);
//line 63
static   uint8_t RF230DriverLayerP__FastSpiByte__splitRead(void);
//line 76
static   uint8_t RF230DriverLayerP__FastSpiByte__write(uint8_t arg_0x7e23e3d8);
// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
static   bool RF230DriverLayerP__TimeSyncFlag__get(message_t *arg_0x7e30a758);
//line 55
static   void RF230DriverLayerP__TransmitPowerFlag__clear(message_t *arg_0x7e309868);
//line 40
static   bool RF230DriverLayerP__TransmitPowerFlag__get(message_t *arg_0x7e30a758);
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
static   void RF230DriverLayerP__Tasklet__schedule(void);
// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline rf230_header_t *RF230DriverLayerP__getHeader(message_t *msg);




static void *RF230DriverLayerP__getPayload(message_t *msg);




static rf230_metadata_t *RF230DriverLayerP__getMeta(message_t *msg);






 uint8_t RF230DriverLayerP__state;
enum RF230DriverLayerP____nesc_unnamed4356 {

  RF230DriverLayerP__STATE_P_ON = 0,
  RF230DriverLayerP__STATE_SLEEP = 1,
  RF230DriverLayerP__STATE_SLEEP_2_TRX_OFF = 2,
  RF230DriverLayerP__STATE_TRX_OFF = 3,
  RF230DriverLayerP__STATE_TRX_OFF_2_RX_ON = 4,
  RF230DriverLayerP__STATE_RX_ON = 5,
  RF230DriverLayerP__STATE_BUSY_TX_2_RX_ON = 6,
  RF230DriverLayerP__STATE_PLL_ON_2_RX_ON = 7
};

 uint8_t RF230DriverLayerP__cmd;
enum RF230DriverLayerP____nesc_unnamed4357 {

  RF230DriverLayerP__CMD_NONE = 0,
  RF230DriverLayerP__CMD_TURNOFF = 1,
  RF230DriverLayerP__CMD_STANDBY = 2,
  RF230DriverLayerP__CMD_TURNON = 3,
  RF230DriverLayerP__CMD_TRANSMIT = 4,
  RF230DriverLayerP__CMD_RECEIVE = 5,
  RF230DriverLayerP__CMD_CCA = 6,
  RF230DriverLayerP__CMD_CHANNEL = 7,
  RF230DriverLayerP__CMD_SIGNAL_DONE = 8,
  RF230DriverLayerP__CMD_DOWNLOAD = 9
};

 bool RF230DriverLayerP__radioIrq;

 uint8_t RF230DriverLayerP__txPower;
 uint8_t RF230DriverLayerP__channel;

 message_t *RF230DriverLayerP__rxMsg;
message_t RF230DriverLayerP__rxMsgBuffer;

uint16_t RF230DriverLayerP__capturedTime;

 uint8_t RF230DriverLayerP__rssiClear;
 uint8_t RF230DriverLayerP__rssiBusy;



static __inline void RF230DriverLayerP__writeRegister(uint8_t reg, uint8_t value);
//line 166
static __inline uint8_t RF230DriverLayerP__readRegister(uint8_t reg);
//line 182
enum RF230DriverLayerP____nesc_unnamed4358 {

  RF230DriverLayerP__SLEEP_WAKEUP_TIME = (uint16_t )(880 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL),
  RF230DriverLayerP__CCA_REQUEST_TIME = (uint16_t )(140 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL),

  RF230DriverLayerP__TX_SFD_DELAY = (uint16_t )(176 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL),
  RF230DriverLayerP__RX_SFD_DELAY = (uint16_t )(8 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL)
};

static inline   void RF230DriverLayerP__RadioAlarm__fired(void);
//line 217
static inline  error_t RF230DriverLayerP__PlatformInit__init(void);
//line 235
static inline  error_t RF230DriverLayerP__SoftwareInit__init(void);





static inline void RF230DriverLayerP__initRadio(void);
//line 269
static inline  void RF230DriverLayerP__SpiResource__granted(void);
//line 283
static bool RF230DriverLayerP__isSpiAcquired(void);
//line 323
static __inline void RF230DriverLayerP__changeChannel(void);
//line 341
static __inline void RF230DriverLayerP__changeState(void);
//line 411
static inline   error_t RF230DriverLayerP__RadioState__turnOn(void);
//line 428
static   error_t RF230DriverLayerP__RadioSend__send(message_t *msg);
//line 586
static inline    void RF230DriverLayerP__RadioCCA__default__done(error_t error);



static __inline void RF230DriverLayerP__downloadMessage(void);
//line 672
static inline   void RF230DriverLayerP__IRQ__captured(uint16_t time);
//line 685
static inline void RF230DriverLayerP__serviceRadio(void);
//line 843
static inline   void RF230DriverLayerP__Tasklet__run(void);
//line 873
static inline   uint8_t RF230DriverLayerP__RadioPacket__headerLength(message_t *msg);




static   uint8_t RF230DriverLayerP__RadioPacket__payloadLength(message_t *msg);




static   void RF230DriverLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length);








static inline   uint8_t RF230DriverLayerP__RadioPacket__maxPayloadLength(void);






static inline   uint8_t RF230DriverLayerP__RadioPacket__metadataLength(message_t *msg);
//line 911
static inline   bool RF230DriverLayerP__PacketTransmitPower__isSet(message_t *msg);




static inline   uint8_t RF230DriverLayerP__PacketTransmitPower__get(message_t *msg);
//line 944
static inline   void RF230DriverLayerP__PacketRSSI__clear(message_t *msg);




static inline   void RF230DriverLayerP__PacketRSSI__set(message_t *msg, uint8_t value);










static inline   bool RF230DriverLayerP__PacketTimeSyncOffset__isSet(message_t *msg);




static inline   uint8_t RF230DriverLayerP__PacketTimeSyncOffset__get(message_t *msg);
//line 999
static inline   void RF230DriverLayerP__PacketLinkQuality__set(message_t *msg, uint8_t value);
// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void HplRF230P__PortCLKM__makeInput(void);
//line 41
static   void HplRF230P__PortCLKM__clr(void);
// 88 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
static   void HplRF230P__Capture__setEdge(bool arg_0x7e153988);
//line 47
static   HplRF230P__Capture__size_type HplRF230P__Capture__get(void);
//line 64
static   void HplRF230P__Capture__reset(void);


static   void HplRF230P__Capture__start(void);


static   void HplRF230P__Capture__stop(void);
// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void HplRF230P__PortIRQ__makeInput(void);
//line 41
static   void HplRF230P__PortIRQ__clr(void);
// 61 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
static   void HplRF230P__IRQ__captured(uint16_t arg_0x7e23aa30);
// 53 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/HplRF230P.nc"
static inline  error_t HplRF230P__PlatformInit__init(void);










static inline   void HplRF230P__Capture__captured(uint16_t time);









static inline   error_t HplRF230P__IRQ__captureRisingEdge(void);
//line 89
static inline   void HplRF230P__IRQ__disable(void);
// 82 "/opt/tinyos-2.x/tos/interfaces/SpiPacket.nc"
static   void Atm128SpiP__SpiPacket__sendDone(uint8_t *arg_0x7e132648, uint8_t *arg_0x7e1327f0, uint16_t arg_0x7e132980,
error_t arg_0x7e132b18);
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t Atm128SpiP__ResourceArbiter__release(
// 99 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11b410);
// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t Atm128SpiP__ResourceArbiter__immediateRequest(
// 99 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11b410);
// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   error_t Atm128SpiP__ResourceArbiter__request(
// 99 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11b410);
// 128 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static   bool Atm128SpiP__ResourceArbiter__isOwner(
// 99 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11b410);
// 89 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
static   void Atm128SpiP__Spi__sleep(void);
//line 83
static   void Atm128SpiP__Spi__initMaster(void);
//line 113
static   void Atm128SpiP__Spi__enableInterrupt(bool arg_0x7e114478);
//line 97
static   uint8_t Atm128SpiP__Spi__read(void);
//line 142
static   void Atm128SpiP__Spi__setMasterDoubleSpeed(bool arg_0x7e100680);
//line 131
static   void Atm128SpiP__Spi__setClock(uint8_t arg_0x7e110480);
//line 125
static   void Atm128SpiP__Spi__setClockPolarity(bool arg_0x7e111490);
//line 103
static   void Atm128SpiP__Spi__write(uint8_t arg_0x7e1159f8);
//line 116
static   void Atm128SpiP__Spi__enableSpi(bool arg_0x7e114c48);
//line 128
static   void Atm128SpiP__Spi__setClockPhase(bool arg_0x7e111c70);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void Atm128SpiP__Resource__granted(
// 95 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
uint8_t arg_0x7e11e0b8);
// 90 "/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc"
static   bool Atm128SpiP__ArbiterInfo__inUse(void);
// 52 "/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc"
static   void Atm128SpiP__McuPowerState__update(void);
// 255 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
enum Atm128SpiP____nesc_unnamed4359 {
//line 255
  Atm128SpiP__zeroTask = 10U
};
//line 255
typedef int Atm128SpiP____nesc_sillytask_zeroTask[Atm128SpiP__zeroTask];
//line 105
uint16_t Atm128SpiP__len;
uint8_t *Atm128SpiP__txBuffer;
uint8_t *Atm128SpiP__rxBuffer;
uint16_t Atm128SpiP__pos;

enum Atm128SpiP____nesc_unnamed4360 {
  Atm128SpiP__SPI_IDLE,
  Atm128SpiP__SPI_BUSY,
  Atm128SpiP__SPI_ATOMIC_SIZE = 10
};





static void Atm128SpiP__startSpi(void);
//line 134
static inline void Atm128SpiP__stopSpi(void);







static   uint8_t Atm128SpiP__SpiByte__write(uint8_t tx);
//line 156
static __inline   void Atm128SpiP__FastSpiByte__splitWrite(uint8_t data);



static __inline   uint8_t Atm128SpiP__FastSpiByte__splitRead(void);





static __inline   uint8_t Atm128SpiP__FastSpiByte__splitReadWrite(uint8_t data);










static __inline   uint8_t Atm128SpiP__FastSpiByte__write(uint8_t data);
//line 210
static inline error_t Atm128SpiP__sendNextPart(void);
//line 255
static inline  void Atm128SpiP__zeroTask__runTask(void);
//line 310
static inline
//line 309
void Atm128SpiP__SpiPacket__default__sendDone(
uint8_t *_txbuffer, uint8_t *_rxbuffer,
uint16_t _length, error_t _success);

static inline   void Atm128SpiP__Spi__dataReady(uint8_t data);
//line 353
static inline   error_t Atm128SpiP__Resource__immediateRequest(uint8_t id);







static   error_t Atm128SpiP__Resource__request(uint8_t id);








static   error_t Atm128SpiP__Resource__release(uint8_t id);









static inline   uint8_t Atm128SpiP__Resource__isOwner(uint8_t id);



static inline  void Atm128SpiP__ResourceArbiter__granted(uint8_t id);



static inline   void Atm128SpiP__Resource__default__granted(uint8_t id);
// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void HplAtm128SpiP__MISO__makeInput(void);

static   void HplAtm128SpiP__SCK__makeOutput(void);
// 52 "/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc"
static   void HplAtm128SpiP__Mcu__update(void);
// 109 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
static   void HplAtm128SpiP__SPI__dataReady(uint8_t arg_0x7e115f08);
// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
static   void HplAtm128SpiP__MOSI__makeOutput(void);
// 96 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__initMaster(void);
//line 111
static inline   void HplAtm128SpiP__SPI__sleep(void);



static inline   uint8_t HplAtm128SpiP__SPI__read(void);
static inline   void HplAtm128SpiP__SPI__write(uint8_t d);


void __vector_24(void) __attribute((signal))   ;
//line 132
static   void HplAtm128SpiP__SPI__enableInterrupt(bool enabled);
//line 147
static   void HplAtm128SpiP__SPI__enableSpi(bool enabled);
//line 173
static inline   void HplAtm128SpiP__SPI__setMasterBit(bool isMaster);
//line 186
static inline   void HplAtm128SpiP__SPI__setClockPolarity(bool highWhenIdle);
//line 200
static inline   void HplAtm128SpiP__SPI__setClockPhase(bool sampleOnTrailing);
//line 217
static inline   void HplAtm128SpiP__SPI__setClock(uint8_t v);
//line 230
static inline   void HplAtm128SpiP__SPI__setMasterDoubleSpeed(bool on);
// 49 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
enum /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1____nesc_unnamed4361 {
//line 49
  FcfsResourceQueueC$1__NO_ENTRY = 0xFF
};
uint8_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ[1U];
uint8_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY;
uint8_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qTail = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY;

static inline  error_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__Init__init(void);




static inline   bool /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEmpty(void);



static inline   bool /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEnqueued(resource_client_id_t id);



static inline   resource_client_id_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__dequeue(void);
//line 82
static inline   error_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__enqueue(resource_client_id_t id);
// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__requested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 61 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__immediateRequested(
// 52 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6dacd0);
// 65 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__unconfigure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 59 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__configure(
// 56 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6d9830);
// 79 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__enqueue(resource_client_id_t arg_0x7e6f01e0);
//line 53
static   bool /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__isEmpty(void);
//line 70
static   resource_client_id_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__dequeue(void);
// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
static  void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__granted(
// 51 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
uint8_t arg_0x7e6da390);
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__postTask(void);
// 69 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
enum /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1____nesc_unnamed4362 {
//line 69
  SimpleArbiterP$1__grantedTask = 11U
};
//line 69
typedef int /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1____nesc_sillytask_grantedTask[/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask];
//line 62
enum /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1____nesc_unnamed4363 {
//line 62
  SimpleArbiterP$1__RES_IDLE = 0, SimpleArbiterP$1__RES_GRANTING = 1, SimpleArbiterP$1__RES_BUSY = 2
};
//line 63
enum /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1____nesc_unnamed4364 {
//line 63
  SimpleArbiterP$1__NO_RES = 0xFF
};
uint8_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_IDLE;
 uint8_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__NO_RES;
 uint8_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__reqResId;



static inline   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__request(uint8_t id);
//line 84
static inline   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__immediateRequest(uint8_t id);
//line 97
static inline   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__release(uint8_t id);
//line 124
static   bool /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ArbiterInfo__inUse(void);
//line 148
static inline   uint8_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__isOwner(uint8_t id);






static inline  void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__runTask(void);
//line 167
static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__requested(uint8_t id);

static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__immediateRequested(uint8_t id);

static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__configure(uint8_t id);

static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__unconfigure(uint8_t id);
// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void HplAtm1281Timer1P__CompareA__fired(void);
// 60 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
static   void HplAtm1281Timer1P__Capture__captured(HplAtm1281Timer1P__Capture__size_type arg_0x7e1543a0);
// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void HplAtm1281Timer1P__CompareB__fired(void);
//line 58
static   void HplAtm1281Timer1P__CompareC__fired(void);
// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void HplAtm1281Timer1P__Timer__overflow(void);
// 90 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   uint16_t HplAtm1281Timer1P__Timer__get(void);


static inline   void HplAtm1281Timer1P__Timer__set(uint16_t t);








static inline   void HplAtm1281Timer1P__Timer__setScale(uint8_t s);










static inline   uint8_t HplAtm1281Timer1P__TimerCtrl__getControlB(void);
//line 126
static inline   void HplAtm1281Timer1P__TimerCtrl__setControlB(uint8_t x);
//line 145
static inline   uint8_t HplAtm1281Timer1P__TimerCtrl__getInterruptFlag(void);









static inline   void HplAtm1281Timer1P__Capture__setEdge(bool up);



static inline   void HplAtm1281Timer1P__Capture__reset(void);
static inline   void HplAtm1281Timer1P__CompareA__reset(void);



static inline   void HplAtm1281Timer1P__Timer__start(void);
static inline   void HplAtm1281Timer1P__Capture__start(void);
static inline   void HplAtm1281Timer1P__CompareA__start(void);




static inline   void HplAtm1281Timer1P__Capture__stop(void);
static inline   void HplAtm1281Timer1P__CompareA__stop(void);



static inline   bool HplAtm1281Timer1P__Timer__test(void);
//line 214
static inline   void HplAtm1281Timer1P__CompareA__set(uint16_t t);




static inline   uint16_t HplAtm1281Timer1P__Capture__get(void);






void __vector_17(void) __attribute((interrupt))   ;


static inline    void HplAtm1281Timer1P__CompareB__default__fired(void);
void __vector_18(void) __attribute((interrupt))   ;


static inline    void HplAtm1281Timer1P__CompareC__default__fired(void);
void __vector_19(void) __attribute((interrupt))   ;



void __vector_16(void) __attribute((interrupt))   ;



void __vector_20(void) __attribute((interrupt))   ;
// 104 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__setScale(uint8_t arg_0x7e5257e0);
//line 67
static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__set(/*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__timer_size arg_0x7e527b70);










static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__start(void);
// 51 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc"
static inline  error_t /*InitOneP.InitOne*/Atm128TimerInitC$0__Init__init(void);








static inline   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__overflow(void);
// 78 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__fired(void);
// 62 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__reset(void);
//line 54
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__set(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__size_type arg_0x7e517d90);










static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__start(void);


static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__stop(void);
// 61 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__get(void);
// 62 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static inline   /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__getNow(void);
//line 74
static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__stop(void);



static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__start(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size dt);




static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__startAt(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size t0, /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size dt);
//line 119
static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__fired(void);






static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__overflow(void);
// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   void /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__overflow(void);
// 87 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
static   bool /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__test(void);
//line 61
static   /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__timer_size /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__get(void);
// 50 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc"
static inline   /*CounterOne16C.NCounter*/Atm128CounterC$0__timer_size /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__get(void);




static inline   bool /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__isOverflowPending(void);









static inline   void /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__overflow(void);
// 64 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__get(void);






static   bool /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__isOverflowPending(void);










static   void /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__overflow(void);
// 67 "/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc"
/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__upper_count_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__m_upper;

enum /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0____nesc_unnamed4365 {

  TransformCounterC$0__LOW_SHIFT_RIGHT = 0,
  TransformCounterC$0__HIGH_SHIFT_LEFT = 8 * sizeof(/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_size_type ) - /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__LOW_SHIFT_RIGHT,
  TransformCounterC$0__NUM_UPPER_BITS = 8 * sizeof(/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type ) - 8 * sizeof(/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_size_type ) + 0,



  TransformCounterC$0__OVERFLOW_MASK = /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__NUM_UPPER_BITS ? ((/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__upper_count_type )2 << (/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__NUM_UPPER_BITS - 1)) - 1 : 0
};

static   /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__get(void);
//line 133
static inline   void /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__overflow(void);
// 64 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
static   /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__size_type /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__get(void);
// 53 "/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc"
static inline   uint32_t /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__LocalTime__get(void);




static inline   void /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__overflow(void);
// 46 "/opt/tinyos-2.x/tos/platforms/micaz/BusyWaitMicroC.nc"
static __inline   void BusyWaitMicroC__BusyWait__wait(uint16_t dt);
// 94 "/opt/tinyos-2.x/tos/chips/atm1281/atm128hardware.h"


static inline  error_t McuSleepC$McuSleepInit$init(void)
#line 43
{
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;




  EXTI_ClearITPendingBit((uint32_t )0x20000);
  EXTI_InitStructure.EXTI_Line = (uint32_t )0x20000;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_Init(&EXTI_InitStructure);


  NVIC_InitStructure.NVIC_IRQChannel = (uint8_t )0x29;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  return SUCCESS;
}



////////////////////////////////////////////////////////////////////////////////////////

static  __inline void __nesc_disable_interrupt(void)
//line 94
{
   //__asm volatile ("cli");
   }

//line 111

//line 110
__inline __nesc_atomic_t
__nesc_atomic_start(void )
{
	/*
  __nesc_atomic_t result = * (volatile uint8_t *)(0x3F + 0x20);

//line 114
  __nesc_disable_interrupt();
   __asm volatile ("" :  :  : "memory");
   */
  return 0;
}




//line 120
__inline void
__nesc_atomic_end(__nesc_atomic_t original_SREG)
{
   //__asm volatile ("" :  :  : "memory");
  //* (volatile uint8_t *)(0x3F + 0x20) = original_SREG;
}

// 124 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
static inline  void SchedulerBasicP__Scheduler__init(void)
{
#ifdef DEBUG_NIV
  hal_printf("Check Point 2: In Scheduler Basic, Initializing Scheduler\n");
#endif

  /* atomic removed: atomic calls only */
  {
    memset((void *)SchedulerBasicP__m_next, SchedulerBasicP__NO_TASK, sizeof SchedulerBasicP__m_next);
    SchedulerBasicP__m_head = SchedulerBasicP__NO_TASK;
    SchedulerBasicP__m_tail = SchedulerBasicP__NO_TASK;
  }

}

// 57 "/opt/tinyos-2.x/tos/interfaces/Scheduler.nc"
void RealMainP__Scheduler__init(void){
//line 57
#ifdef DEBUG_NIV
  hal_printf("Check Point 2: In Real Main Schedule, Calling SchedulerBasic\n");
#endif

  SchedulerBasicP__Scheduler__init();
//line 57
}
//line 57
// 69 "/opt/tinyos-2.x/tos/types/TinyError.h"
static inline  error_t ecombine(error_t r1, error_t r2)




{
  return r1 == r2 ? r1 : FAIL;
}

// 51 "/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc"
static inline void PlatformP__power_init(void)
//line 51
{
  /* atomic removed: atomic calls only */
//line 52
  {
    * (volatile uint8_t *)(0X35 + 0x20) = 1 << 0;
  }
}

// 126 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__TimerCtrl__setControlB(uint8_t x)
//line 126
{
  * (volatile uint8_t *)0x81 = x;
}

//line 113
static inline   uint8_t HplAtm1281Timer1P__TimerCtrl__getControlB(void)
//line 113
{
  return * (volatile uint8_t *)0x81;
}

//line 102
static inline   void HplAtm1281Timer1P__Timer__setScale(uint8_t s)
//line 102
{
  // Atm128_TCCRB_t x = (Atm128_TCCRB_t )HplAtm1281Timer1P__TimerCtrl__getControlB();

// //line 104
  // x.bits.cs = s;
  // HplAtm1281Timer1P__TimerCtrl__setControlB(x.flat);
}

// 104 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__setScale(uint8_t arg_0x7e5257e0){
//line 104
  HplAtm1281Timer1P__Timer__setScale(arg_0x7e5257e0);
//line 104
}
//line 104
// 164 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__Timer__start(void)
//line 164
{
//line 164
  * (volatile uint8_t *)0x6F |= 1 << 0;
}

// 78 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__start(void){
//line 78
  HplAtm1281Timer1P__Timer__start();
//line 78
}
//line 78
// 93 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__Timer__set(uint16_t t)
//line 93
{
//line 93
  * (volatile uint16_t *)0x84 = t;
}

// 67 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__set(/*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__timer_size arg_0x7e527b70){
//line 67
  HplAtm1281Timer1P__Timer__set(arg_0x7e527b70);
//line 67
}
//line 67
// 51 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc"
static inline  error_t /*InitOneP.InitOne*/Atm128TimerInitC$0__Init__init(void)
//line 51
{
  /* atomic removed: atomic calls only */
//line 52
  {
    /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__set(0);
    /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__start();
    /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__setScale(2);
  }
  return SUCCESS;
}

// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
inline static  error_t MotePlatformP__SubInit__init(void){
//line 62
  unsigned char result = 1;
//line 62

 // Nived : Assuming timer initialization is already happening at this point
//line 62
  //result = /*InitOneP.InitOne*/Atm128TimerInitC$0__Init__init();

//line 62

//line 62
  return result;
//line 62
}
//line 62
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)34U &= ~(1 << 4);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void MotePlatformP__SerialIdPin__clr(void){
//line 41
  ///*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__clr();
//line 41
}
//line 41
// 59 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__makeInput(void)
//line 59
{
//line 59
  * (volatile uint8_t *)33U &= ~(1 << 4);
}

// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void MotePlatformP__SerialIdPin__makeInput(void){
//line 44
 // /*HplAtm128GeneralIOC.PortA.Bit4*/HplAtm128GeneralIOPinP$4__IO__makeInput();
//line 44
}
//line 44
// 26 "/opt/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc"
static inline  error_t MotePlatformP__PlatformInit__init(void)
//line 26
{

// Nived : Unsure of what is happening here, so am commenting this out for now
  // * (volatile uint8_t *)(0x08 + 0x20) = 0;
  // * (volatile uint8_t *)(0x07 + 0x20) = 0xff;

	// Nived : Unsure of what a serial id pin is so commenting for now
  MotePlatformP__SerialIdPin__makeInput();
  MotePlatformP__SerialIdPin__clr();

  // Nived : Initialization continues for the timer. i am planning to use the mf timer. this has also been internally commented
  // and internally returns a dummy success
  return MotePlatformP__SubInit__init();
}

// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__set(void)
//line 55
{
//line 55
  * (volatile uint8_t *)34U |= 1 << 0;
}

// 40 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led2__set(void){
//line 40
  ///*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__set();
  mf_gpio_set(86);
//line 40
}
//line 40
// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__set(void)
//line 55
{
//line 55
  * (volatile uint8_t *)34U |= 1 << 1;
}

// 40 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led1__set(void){
//line 40
  ///*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__set();
  mf_gpio_set(87);
//line 40
}
//line 40
// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__set(void)
//line 55
{
//line 55
  * (volatile uint8_t *)34U |= 1 << 2;
}

// 40 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led0__set(void){
//line 40
  ///*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__set();
  mf_gpio_set(88);
//line 40
}
//line 40
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__makeOutput(void)
//line 61
{
//line 61
  * (volatile uint8_t *)33U |= 1 << 0;
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led2__makeOutput(void){
//line 46
  ///*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__makeOutput();
  mf_gpio_makeOutput(86);
//line 46
}
//line 46
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__makeOutput(void)
//line 61
{
//line 61
  * (volatile uint8_t *)33U |= 1 << 1;
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led1__makeOutput(void){
//line 46
  ///*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__makeOutput();
  mf_gpio_makeOutput(87);
//line 46
}
//line 46
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__makeOutput(void)
//line 61
{
//line 61
  * (volatile uint8_t *)33U |= 1 << 2;
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led0__makeOutput(void){
//line 46
  ///*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__makeOutput();
  mf_gpio_makeOutput(88);
//line 46
}
//line 46
// 56 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline  error_t LedsP__Init__init(void)
//line 56
{
  /* atomic removed: atomic calls only */
//line 57
  {
    ;
    LedsP__Led0__makeOutput();
    LedsP__Led1__makeOutput();
    LedsP__Led2__makeOutput();
    LedsP__Led0__set();
    LedsP__Led1__set();
    LedsP__Led2__set();
  }
  return SUCCESS;
}

// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
inline static  error_t PlatformP__MoteInit__init(void){
//line 62
  unsigned char result;
//line 62

// Nived : The Leds have been ported and is working
//line 62
  result = LedsP__Init__init();
//line 62
  result = ecombine(result, MotePlatformP__PlatformInit__init());
//line 62

//line 62
  return result;
//line 62
}
//line 62
// 75 "/opt/tinyos-2.x/tos/platforms/iris/MeasureClockC.nc"
static inline  error_t MeasureClockC__Init__init(void)
//line 75
{
  /* atomic removed: atomic calls only */



   {
    // uint8_t now;
// //line 81
    // uint8_t wraps;
    // uint16_t start;


    // * (volatile uint8_t *)0x81 = 1 << 0;
    // * (volatile uint8_t *)0xB6 = 1 << 5;
    // * (volatile uint8_t *)0xB1 = (1 << 1) | (1 << 0);




    // start = * (volatile uint16_t *)0x84;
    // for (wraps = MeasureClockC__MAGIC / 2; wraps; )
      // {
        // uint16_t next = * (volatile uint16_t *)0x84;

        // if (next < start) {
          // wraps--;
          // }
// //line 99
        // start = next;
      // }


    // now = * (volatile uint8_t *)0xB2;
    // while (* (volatile uint8_t *)0xB2 == now) ;


    // start = * (volatile uint16_t *)0x84;
    // now = * (volatile uint8_t *)0xB2;
    // while (* (volatile uint8_t *)0xB2 == now) ;
    // MeasureClockC__cycles = * (volatile uint16_t *)0x84;

    // MeasureClockC__cycles = (MeasureClockC__cycles - start + 16) >> 5;


    // * (volatile uint8_t *)0xB6 = * (volatile uint8_t *)0x81 = * (volatile uint8_t *)0xB1 = 0;
    // * (volatile uint8_t *)0xB2 = 0;
    // * (volatile uint16_t *)0x84 = 0;
    // * (volatile uint8_t *)(0x16 + 0x20) = * (volatile uint8_t *)(0x17 + 0x20) = 0xff;
    // while (* (volatile uint8_t *)0xB6 & (((1 << 4) | (1 << 2)) | (1 << 0)))
      // ;
  }
  return SUCCESS;
}

// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
inline static  error_t PlatformP__MeasureClock__init(void){
//line 62
  unsigned char result;
//line 62

//line 62
  result = MeasureClockC__Init__init();
//line 62

//line 62
  return result;
//line 62
}
//line 62
// 58 "/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc"
static inline  error_t PlatformP__Init__init(void)
{
  error_t ok;

  // nIVED: The clock has been stubbed out, need to find a replacement
  ok = PlatformP__MeasureClock__init();
  // Nived:
  ok = ecombine(ok, PlatformP__MoteInit__init());

  if (ok != SUCCESS) {
    return ok;
    }
	// Nived : Assuming intiializes the PMU of the iris. Commenting this for now as well.
 // PlatformP__power_init();

  return SUCCESS;
}

// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__set(void)
//line 55
{
//line 55
  * (volatile uint8_t *)34U |= 1 << 6;
}

// 40 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__RSTN__set(void){
//line 40
  ///*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__set();
  mf_gpio_set(12);
//line 40
}
//line 40
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__makeOutput(void)
//line 61
{
//line 61
  * (volatile uint8_t *)33U |= 1 << 6;
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__RSTN__makeOutput(void){
//line 46
  ///*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__makeOutput();
  mf_gpio_makeOutput(12);
//line 46
}
//line 46
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)37U &= ~(1 << 7);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__SLP_TR__clr(void){
//line 41
  ///*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__clr();
  mf_gpio_clr(14);
//line 41
}
//line 41
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__makeOutput(void)
//line 61
{
//line 61
  * (volatile uint8_t *)36U |= 1 << 7;
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__SLP_TR__makeOutput(void){
//line 46
 // /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__makeOutput();
 mf_gpio_makeOutput(14);
//line 46
}
//line 46
// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__set(void)
//line 55
{
//line 55
  * (volatile uint8_t *)37U |= 1 << 0;
}

// 40 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__SELN__set(void){
//line 40
  ///*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__set();
  mf_gpio_set(10);

  mf_gpio_clr(88);
  mf_gpio_set(88);
//line 40
}
//line 40
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__makeOutput(void)
//line 61
{
//line 61
  * (volatile uint8_t *)36U |= 1 << 0;
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__SELN__makeOutput(void){
//line 46
  ///*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__makeOutput();
  // Nived : SELN make Output
    mf_gpio_makeOutput(10);

//line 46
}
//line 46
// 217 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline  error_t RF230DriverLayerP__PlatformInit__init(void)
{

  RF230DriverLayerP__SELN__makeOutput();
  RF230DriverLayerP__SELN__set();
  RF230DriverLayerP__SLP_TR__makeOutput();
  RF230DriverLayerP__SLP_TR__clr();
  RF230DriverLayerP__RSTN__makeOutput();
  RF230DriverLayerP__RSTN__set();


  // Nived : Changing the pins to the values below. Lets see how this works

  /*
  // SELN
  mf_gpio_makeOutput(17);
  mf_gpio_set(17);
  // SLP_TR
  mf_gpio_makeOutput(18);
  mf_gpio_clr(18);
  // RSTN
  mf_gpio_makeOutput(19);
  mf_gpio_set(19);
  */

  RF230DriverLayerP__rxMsg = &RF230DriverLayerP__rxMsgBuffer;


  RF230DriverLayerP__rssiClear = 0;
  RF230DriverLayerP__rssiBusy = 90;

  return SUCCESS;
}

// 171 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__Capture__stop(void)
//line 171
{
//line 171
  * (volatile uint8_t *)0x6F &= ~(1 << 5);
}

// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
inline static   void HplRF230P__Capture__stop(void){
//line 70
  HplAtm1281Timer1P__Capture__stop();
//line 70
}
//line 70
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)43U &= ~(1 << 4);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplRF230P__PortIRQ__clr(void){
//line 41
  ///*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__clr();
	mf_gpio_clr(0);
//line 41
}
//line 41
// 59 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__makeInput(void)
//line 59
{
//line 59
  * (volatile uint8_t *)42U &= ~(1 << 4);
}

// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplRF230P__PortIRQ__makeInput(void){
//line 44
  ///*HplAtm128GeneralIOC.PortD.Bit4*/HplAtm128GeneralIOPinP$28__IO__makeInput();
	mf_gpio_makeInput(0);
//line 44
}
//line 44
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)43U &= ~(1 << 6);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplRF230P__PortCLKM__clr(void){
//line 41
  /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__clr();
//line 41
}
//line 41
// 59 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__makeInput(void)
//line 59
{
//line 59
  * (volatile uint8_t *)42U &= ~(1 << 6);
}

// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplRF230P__PortCLKM__makeInput(void){
//line 44
  /*HplAtm128GeneralIOC.PortD.Bit6*/HplAtm128GeneralIOPinP$30__IO__makeInput();
//line 44
}

inline static void mf_gpio_makeInput( int Pin){
	CPU_GPIO_EnableInputPin((GPIO_PIN) Pin, false, NULL, (GPIO_INT_EDGE) 0, (GPIO_RESISTOR) 0);
}

inline static void mf_gpio_makeOutput( int Pin){
	CPU_GPIO_EnableOutputPin( (GPIO_PIN) Pin, false );
}

inline static void mf_gpio_clr(int Pin){
	CPU_GPIO_SetPinState( (GPIO_PIN) Pin, false );
}

inline static void mf_gpio_set(int Pin){
	CPU_GPIO_SetPinState( (GPIO_PIN) Pin, true );
}


//line 44
// 53 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/HplRF230P.nc"
static inline  error_t HplRF230P__PlatformInit__init(void)
{
  /*
  HplRF230P__PortCLKM__makeInput();
  HplRF230P__PortCLKM__clr();
  HplRF230P__PortIRQ__makeInput();
  HplRF230P__PortIRQ__clr();
  HplRF230P__Capture__stop();
  */

  //mf_gpio_makeInput(15);
  //mf_gpio_clr(15);
  mf_gpio_makeInput(0);
  mf_gpio_clr(0);
  // Need to implement
  //HplRF230P__Capture__stop();

  return SUCCESS;
}

// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static error_t RealMainP__PlatformInit__init(void){
//line 62
  unsigned char result;
//line 62

//line 62
  result = HplRF230P__PlatformInit__init();
//line 62
  result = ecombine(result, RF230DriverLayerP__PlatformInit__init());
//line 62
  //result = ecombine(result, PlatformP__Init__init());
//line 62

//line 62
  return result;
//line 62
}
//line 62
// 65 "/opt/tinyos-2.x/tos/interfaces/Scheduler.nc"
static bool RealMainP__Scheduler__runNextTask(void){
//line 65
  unsigned char result;
//line 65

//line 65
  result = SchedulerBasicP__Scheduler__runNextTask();
//line 65

//line 65
  return result;
//line 65
}
//line 65
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
inline static   void RF230DriverLayerP__Tasklet__schedule(void){
//line 59
  TaskletC__Tasklet__schedule();
//line 59
}
//line 59
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t RF230DriverLayerP__SpiResource__release(void){
//line 120
  unsigned char result;
//line 120

//line 120
  result = Atm128SpiP__Resource__release(0U);
//line 120

//line 120
  return result;
//line 120
}
//line 120
// 55 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__set(void)
//line 55
{
//line 55
  * (volatile uint8_t *)37U |= 1 << 7;
}

// 40 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__SLP_TR__set(void){
//line 40
  ///*HplAtm128GeneralIOC.PortB.Bit7*/HplAtm128GeneralIOPinP$15__IO__set();
  mf_gpio_set(14);
//line 40
}
//line 40
// 115 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   uint8_t HplAtm128SpiP__SPI__read(void)
//line 115
{
//line 115
  //return * (volatile uint8_t *)(0X2E + 0x20);
  return SPIx->DR;
}

// 97 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   uint8_t Atm128SpiP__Spi__read(void){
//line 97
  unsigned char result;
//line 97

//line 97
  result = HplAtm128SpiP__SPI__read();
//line 97

//line 97
  return result;
//line 97
}
//line 97
// 160 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static __inline   uint8_t Atm128SpiP__FastSpiByte__splitRead(void)
//line 160
{
  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
  return Atm128SpiP__Spi__read();
}

// 63 "/opt/tinyos-2.x/tos/interfaces/FastSpiByte.nc"
inline static   uint8_t RF230DriverLayerP__FastSpiByte__splitRead(void){
//line 63
  unsigned char result;
//line 63

//line 63
  result = Atm128SpiP__FastSpiByte__splitRead();
//line 63

//line 63
  return result;
//line 63
}
//line 63
// 116 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__write(uint8_t d)
//line 116
{
//line 116
  //assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPI_I2S_SendData(SPIx, d);

  //SPIx->DR = d;

  //* (volatile uint8_t *)(0X2E + 0x20) = d;
}

// 103 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__write(uint8_t arg_0x7e1159f8){
//line 103
  HplAtm128SpiP__SPI__write(arg_0x7e1159f8);
//line 103
}
//line 103
// 166 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static __inline   uint8_t Atm128SpiP__FastSpiByte__splitReadWrite(uint8_t data)
//line 166
{
  uint8_t b;

  // Nived : Wonder why the read is happening before the write, modifying to make it similar to mf
  // while (!(* (volatile uint8_t *)(0x2D + 0x20) & 0x80))
    // ;
  // b = Atm128SpiP__Spi__read();
  // Atm128SpiP__Spi__write(data);

  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
  		b = (uint8_t) Atm128SpiP__Spi__read();
  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
		Atm128SpiP__Spi__write(data);

  //while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
	//	b = (uint8_t) Atm128SpiP__Spi__read();
	//	Atm128SpiP__Spi__write(data);

  return b;
}

// 69 "/opt/tinyos-2.x/tos/interfaces/FastSpiByte.nc"
inline static   uint8_t RF230DriverLayerP__FastSpiByte__splitReadWrite(uint8_t arg_0x7e23fe68){
//line 69
  unsigned char result;
//line 69

//line 69
  result = Atm128SpiP__FastSpiByte__splitReadWrite(arg_0x7e23fe68);
//line 69

//line 69
  return result;
//line 69
}
//line 69
// 156 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static __inline   void Atm128SpiP__FastSpiByte__splitWrite(uint8_t data)
//line 156
{
	// Nived: Adding the while loop to wait for the spi transmitting
  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
	  //Atm128SpiP__Spi__write(data);
	  SPI_I2S_SendData(SPIx, data);
}

// 57 "/opt/tinyos-2.x/tos/interfaces/FastSpiByte.nc"
inline static   void RF230DriverLayerP__FastSpiByte__splitWrite(uint8_t arg_0x7e23f530){
//line 57
  Atm128SpiP__FastSpiByte__splitWrite(arg_0x7e23f530);
//line 57
}
//line 57
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)37U &= ~(1 << 0);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__SELN__clr(void){
//line 41
  ///*HplAtm128GeneralIOC.PortB.Bit0*/HplAtm128GeneralIOPinP$8__IO__clr();
  mf_gpio_clr(10);

//line 41
}
//line 41
// 154 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static __inline void RF230DriverLayerP__writeRegister(uint8_t reg, uint8_t value)
{
  for (; 0; ) ;
  for (; 0; ) ;

  RF230DriverLayerP__SELN__clr();
  RF230DriverLayerP__FastSpiByte__splitWrite(RF230_CMD_REGISTER_WRITE | reg);
  RF230DriverLayerP__FastSpiByte__splitReadWrite(value);
  RF230DriverLayerP__FastSpiByte__splitRead();
  RF230DriverLayerP__SELN__set();
}

// 46 "/opt/tinyos-2.x/tos/platforms/micaz/BusyWaitMicroC.nc"
static __inline   void BusyWaitMicroC__BusyWait__wait(uint16_t dt)
//line 46
{

  // if (dt) {
    // Nived : Creating a busy wait
	int i = 0;
	while(i++ <= dt);
     // __asm volatile (
    // "1:	sbiw	%0,1\n"
    // "	adiw	%0,1\n"
    // "	sbiw	%0,1\n"
    // "	brne	1b" : "+w"(dt));
    // }
}

// 66 "/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc"
inline static   void RF230DriverLayerP__BusyWait__wait(RF230DriverLayerP__BusyWait__size_type arg_0x7e235010){
//line 66
  BusyWaitMicroC__BusyWait__wait(arg_0x7e235010);
//line 66
}
//line 66
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)34U &= ~(1 << 6);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void RF230DriverLayerP__RSTN__clr(void){
//line 41
  ///*HplAtm128GeneralIOC.PortA.Bit6*/HplAtm128GeneralIOPinP$6__IO__clr();
  mf_gpio_clr(12);
//line 41
}
//line 41
// 241 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline void RF230DriverLayerP__initRadio(void)
{
  uint8_t hasItBeenSet = 0x0;

  RF230DriverLayerP__BusyWait__wait(510);

  RF230DriverLayerP__RSTN__clr();
  RF230DriverLayerP__SLP_TR__clr();
  RF230DriverLayerP__BusyWait__wait(6);
  RF230DriverLayerP__RSTN__set();

  // Nived : Test to see if spi is working, need to remove it as soon as it starts working
  //while(1)
  //{
	  RF230DriverLayerP__writeRegister(RF230_TRX_CTRL_0, RF230_TRX_CTRL_0_VALUE);
  //}

  RF230DriverLayerP__writeRegister(RF230_TRX_STATE, RF230_TRX_OFF);

  // Nived: Checking if the setting is happening
  hasItBeenSet = RF230DriverLayerP__readRegister(RF230_TRX_STATUS);

  RF230DriverLayerP__BusyWait__wait(510);

  RF230DriverLayerP__writeRegister(RF230_IRQ_MASK, ((RF230_IRQ_TRX_UR | RF230_IRQ_PLL_LOCK) | RF230_IRQ_TRX_END) | RF230_IRQ_RX_START);
  RF230DriverLayerP__writeRegister(RF230_CCA_THRES, RF230_CCA_THRES_VALUE);
  RF230DriverLayerP__writeRegister(RF230_PHY_TX_PWR, RF230_TX_AUTO_CRC_ON | (0 & RF230_TX_PWR_MASK));

  RF230DriverLayerP__txPower = 0 & RF230_TX_PWR_MASK;
  RF230DriverLayerP__channel = 11 & RF230_CHANNEL_MASK;
  RF230DriverLayerP__writeRegister(RF230_PHY_CC_CCA, RF230_CCA_MODE_VALUE | RF230DriverLayerP__channel);

  RF230DriverLayerP__SLP_TR__set();
  RF230DriverLayerP__state = RF230DriverLayerP__STATE_SLEEP;
}



static inline  void RF230DriverLayerP__SpiResource__granted(void)
{
  RF230DriverLayerP__SELN__makeOutput();
  RF230DriverLayerP__SELN__set();

  if (RF230DriverLayerP__state == RF230DriverLayerP__STATE_P_ON)
    {
      RF230DriverLayerP__initRadio();
      RF230DriverLayerP__SpiResource__release();
    }
  else {
    RF230DriverLayerP__Tasklet__schedule();
    }
}

// 388 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline   void Atm128SpiP__Resource__default__granted(uint8_t id)
//line 388
{
}

// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static  void Atm128SpiP__Resource__granted(uint8_t arg_0x7e11e0b8){
//line 102
  switch (arg_0x7e11e0b8) {
//line 102
    case 0U:
//line 102
      RF230DriverLayerP__SpiResource__granted();
//line 102
      break;
//line 102
    default:
//line 102
      Atm128SpiP__Resource__default__granted(arg_0x7e11e0b8);
//line 102
      break;
//line 102
    }
//line 102
}
//line 102
// 384 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline  void Atm128SpiP__ResourceArbiter__granted(uint8_t id)
//line 384
{
  Atm128SpiP__Resource__granted(id);
}

// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static  void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__granted(uint8_t arg_0x7e6da390){
//line 102
  Atm128SpiP__ResourceArbiter__granted(arg_0x7e6da390);
//line 102
}
//line 102
// 171 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__configure(uint8_t id)
//line 171
{
}

// 59 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
inline static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__configure(uint8_t arg_0x7e6d9830){
//line 59
    /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__configure(arg_0x7e6d9830);
//line 59
}
//line 59
// 155 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline  void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__runTask(void)
//line 155
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 156
    {
      /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__reqResId;
      /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_BUSY;
    }
//line 159
    __nesc_atomic_end(__nesc_atomic); }
  /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__configure(/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId);
  /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__granted(/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId);
}










static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__unconfigure(uint8_t id)
//line 173
{
}

// 65 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
inline static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__unconfigure(uint8_t arg_0x7e6d9830){
//line 65
    /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__default__unconfigure(arg_0x7e6d9830);
//line 65
}
//line 65
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 68 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline   resource_client_id_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__dequeue(void)
//line 68
{
  /* atomic removed: atomic calls only */
//line 69
  {
    if (/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead != /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY) {
        uint8_t id = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead;

//line 72
        /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ[/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead];
        if (/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead == /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY) {
          /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qTail = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY;
          }
//line 75
        /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ[id] = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY;
        {
          unsigned char __nesc_temp =
//line 76
          id;

//line 76
          return __nesc_temp;
        }
      }
//line 78
    {
      unsigned char __nesc_temp =
//line 78
      /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY;

//line 78
      return __nesc_temp;
    }
  }
}

// 70 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
inline static   resource_client_id_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__dequeue(void){
//line 70
  unsigned char result;
//line 70

//line 70
  result = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__dequeue();
//line 70

//line 70
  return result;
//line 70
}
//line 70
// 60 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline   bool /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEmpty(void)
//line 60
{
  /* atomic removed: atomic calls only */
//line 61
  {
    unsigned char __nesc_temp =
//line 61
    /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead == /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY;

//line 61
    return __nesc_temp;
  }
}

// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
inline static   bool /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__isEmpty(void){
//line 53
  unsigned char result;
//line 53

//line 53
  result = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEmpty();
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 97 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__release(uint8_t id)
//line 97
{
  bool released = FALSE;

//line 99
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 99
    {
      if (/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state == /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_BUSY && /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId == id) {
          if (/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__isEmpty() == FALSE) {
              /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__NO_RES;
              /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__reqResId = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__dequeue();
              /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_GRANTING;
              /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__postTask();
            }
          else {
              /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__NO_RES;
              /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_IDLE;
            }
          released = TRUE;
        }
    }
//line 113
    __nesc_atomic_end(__nesc_atomic); }
  if (released == TRUE) {
      /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__unconfigure(id);
      return SUCCESS;
    }
  return FAIL;
}

// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t Atm128SpiP__ResourceArbiter__release(uint8_t arg_0x7e11b410){
//line 120
  unsigned char result;
//line 120

//line 120
  result = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__release(arg_0x7e11b410);
//line 120

//line 120
  return result;
//line 120
}
//line 120
// 97 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
static inline bool SchedulerBasicP__isWaiting(uint8_t id)
{
  return SchedulerBasicP__m_next[id] != SchedulerBasicP__NO_TASK || SchedulerBasicP__m_tail == id;
}

static inline bool SchedulerBasicP__pushTask(uint8_t id)
{
  if (!SchedulerBasicP__isWaiting(id))
    {
      if (SchedulerBasicP__m_head == SchedulerBasicP__NO_TASK)
        {
          SchedulerBasicP__m_head = id;
          SchedulerBasicP__m_tail = id;
        }
      else
        {
          SchedulerBasicP__m_next[SchedulerBasicP__m_tail] = id;
          SchedulerBasicP__m_tail = id;
        }
      return TRUE;
    }
  else
    {
      return FALSE;
    }
}

// 90 "/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc"
inline static   bool Atm128SpiP__ArbiterInfo__inUse(void){
//line 90
  unsigned char result;
//line 90

//line 90
  result = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ArbiterInfo__inUse();
//line 90

//line 90
  return result;
//line 90
}
//line 90
// 161 "/opt/tinyos-2.x/tos/chips/atm1281/McuSleepC.nc"
static inline   void McuSleepC__McuPowerState__update(void)
//line 161
{
}

// 52 "/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc"
inline static   void Atm128SpiP__McuPowerState__update(void){
//line 52
  McuSleepC__McuPowerState__update();
//line 52
}
//line 52
// 111 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__sleep(void)
//line 111
{
}

// 89 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__sleep(void){
//line 89
  HplAtm128SpiP__SPI__sleep();
//line 89
}
//line 89
//line 116
inline static   void Atm128SpiP__Spi__enableSpi(bool arg_0x7e114c48){
//line 116
	if(arg_0x7e114c48 == TRUE)
	{
		SPI_Cmd(SPIx, ENABLE);
	}
	else
		SPI_Cmd(SPIx, DISABLE);
  //HplAtm128SpiP__SPI__enableSpi(arg_0x7e114c48);
//line 116
}
//line 116
// 134 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline void Atm128SpiP__stopSpi(void)
//line 134
{
  Atm128SpiP__Spi__enableSpi(FALSE);
  /* atomic removed: atomic calls only */
//line 136
  {
    Atm128SpiP__Spi__sleep();
  }
  Atm128SpiP__McuPowerState__update();
}

// 52 "/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc"
inline static   void HplAtm128SpiP__Mcu__update(void){
//line 52
  McuSleepC__McuPowerState__update();
//line 52
}
//line 52
// 307 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   void RF230RadioP__RadioAlarm__fired(void)
{
}

// 56 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   void RandomCollisionLayerP__RadioSend__sendDone(error_t arg_0x7e390a40){
//line 56
  MessageBufferLayerP__RadioSend__sendDone(arg_0x7e390a40);
//line 56
}
//line 56
// 284 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint16_t RF230RadioP__RandomCollisionConfig__getCongestionBackoff(message_t *msg)
{
  return (uint16_t )(2240 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL);
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionConfig.nc"
inline static   uint16_t RandomCollisionLayerP__Config__getCongestionBackoff(message_t *arg_0x7e885670){
//line 46
  unsigned short result;
//line 46

//line 46
  result = RF230RadioP__RandomCollisionConfig__getCongestionBackoff(arg_0x7e885670);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 83 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint8_t RF230RadioP__RF230DriverConfig__metadataLength(message_t *msg)
{
  return 0;
}

// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
inline static   uint8_t RF230DriverLayerP__Config__metadataLength(message_t *arg_0x7e8b1ca0){
//line 52
  unsigned char result;
//line 52

//line 52
  result = RF230RadioP__RF230DriverConfig__metadataLength(arg_0x7e8b1ca0);
//line 52

//line 52
  return result;
//line 52
}
//line 52
// 899 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   uint8_t RF230DriverLayerP__RadioPacket__metadataLength(message_t *msg)
{
  return RF230DriverLayerP__Config__metadataLength(msg) + sizeof(rf230_metadata_t );
}

// 65 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t MetadataFlagsLayerC__SubPacket__metadataLength(message_t *arg_0x7e843a08){
//line 65
  unsigned char result;
//line 65

//line 65
  result = RF230DriverLayerP__RadioPacket__metadataLength(arg_0x7e843a08);
//line 65

//line 65
  return result;
//line 65
}
//line 65
// 110 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline   uint8_t MetadataFlagsLayerC__RadioPacket__metadataLength(message_t *msg)
{
  return MetadataFlagsLayerC__SubPacket__metadataLength(msg) + sizeof(flags_metadata_t );
}

//line 54
static inline flags_metadata_t *MetadataFlagsLayerC__getMeta(message_t *msg)
{
  return (flags_metadata_t*)((void *)msg + sizeof(message_t ) - MetadataFlagsLayerC__RadioPacket__metadataLength(msg));
}

//line 73
static inline   void MetadataFlagsLayerC__PacketFlag__clear(uint8_t bit, message_t *msg)
{
  for (; 0; ) ;

  MetadataFlagsLayerC__getMeta(msg)->flags &= ~(1 << bit);
}

// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   void SoftwareAckLayerP__AckReceivedFlag__clear(message_t *arg_0x7e309868){
//line 55
  MetadataFlagsLayerC__PacketFlag__clear(0U, arg_0x7e309868);
//line 55
}
//line 55
// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   error_t SoftwareAckLayerP__SubSend__send(message_t *arg_0x7e390380){
//line 48
  unsigned char result;
//line 48

//line 48
  result = RF230DriverLayerP__RadioSend__send(arg_0x7e390380);
//line 48

//line 48
  return result;
//line 48
}
//line 48
// 78 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   error_t SoftwareAckLayerP__RadioSend__send(message_t *msg)
{
  error_t error;

  if (SoftwareAckLayerP__state == SoftwareAckLayerP__STATE_READY)
    {
      if ((error = SoftwareAckLayerP__SubSend__send(msg)) == SUCCESS)
        {
          SoftwareAckLayerP__AckReceivedFlag__clear(msg);
          SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_DATA_SEND;
          SoftwareAckLayerP__txMsg = msg;
        }
    }
  else {
    error = EBUSY;
    }
  return error;
}

// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   error_t RandomCollisionLayerP__SubSend__send(message_t *arg_0x7e390380){
//line 48
  unsigned char result;
//line 48

//line 48
  result = SoftwareAckLayerP__RadioSend__send(arg_0x7e390380);
//line 48

//line 48
  return result;
//line 48
}
//line 48
//line 63
inline static   void RandomCollisionLayerP__RadioSend__ready(void){
//line 63
  MessageBufferLayerP__RadioSend__ready();
//line 63
}
//line 63
// 90 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   uint16_t HplAtm1281Timer1P__Timer__get(void)
//line 90
{
//line 90
  //return * (volatile uint16_t *)0x84;

	uint16_t time = 0;

	//time = STM32RtcC$Alarm$getNow() & 0xffff;

	//STM32RtcC$Alarm$getNow();
	return time;
}

// 61 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__get(void){
//line 61
  unsigned short result;
//line 61

//line 61
  result = HplAtm1281Timer1P__Timer__get();
//line 61

//line 61
  return result;
//line 61
}
//line 61
// 62 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static inline   /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__getNow(void)
//line 62
{
  return /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__get();
}

// 109 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   RadioAlarmP__Alarm__size_type RadioAlarmP__Alarm__getNow(void){
//line 109
  unsigned short result;
//line 109

//line 109
  result = /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__getNow();
//line 109

//line 109
  return result;
//line 109
}
//line 109
// 75 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static __inline   uint16_t RadioAlarmP__RadioAlarm__getNow(uint8_t id)
{
  return RadioAlarmP__Alarm__getNow();
}

// 64 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   uint16_t RandomCollisionLayerP__RadioAlarm__getNow(void){
//line 64
  unsigned short result;
//line 64

//line 64
  result = RadioAlarmP__RadioAlarm__getNow(1U);
//line 64

//line 64
  return result;
//line 64
}
//line 64
// 110 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static inline   void RandomCollisionLayerP__RadioAlarm__fired(void)
{
  error_t error;
  int16_t delay;

  for (; 0; ) ;

  delay = (int16_t )RandomCollisionLayerP__txBarrier - RandomCollisionLayerP__RadioAlarm__getNow();

  if (RandomCollisionLayerP__state == RandomCollisionLayerP__STATE_BARRIER)
    {
      RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_READY;

      RandomCollisionLayerP__RadioSend__ready();
      return;
    }
  else {
//line 126
    if (RandomCollisionLayerP__state & RandomCollisionLayerP__STATE_BARRIER && delay > 0) {
      error = EBUSY;
      }
    else {
//line 129
      error = RandomCollisionLayerP__SubSend__send(RandomCollisionLayerP__txMsg);
      }
    }
//line 131
  if (error != SUCCESS)
    {
      if ((RandomCollisionLayerP__state & ~RandomCollisionLayerP__STATE_BARRIER) == RandomCollisionLayerP__STATE_TX_PENDING_FIRST)
        {
          RandomCollisionLayerP__state = (RandomCollisionLayerP__state & RandomCollisionLayerP__STATE_BARRIER) | RandomCollisionLayerP__STATE_TX_PENDING_SECOND;
          RandomCollisionLayerP__RadioAlarm__wait(RandomCollisionLayerP__getBackoff(RandomCollisionLayerP__Config__getCongestionBackoff(RandomCollisionLayerP__txMsg)));
        }
      else
        {
          if (RandomCollisionLayerP__state & RandomCollisionLayerP__STATE_BARRIER && delay > 0)
            {
              RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_BARRIER;
              RandomCollisionLayerP__RadioAlarm__wait(delay);
            }
          else {
            RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_READY;
            }
          RandomCollisionLayerP__RadioSend__sendDone(error);
        }
    }
  else {
    RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_TX_SENDING;
    }
}

//line 155
static inline   void RandomCollisionLayerP__SubSend__sendDone(error_t error)
{
  for (; 0; ) ;

  RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_READY;
  RandomCollisionLayerP__RadioSend__sendDone(error);
}

// 56 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   void SoftwareAckLayerP__RadioSend__sendDone(error_t arg_0x7e390a40){
//line 56
  RandomCollisionLayerP__SubSend__sendDone(arg_0x7e390a40);
//line 56
}
//line 56
// 140 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   void RF230RadioP__SoftwareAckConfig__reportChannelError(void)
{
}

// 86 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   void SoftwareAckLayerP__SoftwareAckConfig__reportChannelError(void){
//line 86
  RF230RadioP__SoftwareAckConfig__reportChannelError();
//line 86
}
//line 86
// 124 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   void SoftwareAckLayerP__RadioAlarm__fired(void)
{
  for (; 0; ) ;

  SoftwareAckLayerP__SoftwareAckConfig__reportChannelError();

  SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_READY;
  SoftwareAckLayerP__RadioSend__sendDone(SUCCESS);
}

// 586 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline    void RF230DriverLayerP__RadioCCA__default__done(error_t error)
//line 586
{
}

// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioCCA.nc"
inline static   void RF230DriverLayerP__RadioCCA__done(error_t arg_0x7e357460){
//line 52
  RF230DriverLayerP__RadioCCA__default__done(arg_0x7e357460);
//line 52
}
//line 52
// 166 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static __inline uint8_t RF230DriverLayerP__readRegister(uint8_t reg)
{
  for (; 0; ) ;
  for (; 0; ) ;

  RF230DriverLayerP__SELN__clr();
  RF230DriverLayerP__FastSpiByte__splitWrite(RF230_CMD_REGISTER_READ | reg);
  RF230DriverLayerP__FastSpiByte__splitReadWrite(0);
  reg = RF230DriverLayerP__FastSpiByte__splitRead();
  RF230DriverLayerP__SELN__set();

  return reg;
}

//line 191
static inline   void RF230DriverLayerP__RadioAlarm__fired(void)
{
  if (RF230DriverLayerP__state == RF230DriverLayerP__STATE_SLEEP_2_TRX_OFF) {
    RF230DriverLayerP__state = RF230DriverLayerP__STATE_TRX_OFF;
    }
  else {
//line 195
    if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_CCA)
      {
        uint8_t cca;

        for (; 0; ) ;

        RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_NONE;
        cca = RF230DriverLayerP__readRegister(RF230_TRX_STATUS);

        for (; 0; ) ;

        RF230DriverLayerP__RadioCCA__done(cca & RF230_CCA_DONE ? cca & RF230_CCA_STATUS ? SUCCESS : EBUSY : FAIL);
      }
    else {
      for (; 0; ) ;
      }
    }
  RF230DriverLayerP__Tasklet__schedule();
}

// 89 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static inline    void RadioAlarmP__RadioAlarm__default__fired(uint8_t id)
{
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   void RadioAlarmP__RadioAlarm__fired(uint8_t arg_0x7e7d3868){
//line 59
  switch (arg_0x7e7d3868) {
//line 59
    case 0U:
//line 59
      RF230RadioP__RadioAlarm__fired();
//line 59
      break;
//line 59
    case 1U:
//line 59
      RandomCollisionLayerP__RadioAlarm__fired();
//line 59
      break;
//line 59
    case 2U:
//line 59
      SoftwareAckLayerP__RadioAlarm__fired();
//line 59
      break;
//line 59
    case 3U:
//line 59
      RF230DriverLayerP__RadioAlarm__fired();
//line 59
      break;
//line 59
    default:
//line 59
      RadioAlarmP__RadioAlarm__default__fired(arg_0x7e7d3868);
//line 59
      break;
//line 59
    }
//line 59
}
//line 59
// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static inline   void RadioAlarmP__Tasklet__run(void)
{
  if (RadioAlarmP__state == RadioAlarmP__STATE_FIRED)
    {
      RadioAlarmP__state = RadioAlarmP__STATE_READY;
      RadioAlarmP__RadioAlarm__fired(RadioAlarmP__alarm);
    }
}

// 261 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline   void MessageBufferLayerP__Tasklet__run(void)
{
}

// 93 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static __inline   bool RadioAlarmP__RadioAlarm__isFree(uint8_t id)
{
  return RadioAlarmP__state == RadioAlarmP__STATE_READY;
}

// 44 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   bool RandomCollisionLayerP__RadioAlarm__isFree(void){
//line 44
  unsigned char result;
//line 44

//line 44
  result = RadioAlarmP__RadioAlarm__isFree(1U);
//line 44

//line 44
  return result;
//line 44
}
//line 44
// 71 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static inline   void RandomCollisionLayerP__SubSend__ready(void)
{
  if (RandomCollisionLayerP__state == RandomCollisionLayerP__STATE_READY && RandomCollisionLayerP__RadioAlarm__isFree()) {
    RandomCollisionLayerP__RadioSend__ready();
    }
}

// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   void SoftwareAckLayerP__RadioSend__ready(void){
//line 63
  RandomCollisionLayerP__SubSend__ready();
//line 63
}
//line 63
// 72 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   void SoftwareAckLayerP__SubSend__ready(void)
{
  if (SoftwareAckLayerP__state == SoftwareAckLayerP__STATE_READY) {
    SoftwareAckLayerP__RadioSend__ready();
    }
}

// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   void RF230DriverLayerP__RadioSend__ready(void){
//line 63
  SoftwareAckLayerP__SubSend__ready();
//line 63
}
//line 63
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t MessageBufferLayerP__stateDoneTask__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(MessageBufferLayerP__stateDoneTask);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 163 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline   void MessageBufferLayerP__RadioState__done(void)
{
  MessageBufferLayerP__stateDoneTask__postTask();
}

// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioState.nc"
inline static   void RF230DriverLayerP__RadioState__done(void){
//line 69
  MessageBufferLayerP__RadioState__done();
//line 69
}
//line 69
// 323 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static __inline void RF230DriverLayerP__changeChannel(void)
{
  for (; 0; ) ;
  for (; 0; ) ;

  if (RF230DriverLayerP__isSpiAcquired())
    {
      RF230DriverLayerP__writeRegister(RF230_PHY_CC_CCA, RF230_CCA_MODE_VALUE | RF230DriverLayerP__channel);

      if (RF230DriverLayerP__state == RF230DriverLayerP__STATE_RX_ON) {
        RF230DriverLayerP__state = RF230DriverLayerP__STATE_TRX_OFF_2_RX_ON;
        }
      else {
//line 335
        RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_SIGNAL_DONE;
        }
    }
}

// 89 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/HplRF230P.nc"
static inline   void HplRF230P__IRQ__disable(void)
{
  HplRF230P__Capture__stop();
}

// 66 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
inline static   void RF230DriverLayerP__IRQ__disable(void){
//line 66
  HplRF230P__IRQ__disable();
//line 66
}
//line 66
// 165 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__Capture__start(void)
//line 165
{
//line 165
  * (volatile uint8_t *)0x6F |= 1 << 5;
}

// 67 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
inline static   void HplRF230P__Capture__start(void){
//line 67
  HplAtm1281Timer1P__Capture__start();
//line 67
}
//line 67
// 159 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__Capture__reset(void)
//line 159
{
//line 159
  * (volatile uint8_t *)(0x16 + 0x20) = 1 << 5;
}

// 64 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
inline static   void HplRF230P__Capture__reset(void){
//line 64
  HplAtm1281Timer1P__Capture__reset();
//line 64
}
//line 64
// 155 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__Capture__setEdge(bool up)
//line 155
{
//line 155
  if (up) {
//line 155
    * (volatile uint8_t *)0x81 |= 1 << 6;
    }
  else {
//line 155
    * (volatile uint8_t *)0x81 &= ~(1 << 6);
    }
}

// 88 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
inline static   void HplRF230P__Capture__setEdge(bool arg_0x7e153988){
//line 88
  HplAtm1281Timer1P__Capture__setEdge(arg_0x7e153988);
//line 88
}
//line 88
// 74 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/HplRF230P.nc"
static inline   error_t HplRF230P__IRQ__captureRisingEdge(void)
{
  HplRF230P__Capture__setEdge(TRUE);
  HplRF230P__Capture__reset();
  HplRF230P__Capture__start();

  return SUCCESS;
}

// 53 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
inline static   error_t RF230DriverLayerP__IRQ__captureRisingEdge(void){
//line 53
  unsigned char result;
//line 53

//line 53
  result = HplRF230P__IRQ__captureRisingEdge();
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 78 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__start(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size dt)
{
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__startAt(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__get(), dt);
}

// 66 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   void RadioAlarmP__Alarm__start(RadioAlarmP__Alarm__size_type arg_0x7e7e0550){
//line 66
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__start(arg_0x7e7e0550);
//line 66
}
//line 66
// 98 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static inline   void RadioAlarmP__RadioAlarm__wait(uint8_t id, uint16_t timeout)
{
	// Nived : Looks like i might need an alarm here, lets see if a busy wait solves the problem
   for(int i = 0; i < timeout ; i++);

  //for (; 0; ) ;

  RadioAlarmP__alarm = id;
  RadioAlarmP__state = RadioAlarmP__STATE_WAIT;
  RadioAlarmP__Alarm__start(timeout);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   void RF230DriverLayerP__RadioAlarm__wait(uint16_t arg_0x7e8481b8){
//line 49
  RadioAlarmP__RadioAlarm__wait(3U, arg_0x7e8481b8);
//line 49
}
//line 49
//line 44
inline static   bool RF230DriverLayerP__RadioAlarm__isFree(void){
//line 44
  unsigned char result;
//line 44

//line 44
  result = RadioAlarmP__RadioAlarm__isFree(3U);
//line 44

//line 44
  return result;
//line 44
}
//line 44
// 341 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static __inline void RF230DriverLayerP__changeState(void)
{

	int i = 0;
  if ((
//line 343
  RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_STANDBY || RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TURNON)
   && RF230DriverLayerP__state == RF230DriverLayerP__STATE_SLEEP && RF230DriverLayerP__RadioAlarm__isFree())
    {
      RF230DriverLayerP__SLP_TR__clr();

      // Nived : Commenting the radio Alarm wait and using a busy loop for now
      RF230DriverLayerP__RadioAlarm__wait(RF230DriverLayerP__SLEEP_WAKEUP_TIME);
      //for(int i = 0; i < 811; i++);
      //while(i++ < 811);

      RF230DriverLayerP__state = RF230DriverLayerP__STATE_SLEEP_2_TRX_OFF;
    }
  else {
//line 351
    if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TURNON && RF230DriverLayerP__state == RF230DriverLayerP__STATE_TRX_OFF && RF230DriverLayerP__isSpiAcquired())
      {
        for (; 0; ) ;

        RF230DriverLayerP__readRegister(RF230_IRQ_STATUS);
        RF230DriverLayerP__IRQ__captureRisingEdge();


        RF230DriverLayerP__writeRegister(RF230_PHY_CC_CCA, RF230_CCA_MODE_VALUE | RF230DriverLayerP__channel);

        RF230DriverLayerP__writeRegister(RF230_TRX_STATE, RF230_RX_ON);
        RF230DriverLayerP__state = RF230DriverLayerP__STATE_TRX_OFF_2_RX_ON;
      }
    else {
      if ((
//line 364
      RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TURNOFF || RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_STANDBY)
       && RF230DriverLayerP__state == RF230DriverLayerP__STATE_RX_ON && RF230DriverLayerP__isSpiAcquired())
        {
          RF230DriverLayerP__writeRegister(RF230_TRX_STATE, RF230_FORCE_TRX_OFF);

          RF230DriverLayerP__IRQ__disable();
          RF230DriverLayerP__radioIrq = FALSE;

          RF230DriverLayerP__state = RF230DriverLayerP__STATE_TRX_OFF;
        }
      }
    }
//line 375
  if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TURNOFF && RF230DriverLayerP__state == RF230DriverLayerP__STATE_TRX_OFF)
    {
      RF230DriverLayerP__SLP_TR__set();
      RF230DriverLayerP__state = RF230DriverLayerP__STATE_SLEEP;
      RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_SIGNAL_DONE;
    }
  else {
//line 381
    if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_STANDBY && RF230DriverLayerP__state == RF230DriverLayerP__STATE_TRX_OFF) {
      RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_SIGNAL_DONE;
      }
    }
}

// 251 "/usr/lib/ncc/nesc_nx.h"
static __inline uint8_t __nesc_hton_leuint8(void *target, uint8_t value)
//line 251
{
  uint8_t *base = (uint8_t*) target;

//line 253
  base[0] = value;
  return value;
}

// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t MessageBufferLayerP__deliverTask__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(MessageBufferLayerP__deliverTask);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 351 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline   message_t *MessageBufferLayerP__RadioReceive__receive(message_t *msg)
{
  message_t *m;

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      if (MessageBufferLayerP__receiveQueueSize >= MessageBufferLayerP__RECEIVE_QUEUE_SIZE) {
        m = msg;
        }
      else {
          uint8_t idx = MessageBufferLayerP__receiveQueueHead + MessageBufferLayerP__receiveQueueSize;

//line 362
          if (idx >= MessageBufferLayerP__RECEIVE_QUEUE_SIZE) {
            idx -= MessageBufferLayerP__RECEIVE_QUEUE_SIZE;
            }
          m = MessageBufferLayerP__receiveQueue[idx];
          MessageBufferLayerP__receiveQueue[idx] = msg;

          ++MessageBufferLayerP__receiveQueueSize;
          MessageBufferLayerP__deliverTask__postTask();
        }
    }
//line 371
    __nesc_atomic_end(__nesc_atomic); }

  return m;
}

// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   message_t *UniqueLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8){
//line 53
  nx_struct message_t *result;
//line 53

//line 53
  result = MessageBufferLayerP__RadioReceive__receive(arg_0x7e5fbea8);
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 163 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
static __inline   void NeighborhoodP__NeighborhoodFlag__set(uint8_t bit, uint8_t idx)
{
  NeighborhoodP__flags[idx] |= 1 << bit;
}

// 51 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodFlag.nc"
inline static   void UniqueLayerP__NeighborhoodFlag__set(uint8_t arg_0x7e5e77e0){
//line 51
  NeighborhoodP__NeighborhoodFlag__set(0U, arg_0x7e5e77e0);
//line 51
}
//line 51
// 164 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   void RF230RadioP__UniqueConfig__reportChannelError(void)
{
}

// 58 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueConfig.nc"
inline static   void UniqueLayerP__UniqueConfig__reportChannelError(void){
//line 58
  RF230RadioP__UniqueConfig__reportChannelError();
//line 58
}
//line 58
// 158 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
static __inline   bool NeighborhoodP__NeighborhoodFlag__get(uint8_t bit, uint8_t idx)
{
  return NeighborhoodP__flags[idx] & (1 << bit);
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodFlag.nc"
inline static   bool UniqueLayerP__NeighborhoodFlag__get(uint8_t arg_0x7e5e7308){
//line 46
  unsigned char result;
//line 46

//line 46
  result = NeighborhoodP__NeighborhoodFlag__get(0U, arg_0x7e5e7308);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 246 "/usr/lib/ncc/nesc_nx.h"
static __inline uint8_t __nesc_ntoh_leuint8(const void *source)
//line 246
{
  const uint8_t *base = (const uint8_t *)source;

//line 248
  return base[0];
}

// 73 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint8_t RF230RadioP__RF230DriverConfig__headerLength(message_t *msg)
{
  return (size_t )& ((message_t *)0)->data - sizeof(rf230packet_header_t );
}

// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
inline static   uint8_t RF230DriverLayerP__Config__headerLength(message_t *arg_0x7e8b13e8){
//line 40
  unsigned char result;
//line 40

//line 40
  result = RF230RadioP__RF230DriverConfig__headerLength(arg_0x7e8b13e8);
//line 40

//line 40
  return result;
//line 40
}
//line 40
// 873 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   uint8_t RF230DriverLayerP__RadioPacket__headerLength(message_t *msg)
{
  return RF230DriverLayerP__Config__headerLength(msg) + sizeof(rf230_header_t );
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t MetadataFlagsLayerC__SubPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = RF230DriverLayerP__RadioPacket__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 90 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline   uint8_t MetadataFlagsLayerC__RadioPacket__headerLength(message_t *msg)
{
  return MetadataFlagsLayerC__SubPacket__headerLength(msg);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t TimeStampingLayerP__SubPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = MetadataFlagsLayerC__RadioPacket__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 116 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   uint8_t TimeStampingLayerP__RadioPacket__headerLength(message_t *msg)
{
  return TimeStampingLayerP__SubPacket__headerLength(msg);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t PacketLinkLayerP__SubPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = TimeStampingLayerP__RadioPacket__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 242 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline   uint8_t PacketLinkLayerP__RadioPacket__headerLength(message_t *msg)
//line 242
{
  return PacketLinkLayerP__SubPacket__headerLength(msg);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t Ieee154PacketLayerP__SubPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = PacketLinkLayerP__RadioPacket__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 74 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline ieee154_header_t *Ieee154PacketLayerP__getHeader(message_t *msg)
{
  return (ieee154_header_t *)((void *)msg + Ieee154PacketLayerP__SubPacket__headerLength(msg));
}

//line 158
static inline   uint8_t Ieee154PacketLayerP__Ieee154PacketLayer__getDSN(message_t *msg)
{
  return __nesc_ntoh_leuint8((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->dsn);
}

// 120 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   uint8_t RF230RadioP__Ieee154PacketLayer__getDSN(message_t *arg_0x7e860bb0){
//line 120
  unsigned char result;
//line 120

//line 120
  result = Ieee154PacketLayerP__Ieee154PacketLayer__getDSN(arg_0x7e860bb0);
//line 120

//line 120
  return result;
//line 120
}
//line 120
// 149 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint8_t RF230RadioP__UniqueConfig__getSequenceNumber(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__getDSN(msg);
}

// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueConfig.nc"
inline static   uint8_t UniqueLayerP__UniqueConfig__getSequenceNumber(message_t *arg_0x7e8a0a70){
//line 42
  unsigned char result;
//line 42

//line 42
  result = RF230RadioP__UniqueConfig__getSequenceNumber(arg_0x7e8a0a70);
//line 42

//line 42
  return result;
//line 42
}
//line 42
// 276 "/usr/lib/ncc/nesc_nx.h"
static __inline uint16_t __nesc_ntoh_leuint16(const void *source)
//line 276
{
  const uint8_t *base = (const uint8_t *)source;

//line 278
  return ((uint16_t )base[1] << 8) | base[0];
}

// 188 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   uint16_t Ieee154PacketLayerP__Ieee154PacketLayer__getSrcAddr(message_t *msg)
{
  return __nesc_ntoh_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->src);
}

// 151 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   uint16_t RF230RadioP__Ieee154PacketLayer__getSrcAddr(message_t *arg_0x7e855010){
//line 151
  unsigned short result;
//line 151

//line 151
  result = Ieee154PacketLayerP__Ieee154PacketLayer__getSrcAddr(arg_0x7e855010);
//line 151

//line 151
  return result;
//line 151
}
//line 151
// 159 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   am_addr_t RF230RadioP__UniqueConfig__getSender(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__getSrcAddr(msg);
}

// 47 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueConfig.nc"
inline static   am_addr_t UniqueLayerP__UniqueConfig__getSender(message_t *arg_0x7e897010){
//line 47
  unsigned short result;
//line 47

//line 47
  result = RF230RadioP__UniqueConfig__getSender(arg_0x7e897010);
//line 47

//line 47
  return result;
//line 47
}
//line 47
// 116 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
static inline   void UniqueLayerP__Neighborhood__evicted(uint8_t idx)
//line 116
{
}

// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Neighborhood.nc"
inline static   void NeighborhoodP__Neighborhood__evicted(uint8_t arg_0x7e5ea4e8){
//line 80
  UniqueLayerP__Neighborhood__evicted(arg_0x7e5ea4e8);
//line 80
}
//line 80
// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
static inline  uint8_t  NeighborhoodP__Neighborhood__insertNode(am_addr_t node)
{
  uint8_t i;
  uint8_t maxAge;

  if (NeighborhoodP__nodes[NeighborhoodP__last] == node)
    {
      if (NeighborhoodP__ages[NeighborhoodP__last] == NeighborhoodP__time) {
        return NeighborhoodP__last;
        }
      NeighborhoodP__ages[NeighborhoodP__last] = ++NeighborhoodP__time;
      maxAge = 0x80;
    }
  else
    {
      uint8_t oldest = 0;

//line 110
      maxAge = 0;

      for (i = 0; i < 5; ++i)
        {
          uint8_t age;

          if (NeighborhoodP__nodes[i] == node)
            {
              NeighborhoodP__last = i;
              if (NeighborhoodP__ages[i] == NeighborhoodP__time) {
                return i;
                }
              NeighborhoodP__ages[i] = ++NeighborhoodP__time;
              maxAge = 0x80;
              break;
            }

          age = NeighborhoodP__time - NeighborhoodP__ages[i];
          if (age > maxAge)
            {
              maxAge = age;
              oldest = i;
            }
        }

      if (i == 5)
        {
          NeighborhoodP__Neighborhood__evicted(oldest);

          NeighborhoodP__last = oldest;
          NeighborhoodP__nodes[oldest] = node;
          NeighborhoodP__ages[oldest] = ++NeighborhoodP__time;
          NeighborhoodP__flags[oldest] = 0;
        }
    }

  if ((NeighborhoodP__time & 0x7F) == 0x7F && maxAge >= 0x7F)
    {
      for (i = 0; i < 5; ++i)
        {
          if ((NeighborhoodP__ages[i] | 0x7F) != NeighborhoodP__time) {
            NeighborhoodP__ages[i] = NeighborhoodP__time & 0x80;
            }
        }
    }
  return NeighborhoodP__last;
}

// 71 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Neighborhood.nc"
inline static   uint8_t UniqueLayerP__Neighborhood__insertNode(am_addr_t arg_0x7e5ebe28){
//line 71
  unsigned char result;
//line 71

//line 71
  result = NeighborhoodP__Neighborhood__insertNode(arg_0x7e5ebe28);
//line 71

//line 71
  return result;
//line 71
}
//line 71
// 93 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
static inline   message_t *UniqueLayerP__SubReceive__receive(message_t *msg)
{
  uint8_t idx = UniqueLayerP__Neighborhood__insertNode(UniqueLayerP__UniqueConfig__getSender(msg));
  uint8_t dsn = UniqueLayerP__UniqueConfig__getSequenceNumber(msg);

  if (UniqueLayerP__NeighborhoodFlag__get(idx))
    {
      uint8_t diff = dsn - UniqueLayerP__receivedNumbers[idx];

      if (diff == 0)
        {
          UniqueLayerP__UniqueConfig__reportChannelError();
          return msg;
        }
    }
  else {
    UniqueLayerP__NeighborhoodFlag__set(idx);
    }
  UniqueLayerP__receivedNumbers[idx] = dsn;

  return UniqueLayerP__RadioReceive__receive(msg);
}

// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   message_t *RandomCollisionLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8){
//line 53
  nx_struct message_t *result;
//line 53

//line 53
  result = UniqueLayerP__SubReceive__receive(arg_0x7e5fbea8);
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 168 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   bool RF230RadioP__Ieee154PacketLayer__requiresAckReply(message_t *arg_0x7e853140){
//line 168
  unsigned char result;
//line 168

//line 168
  result = Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckReply(arg_0x7e853140);
//line 168

//line 168
  return result;
//line 168
}
//line 168
// 64 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   uint16_t RF230RadioP__RadioAlarm__getNow(void){
//line 64
  unsigned short result;
//line 64

//line 64
  result = RadioAlarmP__RadioAlarm__getNow(0U);
//line 64

//line 64
  return result;
//line 64
}
//line 64
// 291 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint16_t RF230RadioP__RandomCollisionConfig__getTransmitBarrier(message_t *msg)
{
  uint16_t time;


  time = RF230RadioP__RadioAlarm__getNow();


  if (RF230RadioP__Ieee154PacketLayer__requiresAckReply(msg)) {
    time += (uint16_t )(32 * (-5 + 16 + 11 + 5) * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL);
    }
  else {
//line 302
    time += (uint16_t )(32 * (-5 + 5) * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL);
    }
  return time;
}

// 57 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionConfig.nc"
inline static   uint16_t RandomCollisionLayerP__Config__getTransmitBarrier(message_t *arg_0x7e884010){
//line 57
  unsigned short result;
//line 57

//line 57
  result = RF230RadioP__RandomCollisionConfig__getTransmitBarrier(arg_0x7e884010);
//line 57

//line 57
  return result;
//line 57
}
//line 57
// 168 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static inline   message_t *RandomCollisionLayerP__SubReceive__receive(message_t *msg)
{
  int16_t delay;

  RandomCollisionLayerP__txBarrier = RandomCollisionLayerP__Config__getTransmitBarrier(msg);
  delay = RandomCollisionLayerP__txBarrier - RandomCollisionLayerP__RadioAlarm__getNow();

  if (delay > 0)
    {
      if (RandomCollisionLayerP__state == RandomCollisionLayerP__STATE_READY)
        {
          RandomCollisionLayerP__RadioAlarm__wait(delay);
          RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_BARRIER;
        }
      else {
        RandomCollisionLayerP__state |= RandomCollisionLayerP__STATE_BARRIER;
        }
    }
  return RandomCollisionLayerP__RadioReceive__receive(msg);
}

// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   message_t *SoftwareAckLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8){
//line 53
  nx_struct message_t *result;
//line 53

//line 53
  result = RandomCollisionLayerP__SubReceive__receive(arg_0x7e5fbea8);
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 281 "/usr/lib/ncc/nesc_nx.h"
static __inline uint16_t __nesc_hton_leuint16(void *target, uint16_t value)
//line 281
{
  uint8_t *base = (uint8_t *)target;

//line 283
  base[0] = value;
  base[1] = value >> 8;
  return value;
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   void MetadataFlagsLayerC__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198){
//line 54
  RF230DriverLayerP__RadioPacket__setPayloadLength(arg_0x7e843010, arg_0x7e843198);
//line 54
}
//line 54
// 100 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline   void MetadataFlagsLayerC__RadioPacket__setPayloadLength(message_t *msg, uint8_t length)
{
  MetadataFlagsLayerC__SubPacket__setPayloadLength(msg, length);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   void TimeStampingLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198){
//line 54
  MetadataFlagsLayerC__RadioPacket__setPayloadLength(arg_0x7e843010, arg_0x7e843198);
//line 54
}
//line 54
// 126 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   void TimeStampingLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length)
{
  TimeStampingLayerP__SubPacket__setPayloadLength(msg, length);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   void PacketLinkLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198){
//line 54
  TimeStampingLayerP__RadioPacket__setPayloadLength(arg_0x7e843010, arg_0x7e843198);
//line 54
}
//line 54
// 250 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline   void PacketLinkLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length)
//line 250
{
  PacketLinkLayerP__SubPacket__setPayloadLength(msg, length);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   void Ieee154PacketLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198){
//line 54
  PacketLinkLayerP__RadioPacket__setPayloadLength(arg_0x7e843010, arg_0x7e843198);
//line 54
}
//line 54
// 115 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__createAckReply(message_t *data, message_t *ack)
{
  ieee154_header_t *header = Ieee154PacketLayerP__getHeader(ack);

//line 118
  Ieee154PacketLayerP__SubPacket__setPayloadLength(ack, Ieee154PacketLayerP__IEEE154_ACK_FRAME_LENGTH);

  __nesc_hton_leuint16((unsigned char *)&header->fcf, Ieee154PacketLayerP__IEEE154_ACK_FRAME_VALUE);
  __nesc_hton_leuint8((unsigned char *)&header->dsn, __nesc_ntoh_leuint8((unsigned char *)&Ieee154PacketLayerP__getHeader(data)->dsn));
}

// 88 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__createAckReply(message_t *arg_0x7e863468, message_t *arg_0x7e863618){
//line 88
  Ieee154PacketLayerP__Ieee154PacketLayer__createAckReply(arg_0x7e863468, arg_0x7e863618);
//line 88
}
//line 88
// 126 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   void RF230RadioP__SoftwareAckConfig__createAckPacket(message_t *data, message_t *ack)
{
  RF230RadioP__Ieee154PacketLayer__createAckReply(data, ack);
}

// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   void SoftwareAckLayerP__SoftwareAckConfig__createAckPacket(message_t *arg_0x7e8a3678, message_t *arg_0x7e8a3828){
//line 80
  RF230RadioP__SoftwareAckConfig__createAckPacket(arg_0x7e8a3678, arg_0x7e8a3828);
//line 80
}
//line 80
// 121 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   bool RF230RadioP__SoftwareAckConfig__requiresAckReply(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__requiresAckReply(msg);
}

// 75 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   bool SoftwareAckLayerP__SoftwareAckConfig__requiresAckReply(message_t *arg_0x7e8a3140){
//line 75
  unsigned char result;
//line 75

//line 75
  result = RF230RadioP__SoftwareAckConfig__requiresAckReply(arg_0x7e8a3140);
//line 75

//line 75
  return result;
//line 75
}
//line 75
// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline   void MetadataFlagsLayerC__PacketFlag__setValue(uint8_t bit, message_t *msg, bool value)
{
  if (value) {
    MetadataFlagsLayerC__PacketFlag__set(bit, msg);
    }
  else {
//line 85
    MetadataFlagsLayerC__PacketFlag__clear(bit, msg);
    }
}

// 45 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   void SoftwareAckLayerP__AckReceivedFlag__setValue(message_t *arg_0x7e30ac60, bool arg_0x7e30ade8){
//line 45
  MetadataFlagsLayerC__PacketFlag__setValue(0U, arg_0x7e30ac60, arg_0x7e30ade8);
//line 45
}
//line 45
// 172 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__CompareA__stop(void)
//line 172
{
//line 172
  * (volatile uint8_t *)0x6F &= ~(1 << 1);
}

// 68 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__stop(void){
//line 68
  HplAtm1281Timer1P__CompareA__stop();
//line 68
}
//line 68
// 74 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__stop(void)
//line 74
{
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__stop();
}

// 73 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   void RadioAlarmP__Alarm__stop(void){
//line 73
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__stop();
//line 73
}
//line 73
// 107 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static inline   void RadioAlarmP__RadioAlarm__cancel(uint8_t id)
{
  for (; 0; ) ;
  for (; 0; ) ;

  RadioAlarmP__Alarm__stop();
  RadioAlarmP__state = RadioAlarmP__STATE_READY;
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   void SoftwareAckLayerP__RadioAlarm__cancel(void){
//line 54
  RadioAlarmP__RadioAlarm__cancel(2U);
//line 54
}
//line 54
// 75 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   bool RF230RadioP__Ieee154PacketLayer__isAckFrame(message_t *arg_0x7e864928){
//line 75
  unsigned char result;
//line 75

//line 75
  result = Ieee154PacketLayerP__Ieee154PacketLayer__isAckFrame(arg_0x7e864928);
//line 75

//line 75
  return result;
//line 75
}
//line 75
// 106 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   bool RF230RadioP__SoftwareAckConfig__isAckPacket(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__isAckFrame(msg);
}

// 62 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   bool SoftwareAckLayerP__SoftwareAckConfig__isAckPacket(message_t *arg_0x7e8a4380){
//line 62
  unsigned char result;
//line 62

//line 62
  result = RF230RadioP__SoftwareAckConfig__isAckPacket(arg_0x7e8a4380);
//line 62

//line 62
  return result;
//line 62
}
//line 62
// 142 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   message_t *SoftwareAckLayerP__SubReceive__receive(message_t *msg)
{
  bool ack = SoftwareAckLayerP__SoftwareAckConfig__isAckPacket(msg);

  for (; 0; ) ;

  if (SoftwareAckLayerP__state == SoftwareAckLayerP__STATE_ACK_WAIT)
    {
      for (; 0; ) ;

      SoftwareAckLayerP__RadioAlarm__cancel();
      SoftwareAckLayerP__AckReceivedFlag__setValue(SoftwareAckLayerP__txMsg, ack);

      SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_READY;
      SoftwareAckLayerP__RadioSend__sendDone(SUCCESS);
    }

  if (ack) {
    return msg;
    }
  if (SoftwareAckLayerP__SoftwareAckConfig__requiresAckReply(msg))
    {
      SoftwareAckLayerP__SoftwareAckConfig__createAckPacket(msg, &SoftwareAckLayerP__ackMsg);


      if (SoftwareAckLayerP__SubSend__send(&SoftwareAckLayerP__ackMsg) == SUCCESS) {
        SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_ACK_SEND;
        }
      else {
//line 170
        for (; 0; ) ;
        }
    }
  return SoftwareAckLayerP__RadioReceive__receive(msg);
}

// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   message_t *RF230DriverLayerP__RadioReceive__receive(message_t *arg_0x7e5fbea8){
//line 53
  nx_struct message_t *result;
//line 53

//line 53
  result = SoftwareAckLayerP__SubReceive__receive(arg_0x7e5fbea8);
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 999 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   void RF230DriverLayerP__PacketLinkQuality__set(message_t *msg, uint8_t value)
{
  RF230DriverLayerP__getMeta(msg)->lqi = value;
}

// 251 "/usr/lib/gcc/avr/3.4.6/../../../../avr/include/util/crc16.h"
//line 250
static __inline uint16_t
_crc_ccitt_update(uint16_t __crc, uint8_t __data)
{
	// Nived : Unsure of what this is doing, need to come back to this
   uint16_t __ret = 0;

   // __asm volatile (
  // "eor    %A0,%1""\n\t"

  // "mov    __tmp_reg__,%A0""\n\t"
  // "swap   %A0""\n\t"
  // "andi   %A0,0xf0""\n\t"
  // "eor    %A0,__tmp_reg__""\n\t"

  // "mov    __tmp_reg__,%B0""\n\t"

  // "mov    %B0,%A0""\n\t"

  // "swap   %A0""\n\t"
  // "andi   %A0,0x0f""\n\t"
  // "eor    __tmp_reg__,%A0""\n\t"

  // "lsr    %A0""\n\t"
  // "eor    %B0,%A0""\n\t"

  // "eor    %A0,%B0""\n\t"
  // "lsl    %A0""\n\t"
  // "lsl    %A0""\n\t"
  // "lsl    %A0""\n\t"
  // "eor    %A0,__tmp_reg__" :

  // "=d"(__ret) :
  // "r"(__data), "0"(__crc) :
  // "r0");

  return __ret;
}

// 82 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/RadioConfig.h"
static __inline uint16_t RF230_CRCBYTE_COMMAND(uint16_t crc, uint8_t data)
{
  return _crc_ccitt_update(crc, data);
}

// 312 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline   bool MessageBufferLayerP__RadioReceive__header(message_t *msg)
{
  bool notFull;


  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 317
    notFull = MessageBufferLayerP__receiveQueueSize < MessageBufferLayerP__RECEIVE_QUEUE_SIZE;
//line 317
    __nesc_atomic_end(__nesc_atomic); }

  return notFull;
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   bool UniqueLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0){
//line 46
  unsigned char result;
//line 46

//line 46
  result = MessageBufferLayerP__RadioReceive__header(arg_0x7e5fb7d0);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 85 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
static inline   bool UniqueLayerP__SubReceive__header(message_t *msg)
{

  return UniqueLayerP__RadioReceive__header(msg);
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   bool RandomCollisionLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0){
//line 46
  unsigned char result;
//line 46

//line 46
  result = UniqueLayerP__SubReceive__header(arg_0x7e5fb7d0);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 163 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static inline   bool RandomCollisionLayerP__SubReceive__header(message_t *msg)
{
  return RandomCollisionLayerP__RadioReceive__header(msg);
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   bool SoftwareAckLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0){
//line 46
  unsigned char result;
//line 46

//line 46
  result = RandomCollisionLayerP__SubReceive__header(arg_0x7e5fb7d0);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 124 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   bool Ieee154PacketLayerP__Ieee154PacketLayer__verifyAckReply(message_t *data, message_t *ack)
{
  ieee154_header_t *header = Ieee154PacketLayerP__getHeader(ack);

  return __nesc_ntoh_leuint8((unsigned char *)&header->dsn) == __nesc_ntoh_leuint8((unsigned char *)&Ieee154PacketLayerP__getHeader(data)->dsn)
   && (__nesc_ntoh_leuint16((unsigned char *)&header->fcf) & Ieee154PacketLayerP__IEEE154_ACK_FRAME_MASK) == Ieee154PacketLayerP__IEEE154_ACK_FRAME_VALUE;
}

// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   bool RF230RadioP__Ieee154PacketLayer__verifyAckReply(message_t *arg_0x7e863be8, message_t *arg_0x7e863d98){
//line 94
  unsigned char result;
//line 94

//line 94
  result = Ieee154PacketLayerP__Ieee154PacketLayer__verifyAckReply(arg_0x7e863be8, arg_0x7e863d98);
//line 94

//line 94
  return result;
//line 94
}
//line 94
// 111 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   bool RF230RadioP__SoftwareAckConfig__verifyAckPacket(message_t *data, message_t *ack)
{
  return RF230RadioP__Ieee154PacketLayer__verifyAckReply(data, ack);
}

// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   bool SoftwareAckLayerP__SoftwareAckConfig__verifyAckPacket(message_t *arg_0x7e8a4970, message_t *arg_0x7e8a4b20){
//line 69
  unsigned char result;
//line 69

//line 69
  result = RF230RadioP__SoftwareAckConfig__verifyAckPacket(arg_0x7e8a4970, arg_0x7e8a4b20);
//line 69

//line 69
  return result;
//line 69
}
//line 69
// 134 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   bool SoftwareAckLayerP__SubReceive__header(message_t *msg)
{
  if (SoftwareAckLayerP__SoftwareAckConfig__isAckPacket(msg)) {
    return SoftwareAckLayerP__state == SoftwareAckLayerP__STATE_ACK_WAIT && SoftwareAckLayerP__SoftwareAckConfig__verifyAckPacket(SoftwareAckLayerP__txMsg, msg);
    }
  else {
//line 139
    return SoftwareAckLayerP__RadioReceive__header(msg);
    }
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioReceive.nc"
inline static   bool RF230DriverLayerP__RadioReceive__header(message_t *arg_0x7e5fb7d0){
//line 46
  unsigned char result;
//line 46

//line 46
  result = SoftwareAckLayerP__SubReceive__header(arg_0x7e5fb7d0);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 88 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint8_t RF230RadioP__RF230DriverConfig__headerPreloadLength(void)
{

  return 7;
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
inline static   uint8_t RF230DriverLayerP__Config__headerPreloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = RF230RadioP__RF230DriverConfig__headerPreloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline rf230_header_t *RF230DriverLayerP__getHeader(message_t *msg)
{
  return (rf230_header_t *)((void *)msg + RF230DriverLayerP__Config__headerLength(msg));
}

// 78 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint8_t RF230RadioP__RF230DriverConfig__maxPayloadLength(void)
{
  return sizeof(rf230packet_header_t ) + 120;
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
inline static   uint8_t RF230DriverLayerP__Config__maxPayloadLength(void){
//line 46
  unsigned char result;
//line 46

//line 46
  result = RF230RadioP__RF230DriverConfig__maxPayloadLength();
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 892 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   uint8_t RF230DriverLayerP__RadioPacket__maxPayloadLength(void)
{
  for (; 0; ) ;

  return RF230DriverLayerP__Config__maxPayloadLength() - sizeof(rf230_header_t );
}

// 177 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static __inline   uint8_t Atm128SpiP__FastSpiByte__write(uint8_t data)
//line 177
{
// Nived : Modifying the spi to link it stm's stuff
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
		Atm128SpiP__Spi__write(data);
  //while (!(* (volatile uint8_t *)(0x2D + 0x20) & 0x80))
  //  ;
  	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
		return (uint8_t) Atm128SpiP__Spi__read();

 // return Atm128SpiP__Spi__read();
}

// 76 "/opt/tinyos-2.x/tos/interfaces/FastSpiByte.nc"
inline static   uint8_t RF230DriverLayerP__FastSpiByte__write(uint8_t arg_0x7e23e3d8){
//line 76
  unsigned char result;
//line 76

//line 76
  result = Atm128SpiP__FastSpiByte__write(arg_0x7e23e3d8);
//line 76

//line 76
  return result;
//line 76
}
//line 76
// 590 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static __inline void RF230DriverLayerP__downloadMessage(void)
{
  uint8_t length;
  uint16_t crc;

  RF230DriverLayerP__SELN__clr();
  RF230DriverLayerP__FastSpiByte__write(RF230_CMD_FRAME_READ);


  length = RF230DriverLayerP__FastSpiByte__write(0);


  if (length >= 3 && length <= RF230DriverLayerP__RadioPacket__maxPayloadLength() + 2)
    {
      uint8_t read;
      uint8_t *data;


      RF230DriverLayerP__FastSpiByte__splitWrite(0);

      data = (uint8_t *)RF230DriverLayerP__getPayload(RF230DriverLayerP__rxMsg);
      __nesc_hton_leuint8((unsigned char *)&RF230DriverLayerP__getHeader(RF230DriverLayerP__rxMsg)->length, length);
      crc = 0;


      length -= 2;

      read = RF230DriverLayerP__Config__headerPreloadLength();
      if (length < read) {
        read = length;
        }
      length -= read;

      do {
          crc = RF230_CRCBYTE_COMMAND(crc, * data++ = RF230DriverLayerP__FastSpiByte__splitReadWrite(0));
        }
      while (--read != 0);

      if (RF230DriverLayerP__RadioReceive__header(RF230DriverLayerP__rxMsg))
        {
          while (length-- != 0)
            crc = RF230_CRCBYTE_COMMAND(crc, * data++ = RF230DriverLayerP__FastSpiByte__splitReadWrite(0));

          crc = RF230_CRCBYTE_COMMAND(crc, RF230DriverLayerP__FastSpiByte__splitReadWrite(0));
          crc = RF230_CRCBYTE_COMMAND(crc, RF230DriverLayerP__FastSpiByte__splitReadWrite(0));

          RF230DriverLayerP__PacketLinkQuality__set(RF230DriverLayerP__rxMsg, RF230DriverLayerP__FastSpiByte__splitRead());
        }
      else {
        crc = 1;
        }
    }
  else {
//line 642
    crc = 1;
    }
  RF230DriverLayerP__SELN__set();
  RF230DriverLayerP__state = RF230DriverLayerP__STATE_RX_ON;
//line 663
  RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_NONE;


  if (crc == 0) {
    RF230DriverLayerP__rxMsg = RF230DriverLayerP__RadioReceive__receive(RF230DriverLayerP__rxMsg);
    }
}

// 135 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint16_t RF230RadioP__SoftwareAckConfig__getAckTimeout(void)
{
  return (uint16_t )(800 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   uint16_t SoftwareAckLayerP__SoftwareAckConfig__getAckTimeout(void){
//line 43
  unsigned short result;
//line 43

//line 43
  result = RF230RadioP__SoftwareAckConfig__getAckTimeout();
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   void SoftwareAckLayerP__RadioAlarm__wait(uint16_t arg_0x7e8481b8){
//line 49
  RadioAlarmP__RadioAlarm__wait(2U, arg_0x7e8481b8);
//line 49
}
//line 49
//line 44
inline static   bool SoftwareAckLayerP__RadioAlarm__isFree(void){
//line 44
  unsigned char result;
//line 44

//line 44
  result = RadioAlarmP__RadioAlarm__isFree(2U);
//line 44

//line 44
  return result;
//line 44
}
//line 44
// 132 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   bool Ieee154PacketLayerP__Ieee154PacketLayer__getAckRequired(message_t *msg)
{
  return __nesc_ntoh_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->fcf) & (1 << IEEE154_FCF_ACK_REQ);
}

//line 198
static inline   bool Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckWait(message_t *msg)
{
  return Ieee154PacketLayerP__Ieee154PacketLayer__getAckRequired(msg)
   && Ieee154PacketLayerP__Ieee154PacketLayer__isDataFrame(msg)
   && Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(msg) != 0xFFFF;
}

// 162 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   bool RF230RadioP__Ieee154PacketLayer__requiresAckWait(message_t *arg_0x7e855bc8){
//line 162
  unsigned char result;
//line 162

//line 162
  result = Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckWait(arg_0x7e855bc8);
//line 162

//line 162
  return result;
//line 162
}
//line 162
// 101 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   bool RF230RadioP__SoftwareAckConfig__requiresAckWait(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__requiresAckWait(msg);
}

// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   bool SoftwareAckLayerP__SoftwareAckConfig__requiresAckWait(message_t *arg_0x7e8a6d68){
//line 55
  unsigned char result;
//line 55

//line 55
  result = RF230RadioP__SoftwareAckConfig__requiresAckWait(arg_0x7e8a6d68);
//line 55

//line 55
  return result;
//line 55
}
//line 55
// 97 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   void SoftwareAckLayerP__SubSend__sendDone(error_t error)
{
  if (SoftwareAckLayerP__state == SoftwareAckLayerP__STATE_ACK_SEND)
    {

      for (; 0; ) ;

      SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_READY;
    }
  else
    {
      for (; 0; ) ;
      for (; 0; ) ;

      if (error == SUCCESS && SoftwareAckLayerP__SoftwareAckConfig__requiresAckWait(SoftwareAckLayerP__txMsg) && SoftwareAckLayerP__RadioAlarm__isFree())
        {
          SoftwareAckLayerP__RadioAlarm__wait(SoftwareAckLayerP__SoftwareAckConfig__getAckTimeout());
          SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_ACK_WAIT;
        }
      else
        {
          SoftwareAckLayerP__state = SoftwareAckLayerP__STATE_READY;
          SoftwareAckLayerP__RadioSend__sendDone(error);
        }
    }
}

// 56 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   void RF230DriverLayerP__RadioSend__sendDone(error_t arg_0x7e390a40){
//line 56
  SoftwareAckLayerP__SubSend__sendDone(arg_0x7e390a40);
//line 56
}
//line 56
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   void TimeStampingLayerP__TimeStampFlag__clear(message_t *arg_0x7e309868){
//line 55
  MetadataFlagsLayerC__PacketFlag__clear(1U, arg_0x7e309868);
//line 55
}
//line 55
// 77 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   void TimeStampingLayerP__PacketTimeStampRadio__clear(message_t *msg)
{
  TimeStampingLayerP__TimeStampFlag__clear(msg);
}

// 70 "/opt/tinyos-2.x/tos/interfaces/PacketTimeStamp.nc"
inline static   void RF230DriverLayerP__PacketTimeStamp__clear(message_t *arg_0x7e945638){
//line 70
  TimeStampingLayerP__PacketTimeStampRadio__clear(arg_0x7e945638);
//line 70
}
//line 70
// 136 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   uint8_t TimeStampingLayerP__RadioPacket__metadataLength(message_t *msg)
{
  return TimeStampingLayerP__SubPacket__metadataLength(msg) + sizeof(timestamp_metadata_t );
}

//line 60
static inline timestamp_metadata_t *TimeStampingLayerP__getMeta(message_t *msg)
{
  return (timestamp_metadata_t *)((void *)msg + sizeof(message_t ) - TimeStampingLayerP__RadioPacket__metadataLength(msg));
}

// 50 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   void TimeStampingLayerP__TimeStampFlag__set(message_t *arg_0x7e309370){
//line 50
  MetadataFlagsLayerC__PacketFlag__set(1U, arg_0x7e309370);
//line 50
}
//line 50
// 82 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   void TimeStampingLayerP__PacketTimeStampRadio__set(message_t *msg, uint32_t value)
{
  TimeStampingLayerP__TimeStampFlag__set(msg);
  TimeStampingLayerP__getMeta(msg)->timestamp = value;
}

// 78 "/opt/tinyos-2.x/tos/interfaces/PacketTimeStamp.nc"
inline static   void RF230DriverLayerP__PacketTimeStamp__set(message_t *arg_0x7e945b60, RF230DriverLayerP__PacketTimeStamp__size_type arg_0x7e945cf0){
//line 78
  TimeStampingLayerP__PacketTimeStampRadio__set(arg_0x7e945b60, arg_0x7e945cf0);
//line 78
}
//line 78
// 64 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
inline static   /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__size_type /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__get(void){
//line 64
  unsigned long result;
//line 64

//line 64
  result = /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__get();
//line 64

//line 64
  return result;
//line 64
}
//line 64
// 53 "/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc"
static inline   uint32_t /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__LocalTime__get(void)
{
  return /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__get();
}

// 61 "/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc"
inline static   uint32_t RF230DriverLayerP__LocalTime__get(void){
//line 61
  unsigned long result;
//line 61

//line 61
  result = /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__LocalTime__get();
//line 61

//line 61
  return result;
//line 61
}
//line 61
// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   void RF230DriverLayerP__RSSIFlag__clear(message_t *arg_0x7e309868){
//line 55
  MetadataFlagsLayerC__PacketFlag__clear(3U, arg_0x7e309868);
//line 55
}
//line 55
// 944 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   void RF230DriverLayerP__PacketRSSI__clear(message_t *msg)
{
  RF230DriverLayerP__RSSIFlag__clear(msg);
}

// 50 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   void RF230DriverLayerP__RSSIFlag__set(message_t *arg_0x7e309370){
//line 50
  MetadataFlagsLayerC__PacketFlag__set(3U, arg_0x7e309370);
//line 50
}
//line 50





inline static   void RF230DriverLayerP__TransmitPowerFlag__clear(message_t *arg_0x7e309868){
//line 55
  MetadataFlagsLayerC__PacketFlag__clear(2U, arg_0x7e309868);
//line 55
}
//line 55
// 949 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   void RF230DriverLayerP__PacketRSSI__set(message_t *msg, uint8_t value)
{

  RF230DriverLayerP__TransmitPowerFlag__clear(msg);

  RF230DriverLayerP__RSSIFlag__set(msg);
  RF230DriverLayerP__getMeta(msg)->rssi = value;
}

//line 685
static inline void RF230DriverLayerP__serviceRadio(void)
{
  if (RF230DriverLayerP__isSpiAcquired())
    {
      uint16_t time;
      uint32_t time32;
      uint8_t irq;
      uint8_t temp;

      { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 694
        time = RF230DriverLayerP__capturedTime;
//line 694
        __nesc_atomic_end(__nesc_atomic); }
      RF230DriverLayerP__radioIrq = FALSE;
      irq = RF230DriverLayerP__readRegister(RF230_IRQ_STATUS);
//line 727
      if (irq & RF230_IRQ_PLL_LOCK)
        {
          if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TURNON || RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_CHANNEL)
            {
              for (; 0; ) ;

              RF230DriverLayerP__state = RF230DriverLayerP__STATE_RX_ON;
              RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_SIGNAL_DONE;
            }
          else {
//line 736
            if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TRANSMIT)
              {
                for (; 0; ) ;
              }
            else {
              for (; 0; ) ;
              }
            }
        }
//line 744
      if (irq & RF230_IRQ_RX_START)
        {
          if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_CCA)
            {
              RF230DriverLayerP__RadioCCA__done(FAIL);
              RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_NONE;
            }

          if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_NONE)
            {
              for (; 0; ) ;


              if (irq == RF230_IRQ_RX_START)
                {
                  temp = RF230DriverLayerP__readRegister(RF230_PHY_RSSI) & RF230_RSSI_MASK;
                  RF230DriverLayerP__rssiBusy += temp - (RF230DriverLayerP__rssiBusy >> 2);

                  RF230DriverLayerP__PacketRSSI__set(RF230DriverLayerP__rxMsg, temp);
                }
              else
                {
                  RF230DriverLayerP__PacketRSSI__clear(RF230DriverLayerP__rxMsg);
                }










              if (irq == RF230_IRQ_RX_START)
                {
                  time32 = RF230DriverLayerP__LocalTime__get();
                  time32 += (int16_t )(time - RF230DriverLayerP__RX_SFD_DELAY) - (int16_t )time32;
                  RF230DriverLayerP__PacketTimeStamp__set(RF230DriverLayerP__rxMsg, time32);
                }
              else {
                RF230DriverLayerP__PacketTimeStamp__clear(RF230DriverLayerP__rxMsg);
                }
              RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_RECEIVE;
            }
          else {
            for (; 0; ) ;
            }
        }
      if (irq & RF230_IRQ_TRX_END)
        {
          if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_TRANSMIT)
            {
              for (; 0; ) ;

              RF230DriverLayerP__state = RF230DriverLayerP__STATE_RX_ON;
              RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_NONE;
              RF230DriverLayerP__RadioSend__sendDone(SUCCESS);


              for (; 0; ) ;
            }
          else {
//line 806
            if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_RECEIVE)
              {
                for (; 0; ) ;

                if (RF230DriverLayerP__state == RF230DriverLayerP__STATE_PLL_ON_2_RX_ON)
                  {
                    for (; 0; ) ;

                    RF230DriverLayerP__writeRegister(RF230_TRX_STATE, RF230_RX_ON);
                    RF230DriverLayerP__state = RF230DriverLayerP__STATE_RX_ON;
                  }
                else
                  {

                    RF230DriverLayerP__rssiClear += (RF230DriverLayerP__readRegister(RF230_PHY_RSSI) & RF230_RSSI_MASK) - (RF230DriverLayerP__rssiClear >> 2);
                  }

                RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_DOWNLOAD;
              }
            else {
              for (; 0; ) ;
              }
            }
        }
    }
}











static inline   void RF230DriverLayerP__Tasklet__run(void)
{
  if (RF230DriverLayerP__radioIrq) {
    RF230DriverLayerP__serviceRadio();
    }
  if (RF230DriverLayerP__cmd != RF230DriverLayerP__CMD_NONE)
    {
      if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_DOWNLOAD) {
        RF230DriverLayerP__downloadMessage();
        }
      else {
//line 852
        if (RF230DriverLayerP__CMD_TURNOFF <= RF230DriverLayerP__cmd && RF230DriverLayerP__cmd <= RF230DriverLayerP__CMD_TURNON) {
          RF230DriverLayerP__changeState();
          }
        else {
//line 854
          if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_CHANNEL) {
            RF230DriverLayerP__changeChannel();
            }
          }
        }
//line 857
      if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_SIGNAL_DONE)
        {
          RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_NONE;
          RF230DriverLayerP__RadioState__done();
        }
    }

  if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_NONE && RF230DriverLayerP__state == RF230DriverLayerP__STATE_RX_ON && !RF230DriverLayerP__radioIrq) {
    RF230DriverLayerP__RadioSend__ready();
    }
  if (RF230DriverLayerP__cmd == RF230DriverLayerP__CMD_NONE) {
    RF230DriverLayerP__SpiResource__release();
    }
}

// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
inline static   void TaskletC__Tasklet__run(void){
//line 48
  RF230DriverLayerP__Tasklet__run();
//line 48
  MessageBufferLayerP__Tasklet__run();
//line 48
  RadioAlarmP__Tasklet__run();
//line 48
}
//line 48
// 148 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   uint8_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__isOwner(uint8_t id)
//line 148
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 149
    {
      if (/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId == id && /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state == /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_BUSY) {
          unsigned char __nesc_temp =
//line 150
          TRUE;

          {
//line 150
            __nesc_atomic_end(__nesc_atomic);
//line 150
            return __nesc_temp;
          }
        }
      else
//line 151
        {
          unsigned char __nesc_temp =
//line 151
          FALSE;

          {
//line 151
            __nesc_atomic_end(__nesc_atomic);
//line 151
            return __nesc_temp;
          }
        }
    }
//line 154
    __nesc_atomic_end(__nesc_atomic); }
}

// 128 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   bool Atm128SpiP__ResourceArbiter__isOwner(uint8_t arg_0x7e11b410){
//line 128
  unsigned char result;
//line 128

//line 128
  result = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__isOwner(arg_0x7e11b410);
//line 128

//line 128
  return result;
//line 128
}
//line 128
// 380 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline   uint8_t Atm128SpiP__Resource__isOwner(uint8_t id)
//line 380
{
  return Atm128SpiP__ResourceArbiter__isOwner(id);
}

// 128 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   bool RF230DriverLayerP__SpiResource__isOwner(void){
//line 128
  unsigned char result;
//line 128

//line 128
  result = Atm128SpiP__Resource__isOwner(0U);
//line 128

//line 128
  return result;
//line 128
}
//line 128
// 169 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__immediateRequested(uint8_t id)
//line 169
{
}

// 61 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
inline static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__immediateRequested(uint8_t arg_0x7e6dacd0){
//line 61
    /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__immediateRequested(arg_0x7e6dacd0);
//line 61
}
//line 61
// 84 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__immediateRequest(uint8_t id)
//line 84
{
  /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__immediateRequested(/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId);
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 86
    {
      if (/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state == /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_IDLE) {
          /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_BUSY;
          /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId = id;
          /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceConfigure__configure(/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId);
          {
            unsigned char __nesc_temp =
//line 91
            SUCCESS;

            {
//line 91
              __nesc_atomic_end(__nesc_atomic);
//line 91
              return __nesc_temp;
            }
          }
        }
//line 93
      {
        unsigned char __nesc_temp =
//line 93
        FAIL;

        {
//line 93
          __nesc_atomic_end(__nesc_atomic);
//line 93
          return __nesc_temp;
        }
      }
    }
//line 96
    __nesc_atomic_end(__nesc_atomic); }
}

// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t Atm128SpiP__ResourceArbiter__immediateRequest(uint8_t arg_0x7e11b410){
//line 97
  unsigned char result;
//line 97

//line 97
  result = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__immediateRequest(arg_0x7e11b410);
//line 97

//line 97
  return result;
//line 97
}
//line 97
// 353 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline   error_t Atm128SpiP__Resource__immediateRequest(uint8_t id)
//line 353
{
  error_t result = Atm128SpiP__ResourceArbiter__immediateRequest(id);

//line 355
  if (result == SUCCESS) {
      Atm128SpiP__startSpi();
    }
  return result;
}

// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t RF230DriverLayerP__SpiResource__immediateRequest(void){
//line 97
  unsigned char result;
//line 97

//line 97
  result = Atm128SpiP__Resource__immediateRequest(0U);
//line 97

//line 97
  return result;
//line 97
}
//line 97
// 173 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__setMasterBit(bool isMaster)
//line 173
{
  if (isMaster) {
      //* (volatile uint8_t *)(0x2C + 0x20) |= 1 << 4;
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    }
  else {
      //* (volatile uint8_t *)(0x2C + 0x20) &= ~(1 << 4);
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
    }
}

// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit1*/HplAtm128GeneralIOPinP$9__IO__makeOutput(void)
//line 61
{
//line 61
  //* (volatile uint8_t *)36U |= 1 << 1;
  mf_gpio_makeOutput(5);
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplAtm128SpiP__SCK__makeOutput(void){
//line 46
  /*HplAtm128GeneralIOC.PortB.Bit1*/HplAtm128GeneralIOPinP$9__IO__makeOutput();
//line 46
}
//line 46
// 59 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit3*/HplAtm128GeneralIOPinP$11__IO__makeInput(void)
//line 59
{
//line 59
  //* (volatile uint8_t *)36U &= ~(1 << 3);
  mf_gpio_makeInput(6);
}

// 44 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplAtm128SpiP__MISO__makeInput(void){
//line 44
  /*HplAtm128GeneralIOC.PortB.Bit3*/HplAtm128GeneralIOPinP$11__IO__makeInput();
//line 44
}
//line 44
// 61 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortB.Bit2*/HplAtm128GeneralIOPinP$10__IO__makeOutput(void)
//line 61
{
//line 61
  //* (volatile uint8_t *)36U |= 1 << 2;
  mf_gpio_makeOutput(7);
}

// 46 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void HplAtm128SpiP__MOSI__makeOutput(void){
//line 46
  /*HplAtm128GeneralIOC.PortB.Bit2*/HplAtm128GeneralIOPinP$10__IO__makeOutput();
//line 46
}
//line 46
// 96 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__initMaster(void)
//line 96
{
  HplAtm128SpiP__MOSI__makeOutput();
  HplAtm128SpiP__MISO__makeInput();
  HplAtm128SpiP__SCK__makeOutput();
  HplAtm128SpiP__SPI__setMasterBit(TRUE);
}

// 83 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__initMaster(void){
//line 83
  HplAtm128SpiP__SPI__initMaster();
//line 83
}
//line 83
// 230 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__setMasterDoubleSpeed(bool on)
//line 230
{
  if (on) {
      * (volatile uint8_t *)(0x2D + 0x20) |= 1 << 0;
    }
  else {
      * (volatile uint8_t *)(0x2D + 0x20) &= ~(1 << 0);
    }
}

// 142 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__setMasterDoubleSpeed(bool arg_0x7e100680){
//line 142
  HplAtm128SpiP__SPI__setMasterDoubleSpeed(arg_0x7e100680);
//line 142
}
//line 142
// 186 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__setClockPolarity(bool highWhenIdle)
//line 186
{
  if (highWhenIdle) {
      * (volatile uint8_t *)(0x2C + 0x20) |= 1 << 3;
    }
  else {
      * (volatile uint8_t *)(0x2C + 0x20) &= ~(1 << 3);
    }
}

// 125 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__setClockPolarity(bool arg_0x7e111490){
//line 125
  HplAtm128SpiP__SPI__setClockPolarity(arg_0x7e111490);
//line 125
}
//line 125
// 200 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__setClockPhase(bool sampleOnTrailing)
//line 200
{
  if (sampleOnTrailing) {
      * (volatile uint8_t *)(0x2C + 0x20) |= 1 << 2;
    }
  else {
      * (volatile uint8_t *)(0x2C + 0x20) &= ~(1 << 2);
    }
}

// 128 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__setClockPhase(bool arg_0x7e111c70){
//line 128
  HplAtm128SpiP__SPI__setClockPhase(arg_0x7e111c70);
//line 128
}
//line 128
// 217 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static inline   void HplAtm128SpiP__SPI__setClock(uint8_t v)
//line 217
{
  v &= 1 | 0;
  * (volatile uint8_t *)(0x2C + 0x20) = (* (volatile uint8_t *)(0x2C + 0x20) & ~(1 | 0)) | v;
}

// 131 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__setClock(uint8_t arg_0x7e110480){
//line 131
  HplAtm128SpiP__SPI__setClock(arg_0x7e110480);
//line 131
}
//line 131
// 64 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline   bool /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEnqueued(resource_client_id_t id)
//line 64
{
  /* atomic removed: atomic calls only */
//line 65
  {
    unsigned char __nesc_temp =
//line 65
    /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ[id] != /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY || /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qTail == id;

//line 65
    return __nesc_temp;
  }
}

//line 82
static inline   error_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__enqueue(resource_client_id_t id)
//line 82
{
  /* atomic removed: atomic calls only */
//line 83
  {
    if (!/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__isEnqueued(id)) {
        if (/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead == /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY) {
          /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qHead = id;
          }
        else {
//line 88
          /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ[/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qTail] = id;
          }
//line 89
        /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__qTail = id;
        {
          unsigned char __nesc_temp =
//line 90
          SUCCESS;

//line 90
          return __nesc_temp;
        }
      }
//line 92
    {
      unsigned char __nesc_temp =
//line 92
      EBUSY;

//line 92
      return __nesc_temp;
    }
  }
}

// 79 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
inline static   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__enqueue(resource_client_id_t arg_0x7e6f01e0){
//line 79
  unsigned char result;
//line 79

//line 79
  result = /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__FcfsQueue__enqueue(arg_0x7e6f01e0);
//line 79

//line 79
  return result;
//line 79
}
//line 79
// 167 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__requested(uint8_t id)
//line 167
{
}

// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
inline static   void /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__requested(uint8_t arg_0x7e6dacd0){
//line 53
    /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__default__requested(arg_0x7e6dacd0);
//line 53
}
//line 53
// 71 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   error_t /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__request(uint8_t id)
//line 71
{
  /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ResourceRequested__requested(/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__resId);
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 73
    {
      if (/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state == /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_IDLE) {
          /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_GRANTING;
          /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__reqResId = id;
          /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__postTask();
          {
            unsigned char __nesc_temp =
//line 78
            SUCCESS;

            {
//line 78
              __nesc_atomic_end(__nesc_atomic);
//line 78
              return __nesc_temp;
            }
          }
        }
//line 80
      {
        unsigned char __nesc_temp =
//line 80
        /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Queue__enqueue(id);

        {
//line 80
          __nesc_atomic_end(__nesc_atomic);
//line 80
          return __nesc_temp;
        }
      }
    }
//line 83
    __nesc_atomic_end(__nesc_atomic); }
}

// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t Atm128SpiP__ResourceArbiter__request(uint8_t arg_0x7e11b410){
//line 88
  unsigned char result;
//line 88

//line 88
  result = /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__Resource__request(arg_0x7e11b410);
//line 88

//line 88
  return result;
//line 88
}
//line 88
// 61 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__timer_size /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__get(void){
//line 61
  unsigned short result;
//line 61

//line 61
  result = HplAtm1281Timer1P__Timer__get();
//line 61

//line 61
  return result;
//line 61
}
//line 61
// 50 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc"
static inline   /*CounterOne16C.NCounter*/Atm128CounterC$0__timer_size /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__get(void)
{
  return /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__get();
}

// 64 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
inline static   /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__get(void){
//line 64
  unsigned short result;
//line 64

//line 64
  result = /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__get();
//line 64

//line 64
  return result;
//line 64
}
//line 64
// 145 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   uint8_t HplAtm1281Timer1P__TimerCtrl__getInterruptFlag(void)
//line 145
{
  return * (volatile uint8_t *)(0x16 + 0x20);
}

//line 176
static inline   bool HplAtm1281Timer1P__Timer__test(void)
//line 176
{
  //return ((Atm128_TIFR_t )HplAtm1281Timer1P__TimerCtrl__getInterruptFlag()).bits.tov;
  return 0;
}

// 87 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   bool /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__test(void){
//line 87
  unsigned char result;
//line 87

//line 87
  result = HplAtm1281Timer1P__Timer__test();
//line 87

//line 87
  return result;
//line 87
}
//line 87
// 55 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc"
static inline   bool /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__isOverflowPending(void)
{
  return /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__test();
}

// 71 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
inline static   bool /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__isOverflowPending(void){
//line 71
  unsigned char result;
//line 71

//line 71
  result = /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__isOverflowPending();
//line 71

//line 71
  return result;
//line 71
}
//line 71
// 214 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__CompareA__set(uint16_t t)
//line 214
{
//line 214
  * (volatile uint16_t *)0x88 = t;
}

// 54 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__set(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__size_type arg_0x7e517d90){
//line 54
  HplAtm1281Timer1P__CompareA__set(arg_0x7e517d90);
//line 54
}
//line 54
// 160 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__CompareA__reset(void)
//line 160
{
//line 160
  * (volatile uint8_t *)(0x16 + 0x20) = 1 << 1;
}

// 62 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__reset(void){
//line 62
  HplAtm1281Timer1P__CompareA__reset();
//line 62
}
//line 62
// 166 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   void HplAtm1281Timer1P__CompareA__start(void)
//line 166
{
//line 166
  * (volatile uint8_t *)0x6F |= 1 << 1;
}

// 65 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__start(void){
//line 65
  HplAtm1281Timer1P__CompareA__start();
//line 65
}
//line 65
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t MessageBufferLayerP__sendTask__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(MessageBufferLayerP__sendTask);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   bool RF230DriverLayerP__TransmitPowerFlag__get(message_t *arg_0x7e30a758){
//line 40
  unsigned char result;
//line 40

//line 40
  result = MetadataFlagsLayerC__PacketFlag__get(2U, arg_0x7e30a758);
//line 40

//line 40
  return result;
//line 40
}
//line 40
// 911 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   bool RF230DriverLayerP__PacketTransmitPower__isSet(message_t *msg)
{
  return RF230DriverLayerP__TransmitPowerFlag__get(msg);
}

static inline   uint8_t RF230DriverLayerP__PacketTransmitPower__get(message_t *msg)
{
  return RF230DriverLayerP__getMeta(msg)->power;
}

// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   bool RF230RadioP__Ieee154PacketLayer__isDataFrame(message_t *arg_0x7e866e10){
//line 63
  unsigned char result;
//line 63

//line 63
  result = Ieee154PacketLayerP__Ieee154PacketLayer__isDataFrame(arg_0x7e866e10);
//line 63

//line 63
  return result;
//line 63
}
//line 63
// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   bool RF230RadioP__RF230DriverConfig__requiresRssiCca(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__isDataFrame(msg);
}

// 65 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverConfig.nc"
inline static   bool RF230DriverLayerP__Config__requiresRssiCca(message_t *arg_0x7e8b0658){
//line 65
  unsigned char result;
//line 65

//line 65
  result = RF230RadioP__RF230DriverConfig__requiresRssiCca(arg_0x7e8b0658);
//line 65

//line 65
  return result;
//line 65
}
//line 65
// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   bool RF230DriverLayerP__TimeSyncFlag__get(message_t *arg_0x7e30a758){
//line 40
  unsigned char result;
//line 40

//line 40
  result = MetadataFlagsLayerC__PacketFlag__get(4U, arg_0x7e30a758);
//line 40

//line 40
  return result;
//line 40
}
//line 40
// 960 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   bool RF230DriverLayerP__PacketTimeSyncOffset__isSet(message_t *msg)
{
  return RF230DriverLayerP__TimeSyncFlag__get(msg);
}

static inline   uint8_t RF230DriverLayerP__PacketTimeSyncOffset__get(message_t *msg)
{
  return RF230DriverLayerP__RadioPacket__headerLength(msg) + RF230DriverLayerP__RadioPacket__payloadLength(msg) - sizeof(timesync_absolute_t );
}

// 64 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
inline static   uint16_t RF230DriverLayerP__RadioAlarm__getNow(void){
//line 64
  unsigned short result;
//line 64

//line 64
  result = RadioAlarmP__RadioAlarm__getNow(3U);
//line 64

//line 64
  return result;
//line 64
}
//line 64
// 301 "/usr/lib/ncc/nesc_nx.h"
static __inline uint32_t __nesc_hton_uint32(void *target, uint32_t value)
//line 301
{
  uint8_t *base = (uint8_t *)target;

//line 303
  base[3] = value;
  base[2] = value >> 8;
  base[1] = value >> 16;
  base[0] = value >> 24;
  return value;
}

//line 326
static __inline int32_t __nesc_hton_int32(void *target, int32_t value)
//line 326
{
//line 326
  __nesc_hton_uint32(target, value);
//line 326
  return value;
}

//line 294
static __inline uint32_t __nesc_ntoh_uint32(const void *source)
//line 294
{
  const uint8_t *base = (const uint8_t *)source;

//line 296
  return ((((uint32_t )base[0] << 24) | (
  (uint32_t )base[1] << 16)) | (
  (uint32_t )base[2] << 8)) | base[3];
}

//line 326
static __inline int32_t __nesc_ntoh_int32(const void *source)
//line 326
{
//line 326
  return __nesc_ntoh_uint32(source);
}

// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t RandomCollisionLayerP__calcNextRandom__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(RandomCollisionLayerP__calcNextRandom);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 266 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint16_t RF230RadioP__RandomCollisionConfig__getMinimumBackoff(void)
{
  return (uint16_t )(320 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL);
}

// 51 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionConfig.nc"
inline static   uint16_t RandomCollisionLayerP__Config__getMinimumBackoff(void){
//line 51
  unsigned short result;
//line 51

//line 51
  result = RF230RadioP__RandomCollisionConfig__getMinimumBackoff();
//line 51

//line 51
  return result;
//line 51
}
//line 51
// 310 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline
//line 309
void Atm128SpiP__SpiPacket__default__sendDone(
uint8_t *_txbuffer, uint8_t *_rxbuffer,
uint16_t _length, error_t _success)
//line 311
{
}

// 82 "/opt/tinyos-2.x/tos/interfaces/SpiPacket.nc"
inline static   void Atm128SpiP__SpiPacket__sendDone(uint8_t *arg_0x7e132648, uint8_t *arg_0x7e1327f0, uint16_t arg_0x7e132980, error_t arg_0x7e132b18){
//line 82
  Atm128SpiP__SpiPacket__default__sendDone(arg_0x7e132648, arg_0x7e1327f0, arg_0x7e132980, arg_0x7e132b18);
//line 82
}
//line 82
// 255 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline  void Atm128SpiP__zeroTask__runTask(void)
//line 255
{
  uint16_t myLen;
  uint8_t *rx;
  uint8_t *tx;

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 260
    {
      myLen = Atm128SpiP__len;
      rx = Atm128SpiP__rxBuffer;
      tx = Atm128SpiP__txBuffer;
      Atm128SpiP__rxBuffer = (uint8_t *)0;
      Atm128SpiP__txBuffer = (uint8_t *)0;
      Atm128SpiP__len = 0;
      Atm128SpiP__pos = 0;
      Atm128SpiP__SpiPacket__sendDone(tx, rx, myLen, SUCCESS);
    }
//line 269
    __nesc_atomic_end(__nesc_atomic); }
}

// 89 "/opt/tinyos-2.x/tos/system/RandomMlcgC.nc"
static inline   uint16_t RandomMlcgC__Random__rand16(void)
//line 89
{
  return (uint16_t )RandomMlcgC__Random__rand32();
}

// 52 "/opt/tinyos-2.x/tos/interfaces/Random.nc"
inline static   uint16_t RandomCollisionLayerP__Random__rand16(void){
//line 52
  unsigned short result;
//line 52

//line 52
  result = RandomMlcgC__Random__rand16();
//line 52

//line 52
  return result;
//line 52
}
//line 52
// 78 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static inline  void RandomCollisionLayerP__calcNextRandom__runTask(void)
{
  uint16_t a = RandomCollisionLayerP__Random__rand16();

//line 81
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 81
    RandomCollisionLayerP__nextRandom = a;
//line 81
    __nesc_atomic_end(__nesc_atomic); }
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t MetadataFlagsLayerC__SubPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = RF230DriverLayerP__RadioPacket__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 95 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline   uint8_t MetadataFlagsLayerC__RadioPacket__payloadLength(message_t *msg)
{
  return MetadataFlagsLayerC__SubPacket__payloadLength(msg);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t TimeStampingLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = MetadataFlagsLayerC__RadioPacket__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 121 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   uint8_t TimeStampingLayerP__RadioPacket__payloadLength(message_t *msg)
{
  return TimeStampingLayerP__SubPacket__payloadLength(msg);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t PacketLinkLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = TimeStampingLayerP__RadioPacket__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 246 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline   uint8_t PacketLinkLayerP__RadioPacket__payloadLength(message_t *msg)
//line 246
{
  return PacketLinkLayerP__SubPacket__payloadLength(msg);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t Ieee154PacketLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = PacketLinkLayerP__RadioPacket__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 271 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   uint8_t Ieee154PacketLayerP__RadioPacket__payloadLength(message_t *msg)
{
  return Ieee154PacketLayerP__SubPacket__payloadLength(msg) - sizeof(ieee154_header_t );
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t TinyosNetworkLayerC__SubPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = Ieee154PacketLayerP__RadioPacket__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 96 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   uint8_t TinyosNetworkLayerC__Ieee154Packet__payloadLength(message_t *msg)
{
  return TinyosNetworkLayerC__SubPacket__payloadLength(msg);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t Ieee154MessageLayerC__RadioPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = TinyosNetworkLayerC__Ieee154Packet__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc"
static inline  uint8_t Ieee154MessageLayerC__Packet__payloadLength(message_t *msg)
{
  return Ieee154MessageLayerC__RadioPacket__payloadLength(msg);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t TinyosNetworkLayerC__SubPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = Ieee154PacketLayerP__RadioPacket__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 91 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   uint8_t TinyosNetworkLayerC__Ieee154Packet__headerLength(message_t *msg)
{
  return TinyosNetworkLayerC__SubPacket__headerLength(msg);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t Ieee154MessageLayerC__RadioPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = TinyosNetworkLayerC__Ieee154Packet__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 57 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc"
static inline void *Ieee154MessageLayerC__getPayload(message_t *msg)
{
  return (void *)msg + Ieee154MessageLayerC__RadioPacket__headerLength(msg);
}

//line 152
static inline   message_t *Ieee154MessageLayerC__Ieee154Receive__default__receive(message_t *msg, void *payload, uint8_t len)
{
  return msg;
}

// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
inline static  message_t *Ieee154MessageLayerC__Ieee154Receive__receive(message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08){
//line 78
  nx_struct message_t *result;
//line 78

//line 78
  result = Ieee154MessageLayerC__Ieee154Receive__default__receive(arg_0x7eaf2ae0, arg_0x7eaf2c80, arg_0x7eaf2e08);
//line 78

//line 78
  return result;
//line 78
}
//line 78
// 72 "/opt/tinyos-2.x/tos/system/ActiveMessageAddressC.nc"
static inline   am_addr_t ActiveMessageAddressC__ActiveMessageAddress__amAddress(void)
//line 72
{
  return ActiveMessageAddressC__amAddress();
}

// 50 "/opt/tinyos-2.x/tos/interfaces/ActiveMessageAddress.nc"
inline static   am_addr_t Ieee154PacketLayerP__ActiveMessageAddress__amAddress(void){
//line 50
  unsigned short result;
//line 50

//line 50
  result = ActiveMessageAddressC__ActiveMessageAddress__amAddress();
//line 50

//line 50
  return result;
//line 50
}
//line 50
// 218 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline  ieee154_saddr_t Ieee154PacketLayerP__Ieee154Packet__address(void)
{
  return Ieee154PacketLayerP__ActiveMessageAddress__amAddress();
}

static inline  ieee154_saddr_t Ieee154PacketLayerP__Ieee154Packet__destination(message_t *msg)
{
  return Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(msg);
}

//line 243
static inline  bool Ieee154PacketLayerP__Ieee154Packet__isForMe(message_t *msg)
{
  ieee154_saddr_t addr = Ieee154PacketLayerP__Ieee154Packet__destination(msg);

//line 246
  return addr == Ieee154PacketLayerP__Ieee154Packet__address() || addr == IEEE154_BROADCAST_ADDR;
}

// 47 "/opt/tinyos-2.x/tos/interfaces/Ieee154Packet.nc"
inline static  bool Ieee154MessageLayerC__Ieee154Packet__isForMe(message_t *arg_0x7e8d64c8){
//line 47
  unsigned char result;
//line 47

//line 47
  result = Ieee154PacketLayerP__Ieee154Packet__isForMe(arg_0x7e8d64c8);
//line 47

//line 47
  return result;
//line 47
}
//line 47
// 143 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc"
static inline  message_t *Ieee154MessageLayerC__SubReceive__receive(message_t *msg)
{
  if (Ieee154MessageLayerC__Ieee154Packet__isForMe(msg)) {
    return Ieee154MessageLayerC__Ieee154Receive__receive(msg,
    Ieee154MessageLayerC__getPayload(msg), Ieee154MessageLayerC__Packet__payloadLength(msg));
    }
  else {
//line 149
    return msg;
    }
}

// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
inline static  message_t *TinyosNetworkLayerC__Ieee154Receive__receive(message_t *arg_0x7e7a0ec0){
//line 42
  nx_struct message_t *result;
//line 42

//line 42
  result = Ieee154MessageLayerC__SubReceive__receive(arg_0x7e7a0ec0);
//line 42

//line 42
  return result;
//line 42
}
//line 42
// 141 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline   message_t *ActiveMessageLayerP__Snoop__default__receive(am_id_t id, message_t *msg, void *payload, uint8_t len)
{
  return msg;
}

// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
inline static  message_t *ActiveMessageLayerP__Snoop__receive(am_id_t arg_0x7e789d20, message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08){
//line 78
  nx_struct message_t *result;
//line 78

//line 78
    result = ActiveMessageLayerP__Snoop__default__receive(arg_0x7e789d20, arg_0x7eaf2ae0, arg_0x7eaf2c80, arg_0x7eaf2e08);
//line 78

//line 78
  return result;
//line 78
}
//line 78
// 264 "/usr/lib/ncc/nesc_nx.h"
static __inline uint16_t __nesc_ntoh_uint16(const void *source)
//line 264
{
  const uint8_t *base = (const uint8_t *)source;

//line 266
  return ((uint16_t )base[0] << 8) | base[1];
}

// 109 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led2Off(void)
//line 109
{
  LedsP__Led2__set();
  ;
//line 111
  ;
}

// 94 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led2Off(void){
//line 94
  LedsP__Leds__led2Off();
//line 94
}
//line 94
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)34U &= ~(1 << 0);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led2__clr(void){
//line 41
  /*HplAtm128GeneralIOC.PortA.Bit0*/HplAtm128GeneralIOPinP$0__IO__clr();
//line 41
}
//line 41
// 104 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led2On(void)
//line 104
{
  LedsP__Led2__clr();
  ;
//line 106
  ;
}

// 89 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led2On(void){
//line 89
  LedsP__Leds__led2On();
//line 89
}
//line 89
// 94 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led1Off(void)
//line 94
{
  LedsP__Led1__set();
  ;
//line 96
  ;
}

// 77 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led1Off(void){
//line 77
  LedsP__Leds__led1Off();
//line 77
}
//line 77
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)34U &= ~(1 << 1);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led1__clr(void){
//line 41
  /*HplAtm128GeneralIOC.PortA.Bit1*/HplAtm128GeneralIOPinP$1__IO__clr();
//line 41
}
//line 41
// 89 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led1On(void)
//line 89
{
  LedsP__Led1__clr();
  ;
//line 91
  ;
}

// 72 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led1On(void){
//line 72
  LedsP__Leds__led1On();
//line 72
}
//line 72
// 79 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led0Off(void)
//line 79
{
  LedsP__Led0__set();
  ;
//line 81
  ;
}

// 61 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led0Off(void){
//line 61
  LedsP__Leds__led0Off();
//line 61
}
//line 61
// 56 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static __inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__clr(void)
//line 56
{
//line 56
  * (volatile uint8_t *)34U &= ~(1 << 2);
}

// 41 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led0__clr(void){
//line 41
  /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__clr();
//line 41
}
//line 41
// 74 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led0On(void)
//line 74
{
  LedsP__Led0__clr();
  ;
//line 76
  ;
}

// 56 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led0On(void){
//line 56
  LedsP__Leds__led0On();
//line 56
}
//line 56
// 110 "RadioCountToLedsC.nc"
static inline  message_t *RadioCountToLedsC__Receive__receive(message_t *bufPtr,
void *payload, uint8_t len)
//line 111
{
  ;
  if (len != sizeof(radio_count_msg_t )) {
//line 113
      return bufPtr;
    }
  else
//line 114
    {
      radio_count_msg_t *rcm = (radio_count_msg_t *)payload;

//line 116
      if (__nesc_ntoh_uint16((unsigned char *)&rcm->count) & 0x1) {
          RadioCountToLedsC__Leds__led0On();
        }
      else {
          RadioCountToLedsC__Leds__led0Off();
        }
      if (__nesc_ntoh_uint16((unsigned char *)&rcm->count) & 0x2) {
          RadioCountToLedsC__Leds__led1On();
        }
      else {
          RadioCountToLedsC__Leds__led1Off();
        }
      if (__nesc_ntoh_uint16((unsigned char *)&rcm->count) & 0x4) {
          RadioCountToLedsC__Leds__led2On();
        }
      else {
          RadioCountToLedsC__Leds__led2Off();
        }
      return bufPtr;
    }
}

// 136 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline   message_t *ActiveMessageLayerP__Receive__default__receive(am_id_t id, message_t *msg, void *payload, uint8_t len)
{
  return msg;
}

// 78 "/opt/tinyos-2.x/tos/interfaces/Receive.nc"
inline static  message_t *ActiveMessageLayerP__Receive__receive(am_id_t arg_0x7e789748, message_t *arg_0x7eaf2ae0, void *arg_0x7eaf2c80, uint8_t arg_0x7eaf2e08){
//line 78
  nx_struct message_t *result;
//line 78

//line 78
  switch (arg_0x7e789748) {
//line 78
    case 239:
//line 78
      result = RadioCountToLedsC__Receive__receive(arg_0x7eaf2ae0, arg_0x7eaf2c80, arg_0x7eaf2e08);
//line 78
      break;
//line 78
    default:
//line 78
      result = ActiveMessageLayerP__Receive__default__receive(arg_0x7e789748, arg_0x7eaf2ae0, arg_0x7eaf2c80, arg_0x7eaf2e08);
//line 78
      break;
//line 78
    }
//line 78

//line 78
  return result;
//line 78
}
//line 78
// 50 "/opt/tinyos-2.x/tos/interfaces/ActiveMessageAddress.nc"
inline static   am_addr_t ActiveMessageLayerP__ActiveMessageAddress__amAddress(void){
//line 50
  unsigned short result;
//line 50

//line 50
  result = ActiveMessageAddressC__ActiveMessageAddress__amAddress();
//line 50

//line 50
  return result;
//line 50
}
//line 50
// 148 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  am_addr_t ActiveMessageLayerP__AMPacket__address(void)
{
  return ActiveMessageLayerP__ActiveMessageAddress__amAddress();
}

// 141 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   uint16_t RF230RadioP__Ieee154PacketLayer__getDestAddr(message_t *arg_0x7e8563f0){
//line 141
  unsigned short result;
//line 141

//line 141
  result = Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(arg_0x7e8563f0);
//line 141

//line 141
  return result;
//line 141
}
//line 141
// 173 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline  am_addr_t RF230RadioP__ActiveMessageConfig__destination(message_t *msg)
{
  return RF230RadioP__Ieee154PacketLayer__getDestAddr(msg);
}

// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
inline static  am_addr_t ActiveMessageLayerP__Config__destination(message_t *arg_0x7e8766b8){
//line 40
  unsigned short result;
//line 40

//line 40
  result = RF230RadioP__ActiveMessageConfig__destination(arg_0x7e8766b8);
//line 40

//line 40
  return result;
//line 40
}
//line 40
// 164 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  am_addr_t ActiveMessageLayerP__AMPacket__destination(message_t *msg)
{
  return ActiveMessageLayerP__Config__destination(msg);
}

//line 158
static __inline  bool ActiveMessageLayerP__AMPacket__isForMe(message_t *msg)
{
  am_addr_t addr = ActiveMessageLayerP__AMPacket__destination(msg);

//line 161
  return addr == ActiveMessageLayerP__AMPacket__address() || addr == AM_BROADCAST_ADDR;
}

// 159 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   uint8_t TinyosNetworkLayerC__TinyosPacket__payloadLength(message_t *msg)
{
  return TinyosNetworkLayerC__SubPacket__payloadLength(msg) - TinyosNetworkLayerC__PAYLOAD_OFFSET;
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t ActiveMessageLayerP__SubPacket__payloadLength(message_t *arg_0x7e845a50){
//line 49
  unsigned char result;
//line 49

//line 49
  result = TinyosNetworkLayerC__TinyosPacket__payloadLength(arg_0x7e845a50);
//line 49

//line 49
  return result;
//line 49
}
//line 49
// 215 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline   uint8_t ActiveMessageLayerP__RadioPacket__payloadLength(message_t *msg)
{
  return ActiveMessageLayerP__SubPacket__payloadLength(msg) - sizeof(activemessage_header_t );
}

//line 247
static inline  uint8_t ActiveMessageLayerP__Packet__payloadLength(message_t *msg)
{
  return ActiveMessageLayerP__RadioPacket__payloadLength(msg);
}

//line 67
static inline void *ActiveMessageLayerP__getPayload(message_t *msg)
{
  return (void *)msg + ActiveMessageLayerP__RadioPacket__headerLength(msg);
}

// 235 "/usr/lib/ncc/nesc_nx.h"
static __inline uint8_t __nesc_ntoh_uint8(const void *source)
//line 235
{
  const uint8_t *base = (const uint8_t *)source;

//line 237
  return base[0];
}

// 154 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   uint8_t TinyosNetworkLayerC__TinyosPacket__headerLength(message_t *msg)
{
  return TinyosNetworkLayerC__SubPacket__headerLength(msg) + TinyosNetworkLayerC__PAYLOAD_OFFSET;
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t ActiveMessageLayerP__SubPacket__headerLength(message_t *arg_0x7e845478){
//line 43
  unsigned char result;
//line 43

//line 43
  result = TinyosNetworkLayerC__TinyosPacket__headerLength(arg_0x7e845478);
//line 43

//line 43
  return result;
//line 43
}
//line 43
// 62 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline activemessage_header_t *ActiveMessageLayerP__getHeader(message_t *msg)
{
  return (activemessage_header_t *)((void *)msg + ActiveMessageLayerP__SubPacket__headerLength(msg));
}

//line 184
static __inline  am_id_t ActiveMessageLayerP__AMPacket__type(message_t *msg)
{
  return __nesc_ntoh_uint8((unsigned char *)&ActiveMessageLayerP__getHeader(msg)->type);
}

//line 123
static inline  message_t *ActiveMessageLayerP__SubReceive__receive(message_t *msg)
{
  am_id_t id = ActiveMessageLayerP__AMPacket__type(msg);
  void *payload = ActiveMessageLayerP__getPayload(msg);
  uint8_t len = ActiveMessageLayerP__Packet__payloadLength(msg);

  msg = ActiveMessageLayerP__AMPacket__isForMe(msg) ?
  ActiveMessageLayerP__Receive__receive(id, msg, payload, len) :
  ActiveMessageLayerP__Snoop__receive(id, msg, payload, len);

  return msg;
}

// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
inline static  message_t *TinyosNetworkLayerC__TinyosReceive__receive(message_t *arg_0x7e7a0ec0){
//line 42
  nx_struct message_t *result;
//line 42

//line 42
  result = ActiveMessageLayerP__SubReceive__receive(arg_0x7e7a0ec0);
//line 42

//line 42
  return result;
//line 42
}
//line 42
// 127 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline network_header_t *TinyosNetworkLayerC__getHeader(message_t *msg)
{
  return (network_header_t *)((void *)msg + TinyosNetworkLayerC__SubPacket__headerLength(msg));
}

//line 222
static inline  message_t *TinyosNetworkLayerC__SubReceive__receive(message_t *msg)
{
  if (__nesc_ntoh_leuint8((unsigned char *)&TinyosNetworkLayerC__getHeader(msg)->network) == 0x3f) {
    return TinyosNetworkLayerC__TinyosReceive__receive(msg);
    }
  else {
//line 227
    return TinyosNetworkLayerC__Ieee154Receive__receive(msg);
    }
}

// 42 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareReceive.nc"
inline static  message_t *MessageBufferLayerP__Receive__receive(message_t *arg_0x7e7a0ec0){
//line 42
  nx_struct message_t *result;
//line 42

//line 42
  result = TinyosNetworkLayerC__SubReceive__receive(arg_0x7e7a0ec0);
//line 42

//line 42
  return result;
//line 42
}
//line 42
// 322 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline  void MessageBufferLayerP__deliverTask__runTask(void)
{

  for (; ; )
    {
      message_t *msg;

      { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
        {
          if (MessageBufferLayerP__receiveQueueSize == 0) {
            {
//line 332
              __nesc_atomic_end(__nesc_atomic);
//line 332
              return;
            }
            }
//line 334
          msg = MessageBufferLayerP__receiveQueue[MessageBufferLayerP__receiveQueueHead];
        }
//line 335
        __nesc_atomic_end(__nesc_atomic); }

      msg = MessageBufferLayerP__Receive__receive(msg);

      { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
        {
          MessageBufferLayerP__receiveQueue[MessageBufferLayerP__receiveQueueHead] = msg;

          if (++MessageBufferLayerP__receiveQueueHead >= MessageBufferLayerP__RECEIVE_QUEUE_SIZE) {
            MessageBufferLayerP__receiveQueueHead = 0;
            }
          --MessageBufferLayerP__receiveQueueSize;
        }
//line 347
        __nesc_atomic_end(__nesc_atomic); }
    }
}

// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t PacketLinkLayerP__send__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(PacketLinkLayerP__send);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 260 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline   uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getNow(void)
//line 260
{
  return /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__get();
}

// 109 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__getNow(void){
//line 109
  unsigned long result;
//line 109

//line 109
  //result = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getNow();
  //result = STM32RtcC$Alarm$getNow();
//line 109

//line 109
  return result;
//line 109
}
//line 109
// 96 "/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc"
static inline  uint32_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__getNow(void)
{
//line 97
  return /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__getNow();
}

// 136 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  uint32_t /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__getNow(void){
//line 136
  unsigned long result;
//line 136

//line 136
  result = /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__getNow();
//line 136

//line 136
  return result;
//line 136
}
//line 136
// 159 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startOneShot(uint8_t num, uint32_t dt)
{
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__startTimer(num, /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__getNow(), dt, TRUE);
}

// 73 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void PacketLinkLayerP__DelayTimer__startOneShot(uint32_t arg_0x7ead6ca8){
//line 73
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startOneShot(0U, arg_0x7ead6ca8);
//line 73
}
//line 73
// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/util/PacketFlag.nc"
inline static   bool SoftwareAckLayerP__AckReceivedFlag__get(message_t *arg_0x7e30a758){
//line 40
  unsigned char result;
//line 40

//line 40
  result = MetadataFlagsLayerC__PacketFlag__get(0U, arg_0x7e30a758);
//line 40

//line 40
  return result;
//line 40
}
//line 40
// 192 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   bool SoftwareAckLayerP__PacketAcknowledgements__wasAcked(message_t *msg)
{
  return SoftwareAckLayerP__AckReceivedFlag__get(msg);
}

// 85 "/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc"
inline static   bool PacketLinkLayerP__PacketAcknowledgements__wasAcked(message_t *arg_0x7ea20010){
//line 85
  unsigned char result;
//line 85

//line 85
  result = SoftwareAckLayerP__PacketAcknowledgements__wasAcked(arg_0x7ea20010);
//line 85

//line 85
  return result;
//line 85
}
//line 85
// 183 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline  void PacketLinkLayerP__SubSend__sendDone(message_t *msg, error_t error)
//line 183
{
  PacketLinkLayerP__totalRetries++;

  if (PacketLinkLayerP__PacketAcknowledgements__wasAcked(msg)) {
      PacketLinkLayerP__signalDone(SUCCESS);
      return;
    }
  else {
//line 190
    if (PacketLinkLayerP__totalRetries < PacketLinkLayerP__PacketLink__getRetries(PacketLinkLayerP__currentSendMsg)) {

        if (PacketLinkLayerP__PacketLink__getRetryDelay(PacketLinkLayerP__currentSendMsg) > 0) {

            PacketLinkLayerP__DelayTimer__startOneShot(PacketLinkLayerP__PacketLink__getRetryDelay(PacketLinkLayerP__currentSendMsg));
          }
        else
//line 195
          {

            PacketLinkLayerP__send__postTask();
          }

        return;
      }
    }
  PacketLinkLayerP__signalDone(error);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  void MessageBufferLayerP__Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198){
//line 54
  PacketLinkLayerP__SubSend__sendDone(arg_0x7e797010, arg_0x7e797198);
//line 54
}
//line 54
// 79 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
inline static  void MessageBufferLayerP__Tasklet__resume(void){
//line 79
  TaskletC__Tasklet__resume();
//line 79
}
//line 79
// 275 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   uint16_t RF230RadioP__RandomCollisionConfig__getInitialBackoff(message_t *msg)
{
  return (uint16_t )(4960 * (73728UL / 8 / 32) * (1 << MICA_DIVIDE_ONE_FOR_32KHZ_LOG2) / 10000UL);
}

// 40 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionConfig.nc"
inline static   uint16_t RandomCollisionLayerP__Config__getInitialBackoff(message_t *arg_0x7e885140){
//line 40
  unsigned short result;
//line 40

//line 40
  result = RF230RadioP__RandomCollisionConfig__getInitialBackoff(arg_0x7e885140);
//line 40

//line 40
  return result;
//line 40
}
//line 40
// 98 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static inline   error_t RandomCollisionLayerP__RadioSend__send(message_t *msg)
{
  if (RandomCollisionLayerP__state != RandomCollisionLayerP__STATE_READY || !RandomCollisionLayerP__RadioAlarm__isFree()) {
    return EBUSY;
    }
  RandomCollisionLayerP__txMsg = msg;
  RandomCollisionLayerP__state = RandomCollisionLayerP__STATE_TX_PENDING_FIRST;
  RandomCollisionLayerP__RadioAlarm__wait(RandomCollisionLayerP__getBackoff(RandomCollisionLayerP__Config__getInitialBackoff(msg)));

  return SUCCESS;
}

// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioSend.nc"
inline static   error_t MessageBufferLayerP__RadioSend__send(message_t *arg_0x7e390380){
//line 48
  unsigned char result;
//line 48

//line 48
  result = RandomCollisionLayerP__RadioSend__send(arg_0x7e390380);
//line 48

//line 48
  return result;
//line 48
}
//line 48
// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/util/TaskletC.nc"
static __inline  void TaskletC__Tasklet__suspend(void)
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 96
    ++TaskletC__state;
//line 96
    __nesc_atomic_end(__nesc_atomic); }
}

// 72 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
inline static  void MessageBufferLayerP__Tasklet__suspend(void){
//line 72
  TaskletC__Tasklet__suspend();
//line 72
}
//line 72
// 189 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline  void MessageBufferLayerP__sendTask__runTask(void)
{
  bool done = FALSE;

  MessageBufferLayerP__Tasklet__suspend();

  for (; 0; ) ;

  if (MessageBufferLayerP__state == MessageBufferLayerP__STATE_TX_PENDING && ++MessageBufferLayerP__retries <= MessageBufferLayerP__MAX_RETRIES)
    {
      MessageBufferLayerP__txError = MessageBufferLayerP__RadioSend__send(MessageBufferLayerP__txMsg);
      if (MessageBufferLayerP__txError == SUCCESS) {
        MessageBufferLayerP__state = MessageBufferLayerP__STATE_TX_SEND;
        }
      else {
//line 203
        MessageBufferLayerP__state = MessageBufferLayerP__STATE_TX_RETRY;
        }
    }
  else {
      MessageBufferLayerP__state = MessageBufferLayerP__STATE_READY;
      done = TRUE;
    }

  MessageBufferLayerP__Tasklet__resume();

  if (done) {
    MessageBufferLayerP__Send__sendDone(MessageBufferLayerP__txMsg, MessageBufferLayerP__txError);
    }
}

// 164 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__stop(uint8_t num)
{
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__m_timers[num].isrunning = FALSE;
}

// 78 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void PacketLinkLayerP__DelayTimer__stop(void){
//line 78
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__stop(0U);
//line 78
}
//line 78
// 65 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t PacketLinkLayerP__SubPacket__metadataLength(message_t *arg_0x7e843a08){
//line 65
  unsigned char result;
//line 65

//line 65
  result = TimeStampingLayerP__RadioPacket__metadataLength(arg_0x7e843a08);
//line 65

//line 65
  return result;
//line 65
}
//line 65
// 258 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline   uint8_t PacketLinkLayerP__RadioPacket__metadataLength(message_t *msg)
//line 258
{
  return PacketLinkLayerP__SubPacket__metadataLength(msg) + sizeof(link_metadata_t );
}

//line 104
static inline link_metadata_t *PacketLinkLayerP__getMeta(message_t *msg)
//line 104
{
  return (link_metadata_t *)((void *)msg + sizeof(message_t ) - PacketLinkLayerP__RadioPacket__metadataLength(msg));
}








static inline  void PacketLinkLayerP__PacketLink__setRetries(message_t *msg, uint16_t maxRetries)
//line 115
{
  PacketLinkLayerP__getMeta(msg)->maxRetries = maxRetries;
}

// 133 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc"
static inline   void Ieee154MessageLayerC__Ieee154Send__default__sendDone(message_t *msg, error_t error)
{
}

// 97 "/opt/tinyos-2.x/tos/interfaces/Ieee154Send.nc"
inline static  void Ieee154MessageLayerC__Ieee154Send__sendDone(message_t *arg_0x7e8f2b08, error_t arg_0x7e8f2c90){
//line 97
  Ieee154MessageLayerC__Ieee154Send__default__sendDone(arg_0x7e8f2b08, arg_0x7e8f2c90);
//line 97
}
//line 97
// 128 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc"
static inline  void Ieee154MessageLayerC__SubSend__sendDone(message_t *msg, error_t error)
{
  Ieee154MessageLayerC__Ieee154Send__sendDone(msg, error);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  void TinyosNetworkLayerC__Ieee154Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198){
//line 54
  Ieee154MessageLayerC__SubSend__sendDone(arg_0x7e797010, arg_0x7e797198);
//line 54
}
//line 54
// 138 "RadioCountToLedsC.nc"
static inline  void RadioCountToLedsC__AMSend__sendDone(message_t *bufPtr, error_t error)
//line 138
{
  if (&RadioCountToLedsC__packet == bufPtr) {
      RadioCountToLedsC__locked = FALSE;
    }
}

// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
inline static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__sendDone(message_t *arg_0x7eae3640, error_t arg_0x7eae37c8){
//line 110
  RadioCountToLedsC__AMSend__sendDone(arg_0x7eae3640, arg_0x7eae37c8);
//line 110
}
//line 110
// 65 "/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc"
static inline  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__sendDone(message_t *m, error_t err)
//line 65
{
  /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__sendDone(m, err);
}

// 215 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
static inline   void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__default__sendDone(uint8_t id, message_t *msg, error_t err)
//line 215
{
}

// 100 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
inline static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__sendDone(uint8_t arg_0x7e9d14f0, message_t *arg_0x7e9f5358, error_t arg_0x7e9f54e0){
//line 100
  switch (arg_0x7e9d14f0) {
//line 100
    case 0U:
//line 100
      /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__sendDone(arg_0x7e9f5358, arg_0x7e9f54e0);
//line 100
      break;
//line 100
    default:
//line 100
      /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__default__sendDone(arg_0x7e9d14f0, arg_0x7e9f5358, arg_0x7e9f54e0);
//line 100
      break;
//line 100
    }
//line 100
}
//line 100
// 163 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
static inline void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__sendDone(uint8_t last, message_t *msg, error_t err)
//line 163
{
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[last].msg = (message_t *)0;
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__tryToSend();
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__sendDone(last, msg, err);
}

//line 189
static inline  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__sendDone(am_id_t id, message_t *msg, error_t err)
//line 189
{





  if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current >= 1) {
      return;
    }
  if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current].msg == msg) {
      /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__sendDone(/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current, msg, err);
    }
  else {
      ;
    }
}

// 110 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
inline static  void ActiveMessageLayerP__AMSend__sendDone(am_id_t arg_0x7e790df8, message_t *arg_0x7eae3640, error_t arg_0x7eae37c8){
//line 110
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__sendDone(arg_0x7e790df8, arg_0x7eae3640, arg_0x7eae37c8);
//line 110
}
//line 110
// 93 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  void ActiveMessageLayerP__SubSend__sendDone(message_t *msg, error_t error)
{
  ActiveMessageLayerP__AMSend__sendDone(ActiveMessageLayerP__AMPacket__type(msg), msg, error);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198){
//line 54
  ActiveMessageLayerP__SubSend__sendDone(arg_0x7e797010, arg_0x7e797198);
//line 54
}
//line 54
// 120 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__release(void){
//line 120
  unsigned char result;
//line 120

//line 120
  result = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__release(0U);
//line 120

//line 120
  return result;
//line 120
}
//line 120
// 78 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc"
static inline  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__sendDone(message_t *msg, error_t result)
{
  /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__release();
  /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__sendDone(msg, result);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  void TinyosNetworkLayerC__TinyosSend__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198){
//line 54
  /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__sendDone(arg_0x7e797010, arg_0x7e797198);
//line 54
}
//line 54
// 214 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline  void TinyosNetworkLayerC__SubSend__sendDone(message_t *msg, error_t result)
{
  if (__nesc_ntoh_leuint8((unsigned char *)&TinyosNetworkLayerC__getHeader(msg)->network) == 0x3f) {
    TinyosNetworkLayerC__TinyosSend__sendDone(msg, result);
    }
  else {
//line 219
    TinyosNetworkLayerC__Ieee154Send__sendDone(msg, result);
    }
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  void UniqueLayerP__Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198){
//line 54
  TinyosNetworkLayerC__SubSend__sendDone(arg_0x7e797010, arg_0x7e797198);
//line 54
}
//line 54
// 80 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
static inline  void UniqueLayerP__SubSend__sendDone(message_t *msg, error_t error)
{
  UniqueLayerP__Send__sendDone(msg, error);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  void PacketLinkLayerP__Send__sendDone(message_t *arg_0x7e797010, error_t arg_0x7e797198){
//line 54
  UniqueLayerP__SubSend__sendDone(arg_0x7e797010, arg_0x7e797198);
//line 54
}
//line 54
// 60 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline   bool /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEmpty(void)
//line 60
{
  /* atomic removed: atomic calls only */
//line 61
  {
    unsigned char __nesc_temp =
//line 61
    /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead == /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY;

//line 61
    return __nesc_temp;
  }
}

// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
inline static   bool /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__isEmpty(void){
//line 53
  unsigned char result;
//line 53

//line 53
  result = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEmpty();
//line 53

//line 53
  return result;
//line 53
}
//line 53
// 68 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline   resource_client_id_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__dequeue(void)
//line 68
{
  /* atomic removed: atomic calls only */
//line 69
  {
    if (/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead != /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY) {
        uint8_t id = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead;

//line 72
        /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ[/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead];
        if (/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead == /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY) {
          /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qTail = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY;
          }
//line 75
        /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ[id] = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY;
        {
          unsigned char __nesc_temp =
//line 76
          id;

//line 76
          return __nesc_temp;
        }
      }
//line 78
    {
      unsigned char __nesc_temp =
//line 78
      /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY;

//line 78
      return __nesc_temp;
    }
  }
}

// 70 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
inline static   resource_client_id_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__dequeue(void){
//line 70
  unsigned char result;
//line 70

//line 70
  result = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__dequeue();
//line 70

//line 70
  return result;
//line 70
}
//line 70
// 173 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__unconfigure(uint8_t id)
//line 173
{
}

// 65 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
inline static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__unconfigure(uint8_t arg_0x7e6d9830){
//line 65
    /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__unconfigure(arg_0x7e6d9830);
//line 65
}
//line 65
// 65 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
static inline void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__nextPacket(void)
//line 65
{
  uint8_t i;

//line 67
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current = (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current + 1) % 1;
  for (i = 0; i < 1; i++) {
      if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current].msg == (void *)0 ||
      /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__cancelMask[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current / 8] & (1 << /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current % 8))
        {
          /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current = (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current + 1) % 1;
        }
      else {
          break;
        }
    }
  if (i >= 1) {
//line 78
    /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current = 1;
    }
}

// 78 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
inline static  uint8_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Packet__payloadLength(message_t *arg_0x7eab5010){
//line 78
  unsigned char result;
//line 78

//line 78
  result = ActiveMessageLayerP__Packet__payloadLength(arg_0x7eab5010);
//line 78

//line 78
  return result;
//line 78
}
//line 78
// 99 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__createDataFrame(message_t *msg)
{
  __nesc_hton_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->fcf, Ieee154PacketLayerP__IEEE154_DATA_FRAME_VALUE);
}

// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__createDataFrame(message_t *arg_0x7e864378){
//line 69
  Ieee154PacketLayerP__Ieee154PacketLayer__createDataFrame(arg_0x7e864378);
//line 69
}
//line 69
// 203 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline  error_t RF230RadioP__ActiveMessageConfig__checkFrame(message_t *msg)
{
  if (!RF230RadioP__Ieee154PacketLayer__isDataFrame(msg)) {
    RF230RadioP__Ieee154PacketLayer__createDataFrame(msg);
    }
  return SUCCESS;
}

// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
inline static  error_t ActiveMessageLayerP__Config__checkFrame(message_t *arg_0x7e8738b8){
//line 63
  unsigned char result;
//line 63

//line 63
  result = RF230RadioP__ActiveMessageConfig__checkFrame(arg_0x7e8738b8);
//line 63

//line 63
  return result;
//line 63
}
//line 63
// 193 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setSrcAddr(message_t *msg, uint16_t addr)
{
  __nesc_hton_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->src, addr);
}

// 156 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__setSrcAddr(message_t *arg_0x7e855520, uint16_t arg_0x7e8556b0){
//line 156
  Ieee154PacketLayerP__Ieee154PacketLayer__setSrcAddr(arg_0x7e855520, arg_0x7e8556b0);
//line 156
}
//line 156
// 188 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline  void RF230RadioP__ActiveMessageConfig__setSource(message_t *msg, am_addr_t addr)
{
  RF230RadioP__Ieee154PacketLayer__setSrcAddr(msg, addr);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
inline static  void ActiveMessageLayerP__Config__setSource(message_t *arg_0x7e8756f0, am_addr_t arg_0x7e875880){
//line 49
  RF230RadioP__ActiveMessageConfig__setSource(arg_0x7e8756f0, arg_0x7e875880);
//line 49
}
//line 49
// 179 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  void ActiveMessageLayerP__AMPacket__setSource(message_t *msg, am_addr_t addr)
{
  ActiveMessageLayerP__Config__setSource(msg, addr);
}

// 173 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setDestPan(message_t *msg, uint16_t pan)
{
  __nesc_hton_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->destpan, pan);
}

// 136 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__setDestPan(message_t *arg_0x7e858d08, uint16_t arg_0x7e858e98){
//line 136
  Ieee154PacketLayerP__Ieee154PacketLayer__setDestPan(arg_0x7e858d08, arg_0x7e858e98);
//line 136
}
//line 136
// 198 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline  void RF230RadioP__ActiveMessageConfig__setGroup(message_t *msg, am_group_t grp)
{
  RF230RadioP__Ieee154PacketLayer__setDestPan(msg, grp);
}

// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
inline static  void ActiveMessageLayerP__Config__setGroup(message_t *arg_0x7e873248, am_group_t arg_0x7e8733d8){
//line 55
  RF230RadioP__ActiveMessageConfig__setGroup(arg_0x7e873248, arg_0x7e8733d8);
//line 55
}
//line 55
// 199 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  void ActiveMessageLayerP__AMPacket__setGroup(message_t *msg, am_group_t grp)
{
  ActiveMessageLayerP__Config__setGroup(msg, grp);
}

// 93 "/opt/tinyos-2.x/tos/system/ActiveMessageAddressC.nc"
static inline   am_group_t ActiveMessageAddressC__ActiveMessageAddress__amGroup(void)
//line 93
{
  am_group_t myGroup;

//line 95
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 95
    myGroup = ActiveMessageAddressC__group;
//line 95
    __nesc_atomic_end(__nesc_atomic); }
  return myGroup;
}

// 55 "/opt/tinyos-2.x/tos/interfaces/ActiveMessageAddress.nc"
inline static   am_group_t ActiveMessageLayerP__ActiveMessageAddress__amGroup(void){
//line 55
  unsigned char result;
//line 55

//line 55
  result = ActiveMessageAddressC__ActiveMessageAddress__amGroup();
//line 55

//line 55
  return result;
//line 55
}
//line 55
// 153 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  am_group_t ActiveMessageLayerP__AMPacket__localGroup(void)
{
  return ActiveMessageLayerP__ActiveMessageAddress__amGroup();
}

//line 117
static inline   void ActiveMessageLayerP__SendNotifier__default__aboutToSend(am_id_t id, am_addr_t addr, message_t *msg)
{
}

// 59 "/opt/tinyos-2.x/tos/interfaces/SendNotifier.nc"
inline static  void ActiveMessageLayerP__SendNotifier__aboutToSend(am_id_t arg_0x7e787300, am_addr_t arg_0x7e967820, message_t *arg_0x7e9679d0){
//line 59
    ActiveMessageLayerP__SendNotifier__default__aboutToSend(arg_0x7e787300, arg_0x7e967820, arg_0x7e9679d0);
//line 59
}
//line 59
// 64 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline   bool /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEnqueued(resource_client_id_t id)
//line 64
{
  /* atomic removed: atomic calls only */
//line 65
  {
    unsigned char __nesc_temp =
//line 65
    /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ[id] != /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY || /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qTail == id;

//line 65
    return __nesc_temp;
  }
}

//line 82
static inline   error_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__enqueue(resource_client_id_t id)
//line 82
{
  /* atomic removed: atomic calls only */
//line 83
  {
    if (!/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__isEnqueued(id)) {
        if (/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead == /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY) {
          /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qHead = id;
          }
        else {
//line 88
          /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ[/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qTail] = id;
          }
//line 89
        /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__qTail = id;
        {
          unsigned char __nesc_temp =
//line 90
          SUCCESS;

//line 90
          return __nesc_temp;
        }
      }
//line 92
    {
      unsigned char __nesc_temp =
//line 92
      EBUSY;

//line 92
      return __nesc_temp;
    }
  }
}

// 79 "/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc"
inline static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__enqueue(resource_client_id_t arg_0x7e6f01e0){
//line 79
  unsigned char result;
//line 79

//line 79
  result = /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__FcfsQueue__enqueue(arg_0x7e6f01e0);
//line 79

//line 79
  return result;
//line 79
}
//line 79
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 167 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__requested(uint8_t id)
//line 167
{
}

// 53 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
inline static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__requested(uint8_t arg_0x7e6dacd0){
//line 53
    /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__requested(arg_0x7e6dacd0);
//line 53
}
//line 53
// 71 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__request(uint8_t id)
//line 71
{
  /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__requested(/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId);
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 73
    {
      if (/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state == /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_IDLE) {
          /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_GRANTING;
          /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__reqResId = id;
          /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__postTask();
          {
            unsigned char __nesc_temp =
//line 78
            SUCCESS;

            {
//line 78
              __nesc_atomic_end(__nesc_atomic);
//line 78
              return __nesc_temp;
            }
          }
        }
//line 80
      {
        unsigned char __nesc_temp =
//line 80
        /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__enqueue(id);

        {
//line 80
          __nesc_atomic_end(__nesc_atomic);
//line 80
          return __nesc_temp;
        }
      }
    }
//line 83
    __nesc_atomic_end(__nesc_atomic); }
}

// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__request(void){
//line 88
  unsigned char result;
//line 88

//line 88
  result = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__request(0U);
//line 88

//line 88
  return result;
//line 88
}
//line 88
// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__send(message_t *arg_0x7e7988a8){
//line 46
  unsigned char result;
//line 46

//line 46
  result = TinyosNetworkLayerC__TinyosSend__send(arg_0x7e7988a8);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 171 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__configure(uint8_t id)
//line 171
{
}

// 59 "/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc"
inline static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__configure(uint8_t arg_0x7e6d9830){
//line 59
    /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__default__configure(arg_0x7e6d9830);
//line 59
}
//line 59
// 169 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline    void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__immediateRequested(uint8_t id)
//line 169
{
}

// 61 "/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc"
inline static   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__immediateRequested(uint8_t arg_0x7e6dacd0){
//line 61
    /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__default__immediateRequested(arg_0x7e6dacd0);
//line 61
}
//line 61
// 84 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__immediateRequest(uint8_t id)
//line 84
{
  /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceRequested__immediateRequested(/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId);
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 86
    {
      if (/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state == /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_IDLE) {
          /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_BUSY;
          /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId = id;
          /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__configure(/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId);
          {
            unsigned char __nesc_temp =
//line 91
            SUCCESS;

            {
//line 91
              __nesc_atomic_end(__nesc_atomic);
//line 91
              return __nesc_temp;
            }
          }
        }
//line 93
      {
        unsigned char __nesc_temp =
//line 93
        FAIL;

        {
//line 93
          __nesc_atomic_end(__nesc_atomic);
//line 93
          return __nesc_temp;
        }
      }
    }
//line 96
    __nesc_atomic_end(__nesc_atomic); }
}

// 97 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__immediateRequest(void){
//line 97
  unsigned char result;
//line 97

//line 97
  result = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__immediateRequest(0U);
//line 97

//line 97
  return result;
//line 97
}
//line 97
// 53 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc"
static inline  error_t /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__send(message_t *msg)
{
  if (/*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__immediateRequest() == SUCCESS)
    {
      error_t result = /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__send(msg);

//line 58
      if (result != SUCCESS) {
        /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__release();
        }
      return result;
    }

  /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__pending = msg;
  return /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__request();
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  error_t ActiveMessageLayerP__SubSend__send(message_t *arg_0x7e7988a8){
//line 46
  unsigned char result;
//line 46

//line 46
  result = /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__send(arg_0x7e7988a8);
//line 46

//line 46
  return result;
//line 46
}
//line 46
inline static  error_t PacketLinkLayerP__SubSend__send(message_t *arg_0x7e7988a8){
//line 46
  unsigned char result;
//line 46

//line 46
  result = MessageBufferLayerP__Send__send(arg_0x7e7988a8);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 105 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__setAckRequired(message_t *arg_0x7e861890, bool arg_0x7e861a18){
//line 105
  Ieee154PacketLayerP__Ieee154PacketLayer__setAckRequired(arg_0x7e861890, arg_0x7e861a18);
//line 105
}
//line 105
// 116 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   void RF230RadioP__SoftwareAckConfig__setAckRequired(message_t *msg, bool ack)
{
  RF230RadioP__Ieee154PacketLayer__setAckRequired(msg, ack);
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckConfig.nc"
inline static   void SoftwareAckLayerP__SoftwareAckConfig__setAckRequired(message_t *arg_0x7e8a6698, bool arg_0x7e8a6820){
//line 49
  RF230RadioP__SoftwareAckConfig__setAckRequired(arg_0x7e8a6698, arg_0x7e8a6820);
//line 49
}
//line 49
// 178 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc"
static inline   error_t SoftwareAckLayerP__PacketAcknowledgements__requestAck(message_t *msg)
{
  SoftwareAckLayerP__SoftwareAckConfig__setAckRequired(msg, TRUE);

  return SUCCESS;
}

// 59 "/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc"
inline static   error_t PacketLinkLayerP__PacketAcknowledgements__requestAck(message_t *arg_0x7ea21228){
//line 59
  unsigned char result;
//line 59

//line 59
  result = SoftwareAckLayerP__PacketAcknowledgements__requestAck(arg_0x7ea21228);
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 157 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline  error_t PacketLinkLayerP__Send__send(message_t *msg)
//line 157
{
  error_t error = EBUSY;

//line 159
  if (PacketLinkLayerP__currentSendMsg == (void *)0) {

      if (PacketLinkLayerP__PacketLink__getRetries(msg) > 0) {
          PacketLinkLayerP__PacketAcknowledgements__requestAck(msg);
        }

      if ((error = PacketLinkLayerP__SubSend__send(msg)) == SUCCESS) {
          PacketLinkLayerP__currentSendMsg = msg;
          PacketLinkLayerP__totalRetries = 0;
        }
    }
  return error;
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  error_t UniqueLayerP__SubSend__send(message_t *arg_0x7e7988a8){
//line 46
  unsigned char result;
//line 46

//line 46
  result = PacketLinkLayerP__Send__send(arg_0x7e7988a8);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 163 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setDSN(message_t *msg, uint8_t dsn)
{
  __nesc_hton_leuint8((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->dsn, dsn);
}

// 125 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__setDSN(message_t *arg_0x7e858140, uint8_t arg_0x7e8582c8){
//line 125
  Ieee154PacketLayerP__Ieee154PacketLayer__setDSN(arg_0x7e858140, arg_0x7e8582c8);
//line 125
}
//line 125
// 154 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline   void RF230RadioP__UniqueConfig__setSequenceNumber(message_t *msg, uint8_t dsn)
{
  RF230RadioP__Ieee154PacketLayer__setDSN(msg, dsn);
}

// 52 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueConfig.nc"
inline static   void UniqueLayerP__UniqueConfig__setSequenceNumber(message_t *arg_0x7e897510, uint8_t arg_0x7e897698){
//line 52
  RF230RadioP__UniqueConfig__setSequenceNumber(arg_0x7e897510, arg_0x7e897698);
//line 52
}
//line 52
// 69 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
static inline  error_t UniqueLayerP__Send__send(message_t *msg)
{
  UniqueLayerP__UniqueConfig__setSequenceNumber(msg, ++UniqueLayerP__sequenceNumber);
  return UniqueLayerP__SubSend__send(msg);
}

// 46 "/opt/tinyos-2.x/tos/chips/rf2xx/util/BareSend.nc"
inline static  error_t TinyosNetworkLayerC__SubSend__send(message_t *arg_0x7e7988a8){
//line 46
  unsigned char result;
//line 46

//line 46
  result = UniqueLayerP__Send__send(arg_0x7e7988a8);
//line 46

//line 46
  return result;
//line 46
}
//line 46
// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask);
//line 67

//line 67
  return result;
//line 67
}
//line 67
inline static   error_t /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 154 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   uint8_t HplAtm1281Timer2AsyncP__TimerCtrl__getInterruptFlag(void)
//line 154
{
  return * (volatile uint8_t *)(0x17 + 0x20);
}

// 89 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc"
inline static   uint8_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__getInterruptFlag(void){
//line 89
  unsigned char result;
//line 89

//line 89
  result = HplAtm1281Timer2AsyncP__TimerCtrl__getInterruptFlag();
//line 89

//line 89
  return result;
//line 89
}
//line 89
// 176 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline   void MessageBufferLayerP__RadioChannel__default__setChannelDone(void)
{
}

// 48 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioChannel.nc"
inline static  void MessageBufferLayerP__RadioChannel__setChannelDone(void){
//line 48
  MessageBufferLayerP__RadioChannel__default__setChannelDone();
//line 48
}
//line 48
// 80 "RadioCountToLedsC.nc"
static inline  void RadioCountToLedsC__AMControl__stopDone(error_t err)
//line 80
{
}

// 138 "/opt/tinyos-2.x/tos/interfaces/SplitControl.nc"
inline static  void MessageBufferLayerP__SplitControl__stopDone(error_t arg_0x7eac3d48){
//line 138
  RadioCountToLedsC__AMControl__stopDone(arg_0x7eac3d48);
//line 138
}
//line 138
//line 104
inline static  error_t RadioCountToLedsC__AMControl__start(void){
//line 104
  unsigned char result;
//line 104

//line 104
  result = MessageBufferLayerP__SplitControl__start();
//line 104

//line 104
  return result;
//line 104
}
//line 104
// 154 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"





static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startPeriodic(uint8_t num, uint32_t dt)
{
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__startTimer(num, /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__getNow(), dt, FALSE);
}

// 64 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void RadioCountToLedsC__MilliTimer__startPeriodic(uint32_t arg_0x7ead66d8){
//line 64
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__startPeriodic(1U, arg_0x7ead66d8);
	// Nived : Glueing the virtual timer layer to thomas's layer
	//VirtualizeTimerC$0$Timer$startPeriodic(1U, arg_0x7ead66d8);

//line 64
}
//line 64
// 70 "RadioCountToLedsC.nc"
static inline  void RadioCountToLedsC__AMControl__startDone(error_t err)
//line 70
{
  if (err == SUCCESS) {
      RadioCountToLedsC__MilliTimer__startPeriodic(1024);
      RadioCountToLedsC__Leds__led0Off();
    }
  else {
      RadioCountToLedsC__AMControl__start();
    }
}

// 113 "/opt/tinyos-2.x/tos/interfaces/SplitControl.nc"
inline static  void MessageBufferLayerP__SplitControl__startDone(error_t arg_0x7eac3198){
//line 113
  RadioCountToLedsC__AMControl__startDone(arg_0x7eac3198);
//line 113
}
//line 113
// 144 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline  void MessageBufferLayerP__stateDoneTask__runTask(void)
{
  uint8_t s;

  s = MessageBufferLayerP__state;


  MessageBufferLayerP__state = MessageBufferLayerP__STATE_READY;

  if (s == MessageBufferLayerP__STATE_TURN_ON) {
    MessageBufferLayerP__SplitControl__startDone(SUCCESS);
    }
  else {
//line 155
    if (s == MessageBufferLayerP__STATE_TURN_OFF) {
      MessageBufferLayerP__SplitControl__stopDone(SUCCESS);
      }
    else {
//line 157
      if (s == MessageBufferLayerP__STATE_CHANNEL) {
        MessageBufferLayerP__RadioChannel__setChannelDone();
        }
      else {
//line 160
        MessageBufferLayerP__state = s;
        }
      }
    }
}

// 411 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   error_t RF230DriverLayerP__RadioState__turnOn(void)
{
  if (RF230DriverLayerP__cmd != RF230DriverLayerP__CMD_NONE || (RF230DriverLayerP__state == RF230DriverLayerP__STATE_SLEEP && !RF230DriverLayerP__RadioAlarm__isFree())) {
    return EBUSY;
    }
  else {
//line 415
    if (RF230DriverLayerP__state == RF230DriverLayerP__STATE_RX_ON) {
      return EALREADY;
      }
    }
//line 418
  RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_TURNON;
  RF230DriverLayerP__Tasklet__schedule();

  return SUCCESS;
}

// 56 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioState.nc"
inline static   error_t MessageBufferLayerP__RadioState__turnOn(void){
//line 56
  unsigned char result;
//line 56

//line 56
  result = RF230DriverLayerP__RadioState__turnOn();
//line 56

//line 56
  return result;
//line 56
}
//line 56
// 103 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__startAt(/*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type arg_0x7e7d9678, /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type arg_0x7e7d9808){
//line 103
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__startAt(arg_0x7e7d9678, arg_0x7e7d9808);
//line 103
}
//line 103
// 58 "/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc"
static inline void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__start(uint32_t t0, uint32_t dt, bool oneshot)
{
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__m_dt = dt;
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__m_oneshot = oneshot;
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__startAt(t0, dt);
}

//line 93
static inline  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__startOneShotAt(uint32_t t0, uint32_t dt)
{
//line 94
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__start(t0, dt, TRUE);
}

// 129 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__startOneShotAt(uint32_t arg_0x7ead39b8, uint32_t arg_0x7ead3b48){
//line 129
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__startOneShotAt(arg_0x7ead39b8, arg_0x7ead3b48);
//line 129
}
//line 129
// 242 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__stop(void)
//line 242
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 243
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__set = FALSE;
//line 243
    __nesc_atomic_end(__nesc_atomic); }
}

// 73 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__stop(void){
//line 73
	//STM32RtcC$Alarm$stop();
  ///*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__stop();
//line 73
}
//line 73
// 71 "/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc"
static inline  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__stop(void)
{
//line 72
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__stop();
}

// 78 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__stop(void){
//line 78
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__stop();
//line 78
}
//line 78
// 100 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__runTask(void)
{





  uint32_t now = /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__getNow();
  int32_t min_remaining = (1UL << 31) - 1;
  bool min_remaining_isset = FALSE;
  uint8_t num;

  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__stop();

  for (num = 0; num < /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__NUM_TIMERS; num++)
    {
      /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer_t *timer = &/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__m_timers[num];

      if (timer->isrunning)
        {
          uint32_t elapsed = now - timer->t0;
          int32_t remaining = timer->dt - elapsed;

          if (remaining < min_remaining)
            {
              min_remaining = remaining;
              min_remaining_isset = TRUE;
            }
        }
    }

  if (min_remaining_isset)
    {
      if (min_remaining <= 0) {
        /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__fireTimers(now);
        }
      else {
//line 135
        /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__startOneShotAt(now, min_remaining);
        }
    }
}

// 211 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline  void PacketLinkLayerP__DelayTimer__fired(void)
//line 211
{
  if (PacketLinkLayerP__currentSendMsg != (void *)0) {
      PacketLinkLayerP__send__postTask();
    }
}

// 269 "/usr/lib/ncc/nesc_nx.h"
static __inline uint16_t __nesc_hton_uint16(void *target, uint16_t value)
//line 269
{
  uint8_t *base = (uint8_t *)target;

//line 271
  base[1] = value;
  base[0] = value >> 8;
  return value;
}

// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
inline static  error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__send(am_id_t arg_0x7e9d1e50, am_addr_t arg_0x7eae42e0, message_t *arg_0x7eae4490, uint8_t arg_0x7eae4618){
//line 80
  unsigned char result;
//line 80

//line 80
  result = ActiveMessageLayerP__AMSend__send(arg_0x7e9d1e50, arg_0x7eae42e0, arg_0x7eae4490, arg_0x7eae4618);
//line 80

//line 80
  return result;
//line 80
}
//line 80
// 78 "/opt/tinyos-2.x/tos/interfaces/AMPacket.nc"
inline static  am_addr_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__destination(message_t *arg_0x7ea33010){
//line 78
  unsigned short result;
//line 78

//line 78
  result = ActiveMessageLayerP__AMPacket__destination(arg_0x7ea33010);
//line 78

//line 78
  return result;
//line 78
}
//line 78
//line 147
inline static  am_id_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__type(message_t *arg_0x7ea30680){
//line 147
  unsigned char result;
//line 147

//line 147
  result = ActiveMessageLayerP__AMPacket__type(arg_0x7ea30680);
//line 147

//line 147
  return result;
//line 147
}
//line 147
// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   void TinyosNetworkLayerC__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198){
//line 54
  Ieee154PacketLayerP__RadioPacket__setPayloadLength(arg_0x7e843010, arg_0x7e843198);
//line 54
}
//line 54
// 164 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   void TinyosNetworkLayerC__TinyosPacket__setPayloadLength(message_t *msg, uint8_t length)
{
  TinyosNetworkLayerC__SubPacket__setPayloadLength(msg, length + TinyosNetworkLayerC__PAYLOAD_OFFSET);
}

// 54 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   void ActiveMessageLayerP__SubPacket__setPayloadLength(message_t *arg_0x7e843010, uint8_t arg_0x7e843198){
//line 54
  TinyosNetworkLayerC__TinyosPacket__setPayloadLength(arg_0x7e843010, arg_0x7e843198);
//line 54
}
//line 54
// 220 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline   void ActiveMessageLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length)
{
  ActiveMessageLayerP__SubPacket__setPayloadLength(msg, length + sizeof(activemessage_header_t ));
}

//line 252
static inline  void ActiveMessageLayerP__Packet__setPayloadLength(message_t *msg, uint8_t len)
{
  ActiveMessageLayerP__RadioPacket__setPayloadLength(msg, len);
}

// 94 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
inline static  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Packet__setPayloadLength(message_t *arg_0x7eab5690, uint8_t arg_0x7eab5818){
//line 94
  ActiveMessageLayerP__Packet__setPayloadLength(arg_0x7eab5690, arg_0x7eab5818);
//line 94
}
//line 94
// 90 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
static inline  error_t /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__send(uint8_t clientId, message_t *msg,
uint8_t len)
//line 91
{
  if (clientId >= 1) {
      return FAIL;
    }
  if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[clientId].msg != (message_t *)0) {
      return EBUSY;
    }
  ;

  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[clientId].msg = msg;
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Packet__setPayloadLength(msg, len);

  if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current >= 1) {
      error_t err;
      am_id_t amId = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__type(msg);
      am_addr_t dest = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__destination(msg);

      ;
      /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current = clientId;

      err = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__send(amId, dest, msg, len);
      if (err != SUCCESS) {
          ;
          /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current = 1;
          /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[clientId].msg = (message_t *)0;
        }

      return err;
    }
  else {
      ;
    }
  return SUCCESS;
}

// 75 "/opt/tinyos-2.x/tos/interfaces/Send.nc"
inline static  error_t /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__send(message_t *arg_0x7ea00248, uint8_t arg_0x7ea003d0){
//line 75
  unsigned char result;
//line 75

//line 75
  result = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__send(0U, arg_0x7ea00248, arg_0x7ea003d0);
//line 75

//line 75
  return result;
//line 75
}
//line 75
// 240 "/usr/lib/ncc/nesc_nx.h"
static __inline uint8_t __nesc_hton_uint8(void *target, uint8_t value)
//line 240
{
  uint8_t *base = (uint8_t *)target;

//line 242
  base[0] = value;
  return value;
}

// 189 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  void ActiveMessageLayerP__AMPacket__setType(message_t *msg, am_id_t type)
{
  __nesc_hton_uint8((unsigned char *)&ActiveMessageLayerP__getHeader(msg)->type, type);
}

// 162 "/opt/tinyos-2.x/tos/interfaces/AMPacket.nc"
inline static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMPacket__setType(message_t *arg_0x7ea30c18, am_id_t arg_0x7ea30da0){
//line 162
  ActiveMessageLayerP__AMPacket__setType(arg_0x7ea30c18, arg_0x7ea30da0);
//line 162
}
//line 162
// 183 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   void Ieee154PacketLayerP__Ieee154PacketLayer__setDestAddr(message_t *msg, uint16_t addr)
{
  __nesc_hton_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->dest, addr);
}

// 146 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc"
inline static   void RF230RadioP__Ieee154PacketLayer__setDestAddr(message_t *arg_0x7e856900, uint16_t arg_0x7e856a90){
//line 146
  Ieee154PacketLayerP__Ieee154PacketLayer__setDestAddr(arg_0x7e856900, arg_0x7e856a90);
//line 146
}
//line 146
// 178 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230RadioP.nc"
static inline  void RF230RadioP__ActiveMessageConfig__setDestination(message_t *msg, am_addr_t addr)
{
  RF230RadioP__Ieee154PacketLayer__setDestAddr(msg, addr);
}

// 43 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageConfig.nc"
inline static  void ActiveMessageLayerP__Config__setDestination(message_t *arg_0x7e876b88, am_addr_t arg_0x7e876d18){
//line 43
  RF230RadioP__ActiveMessageConfig__setDestination(arg_0x7e876b88, arg_0x7e876d18);
//line 43
}
//line 43
// 169 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static __inline  void ActiveMessageLayerP__AMPacket__setDestination(message_t *msg, am_addr_t addr)
{
  ActiveMessageLayerP__Config__setDestination(msg, addr);
}

// 103 "/opt/tinyos-2.x/tos/interfaces/AMPacket.nc"
inline static  void /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMPacket__setDestination(message_t *arg_0x7ea33bd8, am_addr_t arg_0x7ea33d68){
//line 103
  ActiveMessageLayerP__AMPacket__setDestination(arg_0x7ea33bd8, arg_0x7ea33d68);
//line 103
}
//line 103
// 53 "/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc"
static inline  error_t /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__send(am_addr_t dest,
message_t *msg,
uint8_t len)
//line 55
{
  /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMPacket__setDestination(msg, dest);
  /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMPacket__setType(msg, 239);
  return /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__Send__send(msg, len);
}

// 80 "/opt/tinyos-2.x/tos/interfaces/AMSend.nc"
inline static  error_t RadioCountToLedsC__AMSend__send(am_addr_t arg_0x7eae42e0, message_t *arg_0x7eae4490, uint8_t arg_0x7eae4618){
//line 80
  unsigned char result;
//line 80

//line 80
  result = /*RadioCountToLedsAppC.AMSenderC.SenderC.AMQueueEntryP*/AMQueueEntryP$0__AMSend__send(arg_0x7eae42e0, arg_0x7eae4490, arg_0x7eae4618);
//line 80

//line 80
  return result;
//line 80
}
//line 80
// 105 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static inline   uint8_t MetadataFlagsLayerC__RadioPacket__maxPayloadLength(void)
{
  return MetadataFlagsLayerC__SubPacket__maxPayloadLength();
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t TimeStampingLayerP__SubPacket__maxPayloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = MetadataFlagsLayerC__RadioPacket__maxPayloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 131 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TimeStampingLayerP.nc"
static inline   uint8_t TimeStampingLayerP__RadioPacket__maxPayloadLength(void)
{
  return TimeStampingLayerP__SubPacket__maxPayloadLength();
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t PacketLinkLayerP__SubPacket__maxPayloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = TimeStampingLayerP__RadioPacket__maxPayloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 254 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline   uint8_t PacketLinkLayerP__RadioPacket__maxPayloadLength(void)
//line 254
{
  return PacketLinkLayerP__SubPacket__maxPayloadLength();
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t Ieee154PacketLayerP__SubPacket__maxPayloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = PacketLinkLayerP__RadioPacket__maxPayloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 281 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static inline   uint8_t Ieee154PacketLayerP__RadioPacket__maxPayloadLength(void)
{
  return Ieee154PacketLayerP__SubPacket__maxPayloadLength() - sizeof(ieee154_header_t );
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t TinyosNetworkLayerC__SubPacket__maxPayloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = Ieee154PacketLayerP__RadioPacket__maxPayloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 169 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static inline   uint8_t TinyosNetworkLayerC__TinyosPacket__maxPayloadLength(void)
{
  return TinyosNetworkLayerC__SubPacket__maxPayloadLength() - TinyosNetworkLayerC__PAYLOAD_OFFSET;
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
inline static   uint8_t ActiveMessageLayerP__SubPacket__maxPayloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = TinyosNetworkLayerC__TinyosPacket__maxPayloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 225 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static inline   uint8_t ActiveMessageLayerP__RadioPacket__maxPayloadLength(void)
{
  return ActiveMessageLayerP__SubPacket__maxPayloadLength() - sizeof(activemessage_header_t );
}

//line 257
static inline  uint8_t ActiveMessageLayerP__Packet__maxPayloadLength(void)
{
  return ActiveMessageLayerP__RadioPacket__maxPayloadLength();
}

// 106 "/opt/tinyos-2.x/tos/interfaces/Packet.nc"
inline static  uint8_t RadioCountToLedsC__Packet__maxPayloadLength(void){
//line 106
  unsigned char result;
//line 106

//line 106
  result = ActiveMessageLayerP__Packet__maxPayloadLength();
//line 106

//line 106
  return result;
//line 106
}
//line 106
//line 126
inline static  void *RadioCountToLedsC__Packet__getPayload(message_t *arg_0x7eab4540, uint8_t arg_0x7eab46c8){
//line 126
  void *result;
//line 126

//line 126
  result = ActiveMessageLayerP__Packet__getPayload(arg_0x7eab4540, arg_0x7eab46c8);
//line 126

//line 126
  return result;
//line 126
}
//line 126
// 57 "/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc"
static inline   void /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__toggle(void)
//line 57
{
//line 57
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 57
    * (volatile uint8_t *)34U ^= 1 << 2;
//line 57
    __nesc_atomic_end(__nesc_atomic); }
}

// 42 "/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc"
inline static   void LedsP__Led0__toggle(void){
//line 42
  /*HplAtm128GeneralIOC.PortA.Bit2*/HplAtm128GeneralIOPinP$2__IO__toggle();
//line 42
}
//line 42
// 84 "/opt/tinyos-2.x/tos/system/LedsP.nc"
static inline   void LedsP__Leds__led0Toggle(void)
//line 84
{
  LedsP__Led0__toggle();
  ;
//line 86
  ;
}

// 67 "/opt/tinyos-2.x/tos/interfaces/Leds.nc"
inline static   void RadioCountToLedsC__Leds__led0Toggle(void){
//line 67
  LedsP__Leds__led0Toggle();
//line 67
}
//line 67
// 84 "RadioCountToLedsC.nc"
static inline  void RadioCountToLedsC__MilliTimer__fired(void)
//line 84
{
  uint8_t i;

//line 86
  RadioCountToLedsC__counter++;
  RadioCountToLedsC__Leds__led0Toggle();
  ;
  if (RadioCountToLedsC__locked) {
      return;
    }
  else {
      radio_count_msg_t *rcm = (radio_count_msg_t *)RadioCountToLedsC__Packet__getPayload(&RadioCountToLedsC__packet, (uint8_t )0);

//line 94
      if (RadioCountToLedsC__Packet__maxPayloadLength() < sizeof(radio_count_msg_t )) {
          return;
        }

      __nesc_hton_uint16((unsigned char *)&rcm->src, TOS_NODE_ID);
      __nesc_hton_uint16((unsigned char *)&rcm->count, RadioCountToLedsC__counter);
      for (i = 0; i < 50; i++)
        __nesc_hton_uint16((unsigned char *)&rcm->vals[i], i);

      if (RadioCountToLedsC__AMSend__send(AM_BROADCAST_ADDR, &RadioCountToLedsC__packet, sizeof(radio_count_msg_t )) == SUCCESS) {
          ;
          RadioCountToLedsC__locked = TRUE;
        }
    }
}

// 204 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static inline   void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__default__fired(uint8_t num)
{
}

// 83 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__fired(uint8_t arg_0x7e3d55c8){
//line 83
  switch (arg_0x7e3d55c8) {
//line 83
    case 0U:
//line 83
      PacketLinkLayerP__DelayTimer__fired();
//line 83
      break;
//line 83
    case 1U:
//line 83
      RadioCountToLedsC__MilliTimer__fired();
//line 83
      break;
//line 83
    default:
//line 83
      /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__default__fired(arg_0x7e3d55c8);
//line 83
      break;
//line 83
    }
//line 83
}
//line 83
// 194 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   void HplAtm1281Timer2AsyncP__Compare__set(uint8_t t)
//line 194
{
  /* atomic removed: atomic calls only */
  {
    while (* (volatile uint8_t *)0xB6 & (1 << 3))
      ;
    * (volatile uint8_t *)0xB3 = t;
  }
}

// 54 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__set(/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__size_type arg_0x7e517d90){
//line 54
  HplAtm1281Timer2AsyncP__Compare__set(arg_0x7e517d90);
//line 54
}
//line 54
// 99 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   uint8_t HplAtm1281Timer2AsyncP__Timer__get(void)
//line 99
{
//line 99
  return * (volatile uint8_t *)0xB2;
}

// 61 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__timer_size /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__get(void){
//line 61
  unsigned char result;
//line 61

//line 61
  result = HplAtm1281Timer2AsyncP__Timer__get();
//line 61

//line 61
  return result;
//line 61
}
//line 61
// 278 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   int HplAtm1281Timer2AsyncP__TimerAsync__compareABusy(void)
//line 278
{
  return (* (volatile uint8_t *)0xB6 & (1 << 3)) != 0;
}

// 86 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc"
inline static   int /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerAsync__compareABusy(void){
//line 86
  int result;
//line 86

//line 86
  result = HplAtm1281Timer2AsyncP__TimerAsync__compareABusy();
//line 86

//line 86
  return result;
//line 86
}
//line 86
// 112 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setOcr2A(uint8_t n)
//line 112
{
  while (/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerAsync__compareABusy())
    ;
  if (n == /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__get()) {
    n++;
    }


  if (/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base + n + 1 < /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base) {
    n = -/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base - 1;
    }
//line 122
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__set(n);
}

// 67 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
inline static   error_t /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__postTask(void){
//line 67
  unsigned char result;
//line 67

//line 67
  result = SchedulerBasicP__TaskBasic__postTask(/*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired);
//line 67

//line 67
  return result;
//line 67
}
//line 67
// 81 "/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc"
static inline   void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__fired(void)
{
//line 82
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__postTask();
}

// 78 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__fired(void){
//line 78
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__fired();
//line 78
}
//line 78
// 139 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static inline  void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__fired(void)
{
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__fireTimers(/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__getNow());
}

// 83 "/opt/tinyos-2.x/tos/lib/timer/Timer.nc"
inline static  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__fired(void){
//line 83
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__TimerFrom__fired();
//line 83
}
//line 83
// 264 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline   uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getAlarm(void)
//line 264
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 265
    {
      unsigned long __nesc_temp =
//line 265
      /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__t0 + /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__dt;

      {
//line 265
        __nesc_atomic_end(__nesc_atomic);
//line 265
        return __nesc_temp;
      }
    }
//line 267
    __nesc_atomic_end(__nesc_atomic); }
}

// 116 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__size_type /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__getAlarm(void){
//line 116
  unsigned long result;
//line 116

//line 116
  result = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__getAlarm();
//line 116

//line 116
  return result;
//line 116
}
//line 116
// 74 "/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc"
static inline  void /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__runTask(void)
{
  if (/*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__m_oneshot == FALSE) {
    /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__start(/*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Alarm__getAlarm(), /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__m_dt, FALSE);
    }
//line 78
  /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__Timer__fired();
}

// 218 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static inline  void PacketLinkLayerP__send__runTask(void)
//line 218
{
  if (PacketLinkLayerP__PacketLink__getRetries(PacketLinkLayerP__currentSendMsg) > 0) {
      PacketLinkLayerP__PacketAcknowledgements__requestAck(PacketLinkLayerP__currentSendMsg);
    }

  if (PacketLinkLayerP__SubSend__send(PacketLinkLayerP__currentSendMsg) != SUCCESS) {
      PacketLinkLayerP__send__postTask();
    }
}

// 68 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc"
static inline  void /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__granted(void)
{
  error_t result = /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__SubSend__send(/*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__pending);

//line 71
  if (result != SUCCESS)
    {
      /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__release();
      /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__BareSend__sendDone(/*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__pending, result);
    }
}

// 165 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline   void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__default__granted(uint8_t id)
//line 165
{
}

// 102 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static  void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__granted(uint8_t arg_0x7e6da390){
//line 102
  switch (arg_0x7e6da390) {
//line 102
    case 0U:
//line 102
      /*RF230RadioC.AutoResourceAcquireLayerC*/AutoResourceAcquireLayerC$0__Resource__granted();
//line 102
      break;
//line 102
    default:
//line 102
      /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__default__granted(arg_0x7e6da390);
//line 102
      break;
//line 102
    }
//line 102
}
//line 102
// 155 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static inline  void /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__runTask(void)
//line 155
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 156
    {
      /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__reqResId;
      /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_BUSY;
    }
//line 159
    __nesc_atomic_end(__nesc_atomic); }
  /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__configure(/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId);
  /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__granted(/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId);
}

// 126 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
static inline  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__CancelTask__runTask(void)
//line 126
{
  uint8_t i;
//line 127
  uint8_t j;
//line 127
  uint8_t mask;
//line 127
  uint8_t last;
  message_t *msg;

//line 129
  for (i = 0; i < 1 / 8 + 1; i++) {
      if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__cancelMask[i]) {
          for (mask = 1, j = 0; j < 8; j++) {
              if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__cancelMask[i] & mask) {
                  last = i * 8 + j;
                  msg = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[last].msg;
                  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[last].msg = (message_t *)0;
                  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__cancelMask[i] &= ~mask;
                  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Send__sendDone(last, msg, ECANCEL);
                }
              mask <<= 1;
            }
        }
    }
}

//line 169
static inline  void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__runTask(void)
//line 169
{
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__sendDone(/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current, /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current].msg, FAIL);
}

// 55 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline  error_t /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__Init__init(void)
//line 55
{
  memset(/*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ, /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__NO_ENTRY, sizeof /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__resQ);
  return SUCCESS;
}

// 63 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/UniqueLayerP.nc"
static inline  error_t UniqueLayerP__Init__init(void)
{
  UniqueLayerP__sequenceNumber = TOS_NODE_ID << 4;
  return SUCCESS;
}

// 55 "/opt/tinyos-2.x/tos/chips/rf2xx/util/NeighborhoodP.nc"
static inline  error_t NeighborhoodP__Init__init(void)
{
  uint8_t i;

  for (i = 0; i < 5; ++i)
    NeighborhoodP__nodes[i] = AM_BROADCAST_ADDR;

  return SUCCESS;
}

// 181 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   void HplAtm1281Timer2AsyncP__Compare__start(void)
//line 181
{
//line 181
  * (volatile uint8_t *)0x70 |= 1 << 1;
}

// 65 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__start(void){
//line 65
  HplAtm1281Timer2AsyncP__Compare__start();
//line 65
}
//line 65
// 137 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   void HplAtm1281Timer2AsyncP__TimerCtrl__setControlB(uint8_t x)
//line 137
{
  // while (* (volatile uint8_t *)0xB6 & (1 << 0))
    // ;
  // * (volatile uint8_t *)0xB1 = ((Atm128_TCCR2B_t )x).flat;
}

// 82 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__setControlB(uint8_t arg_0x7e51bc70){
//line 82
  HplAtm1281Timer2AsyncP__TimerCtrl__setControlB(arg_0x7e51bc70);
//line 82
}
//line 82
// 131 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   void HplAtm1281Timer2AsyncP__TimerCtrl__setControlA(uint8_t x)
//line 131
{
  // while (* (volatile uint8_t *)0xB6 & (1 << 1))
    // ;
  // * (volatile uint8_t *)0xB0 = ((Atm128_TCCR2A_t )x).flat;
}

// 81 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__setControlA(uint8_t arg_0x7e51b7c8){
//line 81
  HplAtm1281Timer2AsyncP__TimerCtrl__setControlA(arg_0x7e51b7c8);
//line 81
}
//line 81
// 266 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   void HplAtm1281Timer2AsyncP__TimerAsync__setTimer2Asynchronous(void)
//line 266
{
  * (volatile uint8_t *)0xB6 |= 1 << 5;
}

// 68 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerAsync__setTimer2Asynchronous(void){
//line 68
  HplAtm1281Timer2AsyncP__TimerAsync__setTimer2Asynchronous();
//line 68
}
//line 68
// 89 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline  error_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Init__init(void)
//line 89
{
  /* atomic removed: atomic calls only */
  {
    Atm128_TCCR2A_t x;
    Atm128_TCCR2B_t y;

    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerAsync__setTimer2Asynchronous();
    x.flat = 0;
    x.bits.wgm21 = 1;
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__setControlA(x.flat);
    y.flat = 0;
    y.bits.cs = 3;
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__setControlB(y.flat);
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__set(/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MAXT);
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__start();
  }
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setInterrupt();
  return SUCCESS;
}

// 302 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static inline  error_t MessageBufferLayerP__SoftwareInit__init(void)
{
  uint8_t i;

  for (i = 0; i < MessageBufferLayerP__RECEIVE_QUEUE_SIZE; ++i)
    MessageBufferLayerP__receiveQueue[i] = MessageBufferLayerP__receiveQueueData + i;

  return SUCCESS;
}

// 55 "/opt/tinyos-2.x/tos/system/RandomMlcgC.nc"
static inline  error_t RandomMlcgC__Init__init(void)
//line 55
{
  /* atomic removed: atomic calls only */
//line 56
  RandomMlcgC__seed = (uint32_t )(TOS_NODE_ID + 1);

  return SUCCESS;
}

// 88 "/opt/tinyos-2.x/tos/interfaces/Resource.nc"
inline static   error_t RF230DriverLayerP__SpiResource__request(void){
//line 88
  unsigned char result;
//line 88

//line 88
  result = Atm128SpiP__Resource__request(0U);
//line 88

//line 88
  return result;
//line 88
}
//line 88
// 235 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline  error_t RF230DriverLayerP__SoftwareInit__init(void)
{

  return RF230DriverLayerP__SpiResource__request();
}

// 55 "/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc"
static inline  error_t /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__Init__init(void)
//line 55
{
  memset(/*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ, /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__NO_ENTRY, sizeof /*Atm128SpiC.Arbiter.Queue*/FcfsResourceQueueC$1__resQ);
  return SUCCESS;
}

// 62 "/opt/tinyos-2.x/tos/interfaces/Init.nc"
static error_t RealMainP__SoftwareInit__init(void){
//line 62
  unsigned char result = SUCCESS;
//line 62
  //result = STM32RtcC$Init$init();
//line 62
  result = ecombine(result, FcfsResourceQueueC$1__Init__init());
//line 62

  result = ecombine(result, RF230DriverLayerP__SoftwareInit__init());
//line 62
  result = ecombine(result, RandomMlcgC__Init__init());
//line 62
  result = ecombine(result, MessageBufferLayerP__SoftwareInit__init());
//line 62
 // result = ecombine(result, /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Init__init());
//line 62
  result = ecombine(result, NeighborhoodP__Init__init());
//line 62
  result = ecombine(result, UniqueLayerP__Init__init());
//line 62
  result = ecombine(result, /*RF230RadioC.SendResourceC.Queue*/FcfsResourceQueueC$0__Init__init());
//line 62

//line 62
  return result;
//line 62
}
//line 62
// 64 "RadioCountToLedsC.nc"
static inline  void RadioCountToLedsC__Boot__booted(void)
//line 64
{

  // Nived : Programming is booting. About to send radio start command
  uint32_t i;
//line 65
  uint32_t j;

//line 66
  RadioCountToLedsC__AMControl__start();
  RadioCountToLedsC__Leds__led0On();
}

// 60 "/opt/tinyos-2.x/tos/interfaces/Boot.nc"
static void RealMainP__Boot__booted(void){
//line 60
  RadioCountToLedsC__Boot__booted();
//line 60
}
//line 60
// 219 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   mcu_power_t HplAtm1281Timer2AsyncP__McuPowerOverride__lowestState(void)
//line 219
{
  uint8_t diff;


  if (* (volatile uint8_t *)0x70 & ((1 << 1) | (1 << 0))) {




      while (* (volatile uint8_t *)0xB6 & (((1 << 4) | (1 << 3)) | (1 << 1)))
        ;
      diff = * (volatile uint8_t *)0xB3 - * (volatile uint8_t *)0xB2;
      if (diff < EXT_STANDBY_T0_THRESHOLD ||
      * (volatile uint8_t *)0xB2 > 256 - EXT_STANDBY_T0_THRESHOLD) {
        return ATM128_POWER_EXT_STANDBY;
        }
//line 234
      return ATM128_POWER_SAVE;
    }
  else {
      return ATM128_POWER_DOWN;
    }
}

// 62 "/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc"
inline static   mcu_power_t McuSleepC__McuPowerOverride__lowestState(void){
//line 62
  unsigned char result;
//line 62

//line 62
  result = HplAtm1281Timer2AsyncP__McuPowerOverride__lowestState();
//line 62

//line 62
  return result;
//line 62
}
//line 62
// 107 "/opt/tinyos-2.x/tos/chips/atm1281/McuSleepC.nc"
static inline mcu_power_t McuSleepC__getPowerState(void)
//line 107
{










  // if ((
// //line 117
  // * (volatile uint8_t *)0x6E & ((1 << 1) | (1 << 2)) ||
  // * (volatile uint8_t *)0x6F & ((((1 << 5) | (1 << 1)) | (1 << 2)) | (1 << 3))) ||
  // * (volatile uint8_t *)0x71 & ((((1 << 5) | (1 << 1)) | (1 << 2)) | (1 << 3)))
    // {
      // return ATM128_POWER_IDLE;
    // }
  // else {
    // if (* (volatile uint8_t *)(uint16_t )& * (volatile uint8_t *)(0x2C + 0x20) & (1 << 7)) {
        // return ATM128_POWER_IDLE;
      // }
    // else {
      // if (* (volatile uint8_t *)0XC1 & (((1 << 6) | (1 << 7)) | (1 << 5))) {
          // return ATM128_POWER_IDLE;
        // }
      // else {
// //line 131
        // if (* (volatile uint8_t *)0XC9 & (((1 << 6) | (1 << 7)) | (1 << 5))) {
            // return ATM128_POWER_IDLE;
          // }
        // else {
          // if (* (volatile uint8_t *)(uint16_t )& * (volatile uint8_t *)0xBC & (1 << 2)) {
              // return ATM128_POWER_IDLE;
            // }
          // else {
            // if (* (volatile uint8_t *)(uint16_t )& * (volatile uint8_t *)0x7A & (1 << 7)) {
                // return ATM128_POWER_ADC_NR;
              // }
            // else {
                // return ATM128_POWER_DOWN;
              // }
            // }
          // }
        // }
      // }
    // }
	// Nived : Doesnt matter what is returned, this function will not be used for the stm32
	return ATM128_POWER_IDLE;
}

// 142 "/opt/tinyos-2.x/tos/chips/atm1281/atm128hardware.h"
static inline  mcu_power_t mcombine(mcu_power_t m1, mcu_power_t m2)
//line 142
{
  return m1 < m2 ? m1 : m2;
}

// 147 "/opt/tinyos-2.x/tos/chips/atm1281/McuSleepC.nc"
static inline   void McuSleepC__McuSleep__sleep(void)
//line 147
{
  uint8_t powerState;

  // powerState = mcombine(McuSleepC__getPowerState(), McuSleepC__McuPowerOverride__lowestState());
  // * (volatile uint8_t *)(0x33 + 0x20) = ((
  // * (volatile uint8_t *)(0x33 + 0x20) & 0xf0) | (1 << 0)) | __extension__ ({
// //line 152
    // uint16_t __addr16 = (uint16_t )(uint16_t )&McuSleepC__atm128PowerBits[powerState];
// //line 152
    // uint8_t __result;

// //line 152
     // __asm ("lpm %0, Z""\n\t" : "=r"(__result) : "z"(__addr16));__result;
  // }
  // );
// //line 153
   // __asm volatile ("sei");

   // __asm volatile ("sleep" :  :  : "memory");
   // __asm volatile ("cli");

  // * (volatile uint8_t *)(0x33 + 0x20) &= ~(1 << 0);
}

// 76 "/opt/tinyos-2.x/tos/interfaces/McuSleep.nc"
inline static   void SchedulerBasicP__McuSleep__sleep(void){
//line 76
  McuSleepC__McuSleep__sleep();
//line 76
}
//line 76
// 78 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
static __inline uint8_t SchedulerBasicP__popTask(void)
{
  if (SchedulerBasicP__m_head != SchedulerBasicP__NO_TASK)
    {
      uint8_t id = SchedulerBasicP__m_head;

//line 83
      SchedulerBasicP__m_head = SchedulerBasicP__m_next[SchedulerBasicP__m_head];
      if (SchedulerBasicP__m_head == SchedulerBasicP__NO_TASK)
        {
          SchedulerBasicP__m_tail = SchedulerBasicP__NO_TASK;
        }
      SchedulerBasicP__m_next[id] = SchedulerBasicP__NO_TASK;
      return id;
    }
  else
    {
      return SchedulerBasicP__NO_TASK;
    }
}

//line 149
static inline  void SchedulerBasicP__Scheduler__taskLoop(void)
{
  for (; ; )
    {
      uint8_t nextTask;

      { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
        {
          while ((nextTask = SchedulerBasicP__popTask()) == SchedulerBasicP__NO_TASK)
            {
              SchedulerBasicP__McuSleep__sleep();
            }
        }
//line 161
        __nesc_atomic_end(__nesc_atomic); }
      SchedulerBasicP__TaskBasic__runTask(nextTask);
    }
}

// 72 "/opt/tinyos-2.x/tos/interfaces/Scheduler.nc"
static void RealMainP__Scheduler__taskLoop(void){
//line 72
  SchedulerBasicP__Scheduler__taskLoop();
//line 72
}
//line 72
// 204 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static __inline void HplAtm1281Timer2AsyncP__stabiliseTimer2(void)
//line 204
{
  * (volatile uint8_t *)0xB0 = * (volatile uint8_t *)0xB0;
  while (* (volatile uint8_t *)0xB6 & (1 << 1))
    ;
}

// 58 "/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc"
static inline   void /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__Counter__overflow(void)
{
}

// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
inline static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__overflow(void){
//line 82
  /*HilTimerMilliC.CounterToLocalTimeC*/CounterToLocalTimeC$0__Counter__overflow();
//line 82
}
//line 82
// 90 "/opt/tinyos-2.x/tos/chips/atm1281/atm128hardware.h"
static  __inline void __nesc_enable_interrupt(void)
//line 90
{
	// Nived : Need to find the enable and disable interrupt
   //__asm volatile ("sei");
   }

// 191 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
static inline   uint8_t HplAtm1281Timer2AsyncP__Compare__get(void)
//line 191
{
//line 191
  return * (volatile uint8_t *)0xB3;
}

// 48 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__size_type /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__get(void){
//line 48
  unsigned char result;
//line 48

//line 48
  result = HplAtm1281Timer2AsyncP__Compare__get();
//line 48

//line 48
  return result;
//line 48
}
//line 48
// 187 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__fired(void)
//line 187
{
  int overflowed;


  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base += /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__get() + 1U;
  overflowed = !/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base;
  __nesc_enable_interrupt();
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setInterrupt();
  if (overflowed) {
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__overflow();
    }
}

// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void HplAtm1281Timer2AsyncP__Compare__fired(void){
//line 58
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__fired();
//line 58
}
//line 58
// 268 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static inline   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__overflow(void)
//line 268
{
}

// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   void HplAtm1281Timer2AsyncP__Timer__overflow(void){
//line 70
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__overflow();
//line 70
}
//line 70
// 113 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void Atm128SpiP__Spi__enableInterrupt(bool arg_0x7e114478){
//line 113
  HplAtm128SpiP__SPI__enableInterrupt(arg_0x7e114478);
//line 113
}
//line 113
// 210 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static inline error_t Atm128SpiP__sendNextPart(void)
//line 210
{
  uint16_t end;
  uint16_t tmpPos;
  uint16_t myLen;
  uint8_t *tx;
  uint8_t *rx;

  /* atomic removed: atomic calls only */
//line 217
  {
    myLen = Atm128SpiP__len;
    tx = Atm128SpiP__txBuffer;
    rx = Atm128SpiP__rxBuffer;
    tmpPos = Atm128SpiP__pos;
    end = Atm128SpiP__pos + Atm128SpiP__SPI_ATOMIC_SIZE;
    end = end > Atm128SpiP__len ? Atm128SpiP__len : end;
  }

  for (; tmpPos < end - 1; tmpPos++) {
      uint8_t val;

//line 228
      if (tx != (void *)0) {
        val = Atm128SpiP__SpiByte__write(tx[tmpPos]);
        }
      else {
//line 231
        val = Atm128SpiP__SpiByte__write(0);
        }
      if (rx != (void *)0) {
          rx[tmpPos] = val;
        }
    }



  Atm128SpiP__Spi__enableInterrupt(TRUE);
  /* atomic removed: atomic calls only */
//line 241
  {
    if (tx != (void *)0) {
      Atm128SpiP__Spi__write(tx[tmpPos]);
      }
    else {
//line 245
      Atm128SpiP__Spi__write(0);
      }
    Atm128SpiP__pos = tmpPos;
  }


  return SUCCESS;
}

//line 313
static inline   void Atm128SpiP__Spi__dataReady(uint8_t data)
//line 313
{
  bool again;

  /* atomic removed: atomic calls only */
//line 316
  {
    if (Atm128SpiP__rxBuffer != (void *)0) {
        Atm128SpiP__rxBuffer[Atm128SpiP__pos] = data;
      }

    Atm128SpiP__pos++;
  }
  Atm128SpiP__Spi__enableInterrupt(FALSE);
  /* atomic removed: atomic calls only */
  {
    again = Atm128SpiP__pos < Atm128SpiP__len;
  }

  if (again) {
      Atm128SpiP__sendNextPart();
    }
  else {
      uint8_t discard;
      uint16_t myLen;
      uint8_t *rx;
      uint8_t *tx;

      /* atomic removed: atomic calls only */
//line 338
      {
        myLen = Atm128SpiP__len;
        rx = Atm128SpiP__rxBuffer;
        tx = Atm128SpiP__txBuffer;
        Atm128SpiP__rxBuffer = (uint8_t *)0;
        Atm128SpiP__txBuffer = (uint8_t *)0;
        Atm128SpiP__len = 0;
        Atm128SpiP__pos = 0;
      }
      discard = Atm128SpiP__Spi__read();

      Atm128SpiP__SpiPacket__sendDone(tx, rx, myLen, SUCCESS);
    }
}

// 109 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128Spi.nc"
inline static   void HplAtm128SpiP__SPI__dataReady(uint8_t arg_0x7e115f08){
//line 109
  Atm128SpiP__Spi__dataReady(arg_0x7e115f08);
//line 109
}
//line 109
// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/Tasklet.nc"
inline static   void RadioAlarmP__Tasklet__schedule(void){
//line 59
  TaskletC__Tasklet__schedule();
//line 59
}
//line 59
// 64 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarmP.nc"
static inline   void RadioAlarmP__Alarm__fired(void)
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      if (RadioAlarmP__state == RadioAlarmP__STATE_WAIT) {
        RadioAlarmP__state = RadioAlarmP__STATE_FIRED;
        }
    }
//line 71
    __nesc_atomic_end(__nesc_atomic); }
  RadioAlarmP__Tasklet__schedule();
}

// 78 "/opt/tinyos-2.x/tos/lib/timer/Alarm.nc"
inline static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__fired(void){
//line 78
  RadioAlarmP__Alarm__fired();
//line 78
}
//line 78
// 119 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__fired(void)
//line 119
{
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__stop();
  ;
  __nesc_enable_interrupt();
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__fired();
}

// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void HplAtm1281Timer1P__CompareA__fired(void){
//line 58
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__fired();
//line 58
}
//line 58
// 229 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline    void HplAtm1281Timer1P__CompareB__default__fired(void)
//line 229
{
}

// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void HplAtm1281Timer1P__CompareB__fired(void){
//line 58
  HplAtm1281Timer1P__CompareB__default__fired();
//line 58
}
//line 58
// 233 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline    void HplAtm1281Timer1P__CompareC__default__fired(void)
//line 233
{
}

// 58 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc"
inline static   void HplAtm1281Timer1P__CompareC__fired(void){
//line 58
  HplAtm1281Timer1P__CompareC__default__fired();
//line 58
}
//line 58
// 672 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static inline   void RF230DriverLayerP__IRQ__captured(uint16_t time)
{
  for (; 0; ) ;

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      RF230DriverLayerP__capturedTime = time;
      RF230DriverLayerP__radioIrq = TRUE;
    }
//line 680
    __nesc_atomic_end(__nesc_atomic); }

  RF230DriverLayerP__Tasklet__schedule();
}

// 61 "/opt/tinyos-2.x/tos/interfaces/GpioCapture.nc"
inline static   void HplRF230P__IRQ__captured(uint16_t arg_0x7e23aa30){
//line 61
  RF230DriverLayerP__IRQ__captured(arg_0x7e23aa30);
//line 61
}
//line 61
// 219 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
static inline   uint16_t HplAtm1281Timer1P__Capture__get(void)
//line 219
{
//line 219
  return * (volatile uint16_t *)0x86;
}

// 47 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
inline static   HplRF230P__Capture__size_type HplRF230P__Capture__get(void){
//line 47
  unsigned short result;
//line 47

//line 47
  result = HplAtm1281Timer1P__Capture__get();
//line 47

//line 47
  return result;
//line 47
}
//line 47
// 64 "/opt/tinyos-2.x/tos/platforms/iris/chips/rf230/HplRF230P.nc"
static inline   void HplRF230P__Capture__captured(uint16_t time)
{
  time = HplRF230P__Capture__get();
  HplRF230P__IRQ__captured(time);
}

// 60 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Capture.nc"
inline static   void HplAtm1281Timer1P__Capture__captured(HplAtm1281Timer1P__Capture__size_type arg_0x7e1543a0){
//line 60
  HplRF230P__Capture__captured(arg_0x7e1543a0);
//line 60
}
//line 60
// 126 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static inline   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__overflow(void)
//line 126
{
}

// 60 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128TimerInitC.nc"
static inline   void /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__overflow(void)
//line 60
{
}

// 58 "/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc"
static inline   void /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__overflow(void)
{
}

// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
inline static   void /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__overflow(void){
//line 82
  /*LocalTimeMicroC.CounterToLocalTimeC*/CounterToLocalTimeC$1__Counter__overflow();
//line 82
}
//line 82
// 133 "/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc"
static inline   void /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__overflow(void)
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__m_upper++;
      if ((/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__m_upper & /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__OVERFLOW_MASK) == 0) {
        /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__overflow();
        }
    }
//line 141
    __nesc_atomic_end(__nesc_atomic); }
}

// 82 "/opt/tinyos-2.x/tos/lib/timer/Counter.nc"
inline static   void /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__overflow(void){
//line 82
  /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__overflow();
//line 82
}
//line 82
// 65 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128CounterC.nc"
static inline   void /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__overflow(void)
{
  /*CounterOne16C.NCounter*/Atm128CounterC$0__Counter__overflow();
}

// 70 "/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc"
inline static   void HplAtm1281Timer1P__Timer__overflow(void){
//line 70
  /*CounterOne16C.NCounter*/Atm128CounterC$0__Timer__overflow();
//line 70
  /*InitOneP.InitOne*/Atm128TimerInitC$0__Timer__overflow();
//line 70
  /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__overflow();
//line 70
}
//line 70
// 63 "/opt/tinyos-2.x/tos/system/RealMainP.nc"
  int main_tinyos(void)
//line 63
{


    RealMainP__Scheduler__init();

  
  /*

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {





      {
      }
//line 71
      ;

      RealMainP__Scheduler__init();





      RealMainP__PlatformInit__init();
      while (RealMainP__Scheduler__runNextTask()) ;





      RealMainP__SoftwareInit__init();
      while (RealMainP__Scheduler__runNextTask()) ;
    }
//line 88
    __nesc_atomic_end(__nesc_atomic); }


  __nesc_enable_interrupt();

  RealMainP__Boot__booted();


  RealMainP__Scheduler__taskLoop();

	*/

  return -1;
}

// 134 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
static  bool SchedulerBasicP__Scheduler__runNextTask(void)
{
  uint8_t nextTask;

  /* atomic removed: atomic calls only */
//line 138
  {
    nextTask = SchedulerBasicP__popTask();
    if (nextTask == SchedulerBasicP__NO_TASK)
      {
        {
          unsigned char __nesc_temp =
//line 142
          FALSE;

//line 142
          return __nesc_temp;
        }
      }
  }
//line 145
  SchedulerBasicP__TaskBasic__runTask(nextTask);
  return TRUE;
}

//line 175
static   void SchedulerBasicP__TaskBasic__default__runTask(uint8_t id)
{
}

// 75 "/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc"
static  void SchedulerBasicP__TaskBasic__runTask(uint8_t arg_0x7efc0800){
//line 75
  switch (arg_0x7efc0800) {
//line 75
    case /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__CancelTask:
//line 75
      /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__CancelTask__runTask();
//line 75
      break;
//line 75
    case /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask:
//line 75
      /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__runTask();
//line 75
      break;
//line 75
    case /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask:
//line 75
      /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__runTask();
//line 75
      break;
//line 75
    case PacketLinkLayerP__send:
//line 75
      PacketLinkLayerP__send__runTask();
//line 75
      break;
//line 75
    case /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired:
//line 75
      /*HilTimerMilliC.AlarmToTimerC*/AlarmToTimerC$0__fired__runTask();
//line 75
      break;
//line 75
    case /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer:
//line 75
      /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__runTask();
//line 75
      break;
//line 75
    case MessageBufferLayerP__stateDoneTask:
//line 75
      MessageBufferLayerP__stateDoneTask__runTask();
//line 75
      break;
//line 75
    case MessageBufferLayerP__sendTask:
//line 75
      MessageBufferLayerP__sendTask__runTask();
//line 75
      break;
//line 75
    case MessageBufferLayerP__deliverTask:
//line 75
      MessageBufferLayerP__deliverTask__runTask();
//line 75
      break;
//line 75
    case RandomCollisionLayerP__calcNextRandom:
//line 75
      RandomCollisionLayerP__calcNextRandom__runTask();
//line 75
      break;
//line 75
    case Atm128SpiP__zeroTask:
//line 75
      Atm128SpiP__zeroTask__runTask();
//line 75
      break;
//line 75
    case /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask:
//line 75
      /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__grantedTask__runTask();
//line 75
      break;
//line 75
    default:
//line 75
      SchedulerBasicP__TaskBasic__default__runTask(arg_0x7efc0800);
//line 75
      break;
//line 75
    }
//line 75
}
//line 75
// 370 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static   error_t Atm128SpiP__Resource__release(uint8_t id)
//line 370
{
  error_t error = Atm128SpiP__ResourceArbiter__release(id);

//line 372
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 372
    {
      if (!Atm128SpiP__ArbiterInfo__inUse()) {
          Atm128SpiP__stopSpi();
        }
    }
//line 376
    __nesc_atomic_end(__nesc_atomic); }
  return error;
}

// 170 "/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc"
static   error_t SchedulerBasicP__TaskBasic__postTask(uint8_t id)
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 172
    {
//line 172
      {
        unsigned char __nesc_temp =
//line 172
        SchedulerBasicP__pushTask(id) ? SUCCESS : EBUSY;

        {
//line 172
          __nesc_atomic_end(__nesc_atomic);
//line 172
          return __nesc_temp;
        }
      }
    }
//line 175
    __nesc_atomic_end(__nesc_atomic); }
}

// 124 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static   bool /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__ArbiterInfo__inUse(void)
//line 124
{
  /* atomic removed: atomic calls only */
//line 125
  {
    if (/*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__state == /*Atm128SpiC.Arbiter.Arbiter*/SimpleArbiterP$1__RES_IDLE)
      {
        unsigned char __nesc_temp =
//line 127
        FALSE;

//line 127
        return __nesc_temp;
      }
  }
//line 129
  return TRUE;
}

// 147 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static   void HplAtm128SpiP__SPI__enableSpi(bool enabled)
//line 147
{

 // Nived : Unsure of what is happening here
 // Does something with power. Commmenting out for now

 /*
  if (enabled) {
      * (volatile uint8_t *)(0x2C + 0x20) |= 1 << 6;
      HplAtm128SpiP__Mcu__update();
    }
  else {
      * (volatile uint8_t *)(0x2C + 0x20) &= ~(1 << 6);
      HplAtm128SpiP__Mcu__update();
    }
	*/
}

// 112 "/opt/tinyos-2.x/tos/chips/rf2xx/util/TaskletC.nc"
static   void TaskletC__Tasklet__schedule(void)
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      if (TaskletC__state != 0)
        {
          TaskletC__state |= 0x80;
          {
//line 119
            __nesc_atomic_end(__nesc_atomic);
//line 119
            return;
          }
        }
      TaskletC__state = 1;
    }
//line 123
    __nesc_atomic_end(__nesc_atomic); }

  TaskletC__doit();
}

//line 74
static void TaskletC__doit(void)
{
  for (; ; )
    {
      TaskletC__Tasklet__run();

      { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
        {
          if (TaskletC__state == 1)
            {
              TaskletC__state = 0;
              {
//line 85
                __nesc_atomic_end(__nesc_atomic);
//line 85
                return;
              }
            }
          for (; 0; ) ;
          TaskletC__state = 1;
        }
//line 90
        __nesc_atomic_end(__nesc_atomic); }
    }
}

// 283 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static bool RF230DriverLayerP__isSpiAcquired(void)
{
  if (RF230DriverLayerP__SpiResource__isOwner()) {
    return TRUE;
    }
  if (RF230DriverLayerP__SpiResource__immediateRequest() == SUCCESS)
    {
      RF230DriverLayerP__SELN__makeOutput();
      RF230DriverLayerP__SELN__set();

      return TRUE;
    }

  RF230DriverLayerP__SpiResource__request();
  return FALSE;
}

void RCC_Configuration(void)
{
  /* PCLK2 = HCLK/2 */
   RCC_PCLK2Config(RCC_HCLK_Div2);

  /* Enable SPIx clock and GPIO clock for SPIx and SPIy */
  RCC_APB2PeriphClockCmd(SPIx_GPIO_CLK | SPIy_GPIO_CLK | SPIx_CLK, ENABLE);

  /* Enable SPIx Periph clock */
  RCC_APB1PeriphClockCmd(SPIy_CLK, ENABLE);

}

void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;

#ifdef USE_STM3210C_EVAL
  /* Enable SPI3 Pins Software Remapping */
  GPIO_PinRemapConfig(GPIO_Remap_SPI3, ENABLE);
#endif

  /* Configure SPIx pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = SPIx_PIN_SCK | SPIx_PIN_MISO | SPIx_PIN_MOSI;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);


}

// 120 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static void Atm128SpiP__startSpi(void)
//line 120
{
  Atm128SpiP__Spi__enableSpi(FALSE);
  {
  //__nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 122
    {

	   RCC_Configuration();

	   GPIO_Configuration();

      //Atm128SpiP__Spi__initMaster();
      // Atm128SpiP__Spi__enableInterrupt(FALSE);
      // Atm128SpiP__Spi__setMasterDoubleSpeed(TRUE);
      // Atm128SpiP__Spi__setClockPolarity(FALSE);
      // Atm128SpiP__Spi__setClockPhase(FALSE);
      // Atm128SpiP__Spi__setClock(0);
      // Atm128SpiP__Spi__enableSpi(TRUE);

	     //CPU_SPI_Initialize();

		// config.DeviceCS = 10;
		// config.CS_Active = false;
		// config.CS_Setup_uSecs = 0;
		// config.CS_Hold_uSecs = 0;
		// config.MSK_IDLE = false;
		// config.MSK_SampleEdge = false;
		// config.Clock_RateKHz = 2;
		// config.SPI_mod = 0;
		// //config.BusyPin.Pin = ;
		// //config.BusyPin.ActiveState = ;
		// //config.MD_16Bits = false;

		// CPU_SPI_Xaction_Start(config);

        SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
		SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
		SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
		SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
		SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
		SPI_InitStructure.SPI_NSS = SPI_NSS_Hard;
		SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
		SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
		SPI_InitStructure.SPI_CRCPolynomial = 7;

		SPI_Init(SPIx, &SPI_InitStructure);
		SPI_SSOutputCmd(SPIx, ENABLE);
		SPI_Cmd(SPIx, ENABLE);


		/*
		// Testing the SPI Interface
		while(1)
		{

			while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
			SPI_I2S_SendData(SPIx, (uint8_t) 2);

			while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
			uint8_t data = SPI_I2S_ReceiveData(SPIx);
		}
		*/

	    // SPI_Cmd(SPIx, ENABLE);

	   // Nived: Using kart's spi driver


	   //SPI_StructInit(Configuration);


    }
//line 130
    //__nesc_atomic_end(__nesc_atomic);
	}
  //Atm128SpiP__McuPowerState__update();
}

// 132 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
static   void HplAtm128SpiP__SPI__enableInterrupt(bool enabled)
//line 132
{
  if (enabled) {
      * (volatile uint8_t *)(0x2C + 0x20) |= 1 << 7;
      HplAtm128SpiP__Mcu__update();
    }
  else {
      * (volatile uint8_t *)(0x2C + 0x20) &= ~(1 << 7);
      HplAtm128SpiP__Mcu__update();
    }
}

// 361 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static   error_t Atm128SpiP__Resource__request(uint8_t id)
//line 361
{
  { //__nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 362
    {
      if (!Atm128SpiP__ArbiterInfo__inUse()) {
	  // Nived: Using Karts driver
	  //CPU_SPI_Initialize();
          Atm128SpiP__startSpi();
        }
    }
//line 366
    //__nesc_atomic_end(__nesc_atomic);
	}
  return Atm128SpiP__ResourceArbiter__request(id);
}

// 66 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static   void MetadataFlagsLayerC__PacketFlag__set(uint8_t bit, message_t *msg)
{
  for (; 0; ) ;

  MetadataFlagsLayerC__getMeta(msg)->flags |= 1 << bit;
}

// 104 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static rf230_metadata_t *RF230DriverLayerP__getMeta(message_t *msg)
{
  return (rf230_metadata_t *)((void *)msg + sizeof(message_t ) - RF230DriverLayerP__RadioPacket__metadataLength(msg));
}

// 80 "/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc"
static   /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__Counter__get(void)
{
  /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type rv = 0;

//line 83
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__upper_count_type high = /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__m_upper;
      /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__from_size_type low = /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__get();

//line 87
      if (/*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__isOverflowPending())
        {






          high++;
          low = /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__CounterFrom__get();
        }
      {
        /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type high_to = high;
        /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__to_size_type low_to = low >> /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__LOW_SHIFT_RIGHT;

//line 101
        rv = (high_to << /*LocalTimeMicroC.TransformCounterC*/TransformCounterC$0__HIGH_SHIFT_LEFT) | low_to;
      }
    }
//line 103
    __nesc_atomic_end(__nesc_atomic); }
  return rv;
}

// 65 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t TimeStampingLayerP__SubPacket__metadataLength(message_t *arg_0x7e843a08){
//line 65
  unsigned char result;
//line 65

//line 65
  result = MetadataFlagsLayerC__RadioPacket__metadataLength(arg_0x7e843a08);
//line 65

//line 65
  return result;
//line 65
}
//line 65
// 94 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__isDataFrame(message_t *msg)
{
  return (__nesc_ntoh_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->fcf) & Ieee154PacketLayerP__IEEE154_DATA_FRAME_MASK) == Ieee154PacketLayerP__IEEE154_DATA_FRAME_VALUE;
}

//line 178
static   uint16_t Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(message_t *msg)
{
  return __nesc_ntoh_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->dest);
}

// 83 "/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmC.nc"
static   void /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__Alarm__startAt(/*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size t0, /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size dt)
//line 83
{






  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size now;
//line 92
      /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size elapsed;
//line 92
      /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__timer_size expires;

      ;


      now = /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Timer__get();
      elapsed = now + 3 - t0;
      if (elapsed >= dt) {
        expires = now + 3;
        }
      else {
//line 102
        expires = t0 + dt;
        }



      if (expires == 0) {
        expires = 1;
        }



      /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__set(expires - 1);
      /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__reset();
      /*HplRF230C.AlarmC.NAlarm*/Atm128AlarmC$0__HplAtm128Compare__start();
    }
//line 116
    __nesc_atomic_end(__nesc_atomic); }
}

// 217 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static   void MessageBufferLayerP__RadioSend__sendDone(error_t error)
{
  for (; 0; ) ;

  MessageBufferLayerP__txError = error;
  if (error == SUCCESS) {
    MessageBufferLayerP__state = MessageBufferLayerP__STATE_TX_DONE;
    }
  else {
//line 225
    MessageBufferLayerP__state = MessageBufferLayerP__STATE_TX_PENDING;
    }
  MessageBufferLayerP__sendTask__postTask();
}

// 99 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static void *RF230DriverLayerP__getPayload(message_t *msg)
{
  return (void *)msg + RF230DriverLayerP__RadioPacket__headerLength(msg);
}

// 104 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__isAckFrame(message_t *msg)
{
  return (__nesc_ntoh_leuint16((unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->fcf) & Ieee154PacketLayerP__IEEE154_ACK_FRAME_MASK) == Ieee154PacketLayerP__IEEE154_ACK_FRAME_VALUE;
}

//line 205
static   bool Ieee154PacketLayerP__Ieee154PacketLayer__requiresAckReply(message_t *msg)
{
  return Ieee154PacketLayerP__Ieee154PacketLayer__getAckRequired(msg)
   && Ieee154PacketLayerP__Ieee154PacketLayer__isDataFrame(msg)
   && Ieee154PacketLayerP__Ieee154PacketLayer__getDestAddr(msg) == Ieee154PacketLayerP__ActiveMessageAddress__amAddress();
}

// 106 "/opt/tinyos-2.x/tos/system/ActiveMessageAddressC.nc"
static   am_addr_t ActiveMessageAddressC__amAddress(void)
//line 106
{
  am_addr_t myAddr;

//line 108
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 108
    myAddr = ActiveMessageAddressC__addr;
//line 108
    __nesc_atomic_end(__nesc_atomic); }
  return myAddr;
}

// 883 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static   void RF230DriverLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length)
{
  for (; 0; ) ;
  for (; 0; ) ;


  __nesc_hton_leuint8((unsigned char *)&RF230DriverLayerP__getHeader(msg)->length, length + 2);
}

//line 428
static   error_t RF230DriverLayerP__RadioSend__send(message_t *msg)
{
  uint16_t time;
  uint8_t length;
  uint8_t *data;
  uint8_t header;
  uint32_t time32;
  void *timesync;

  if (((RF230DriverLayerP__cmd != RF230DriverLayerP__CMD_NONE || RF230DriverLayerP__state != RF230DriverLayerP__STATE_RX_ON) || !RF230DriverLayerP__isSpiAcquired()) || RF230DriverLayerP__radioIrq) {
    return EBUSY;
    }
  length = (RF230DriverLayerP__PacketTransmitPower__isSet(msg) ?
  RF230DriverLayerP__PacketTransmitPower__get(msg) : 0) & RF230_TX_PWR_MASK;

  if (length != RF230DriverLayerP__txPower)
    {
      RF230DriverLayerP__txPower = length;
      RF230DriverLayerP__writeRegister(RF230_PHY_TX_PWR, RF230_TX_AUTO_CRC_ON | RF230DriverLayerP__txPower);
    }


  if (
//line 449
  RF230DriverLayerP__Config__requiresRssiCca(msg)
   && (RF230DriverLayerP__readRegister(RF230_PHY_RSSI) & RF230_RSSI_MASK) > (RF230DriverLayerP__rssiClear + RF230DriverLayerP__rssiBusy) >> 3) {
    return EBUSY;
    }
  RF230DriverLayerP__writeRegister(RF230_TRX_STATE, RF230_PLL_ON);


  time32 = RF230DriverLayerP__LocalTime__get();
  timesync = RF230DriverLayerP__PacketTimeSyncOffset__isSet(msg) ? (void *)msg + RF230DriverLayerP__PacketTimeSyncOffset__get(msg) : 0;


  if ((RF230DriverLayerP__readRegister(RF230_TRX_STATUS) & RF230_TRX_STATUS_MASK) != RF230_PLL_ON)
    {
      for (; 0; ) ;

      RF230DriverLayerP__state = RF230DriverLayerP__STATE_PLL_ON_2_RX_ON;
      return EBUSY;
    }


  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      RF230DriverLayerP__SLP_TR__set();
      time = RF230DriverLayerP__RadioAlarm__getNow();
    }
//line 473
    __nesc_atomic_end(__nesc_atomic); }
  RF230DriverLayerP__SLP_TR__clr();


  for (; 0; ) ;

  RF230DriverLayerP__SELN__clr();
  RF230DriverLayerP__FastSpiByte__splitWrite(RF230_CMD_FRAME_WRITE);

  data = (uint8_t *) RF230DriverLayerP__getPayload(msg);
  length = __nesc_ntoh_leuint8((unsigned char *)&RF230DriverLayerP__getHeader(msg)->length);


  RF230DriverLayerP__FastSpiByte__splitReadWrite(length);


  length -= 2;

  header = RF230DriverLayerP__Config__headerPreloadLength();
  if (header > length) {
    header = length;
    }
  length -= header;


  do {
      RF230DriverLayerP__FastSpiByte__splitReadWrite(* data++);
    }
  while (--header != 0);










  time32 += (int16_t )(time + RF230DriverLayerP__TX_SFD_DELAY) - (int16_t )time32;

  if (timesync != 0) {
    __nesc_hton_int32((unsigned char *)&* (timesync_relative_t *)timesync, __nesc_ntoh_uint32((unsigned char *)&* (timesync_absolute_t *)timesync) - time32);
    }
  while (length-- != 0)
    RF230DriverLayerP__FastSpiByte__splitReadWrite(* data++);


  RF230DriverLayerP__FastSpiByte__splitRead();
  RF230DriverLayerP__SELN__set();
//line 537
  RF230DriverLayerP__writeRegister(RF230_TRX_STATE, RF230_RX_ON);

  if (timesync != 0) {
    __nesc_hton_uint32((unsigned char *)&* (timesync_absolute_t *)timesync, __nesc_ntoh_int32((unsigned char *)&* (timesync_relative_t *)timesync) + time32);
    }
  RF230DriverLayerP__PacketTimeStamp__set(msg, time32);
//line 559
  RF230DriverLayerP__state = RF230DriverLayerP__STATE_BUSY_TX_2_RX_ON;
  RF230DriverLayerP__cmd = RF230DriverLayerP__CMD_TRANSMIT;

  return SUCCESS;
}

// 61 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc"
static   bool MetadataFlagsLayerC__PacketFlag__get(uint8_t bit, message_t *msg)
{
  return MetadataFlagsLayerC__getMeta(msg)->flags & (1 << bit);
}

// 878 "/opt/tinyos-2.x/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc"
static   uint8_t RF230DriverLayerP__RadioPacket__payloadLength(message_t *msg)
{
  return __nesc_ntoh_leuint8((unsigned char *)&RF230DriverLayerP__getHeader(msg)->length) - 2;
}

// 49 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioAlarm.nc"
static   void RandomCollisionLayerP__RadioAlarm__wait(uint16_t arg_0x7e8481b8){
//line 49
  RadioAlarmP__RadioAlarm__wait(1U, arg_0x7e8481b8);
//line 49
}
//line 49
// 252 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static   void MessageBufferLayerP__RadioSend__ready(void)
{
  if (MessageBufferLayerP__state == MessageBufferLayerP__STATE_TX_RETRY)
    {
      MessageBufferLayerP__state = MessageBufferLayerP__STATE_TX_PENDING;
      MessageBufferLayerP__sendTask__postTask();
    }
}

// 84 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc"
static uint16_t RandomCollisionLayerP__getBackoff(uint16_t maxBackoff)
{
  uint16_t a;

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      a = RandomCollisionLayerP__nextRandom;
      RandomCollisionLayerP__nextRandom += 273;
    }
//line 92
    __nesc_atomic_end(__nesc_atomic); }
  RandomCollisionLayerP__calcNextRandom__postTask();

  return a % maxBackoff + RandomCollisionLayerP__Config__getMinimumBackoff();
}

// 69 "/opt/tinyos-2.x/tos/system/RandomMlcgC.nc"
static   uint32_t RandomMlcgC__Random__rand32(void)
//line 69
{
  uint32_t mlcg;
//line 70
  uint32_t p;
//line 70
  uint32_t q;
  uint64_t tmpseed;

//line 72
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      tmpseed = (uint64_t )33614U * (uint64_t )RandomMlcgC__seed;
      q = tmpseed;
      q = q >> 1;
      p = tmpseed >> 32;
      mlcg = p + q;
      if (mlcg & 0x80000000) {
          mlcg = mlcg & 0x7FFFFFFF;
          mlcg++;
        }
      RandomMlcgC__seed = mlcg;
    }
//line 84
    __nesc_atomic_end(__nesc_atomic); }
  return mlcg;
}

// 266 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static   uint8_t Ieee154PacketLayerP__RadioPacket__headerLength(message_t *msg)
{
  return Ieee154PacketLayerP__SubPacket__headerLength(msg) + sizeof(ieee154_header_t );
}

// 210 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static   uint8_t ActiveMessageLayerP__RadioPacket__headerLength(message_t *msg)
{
  return ActiveMessageLayerP__SubPacket__headerLength(msg) + sizeof(activemessage_header_t );
}

// 99 "/opt/tinyos-2.x/tos/chips/rf2xx/util/TaskletC.nc"
static  void TaskletC__Tasklet__resume(void)
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      if (--TaskletC__state != 0x80) {
        {
//line 104
          __nesc_atomic_end(__nesc_atomic);
//line 104
          return;
        }
        }
//line 106
      TaskletC__state = 1;
    }
//line 107
    __nesc_atomic_end(__nesc_atomic); }

  TaskletC__doit();
}

// 229 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static void PacketLinkLayerP__signalDone(error_t error)
//line 229
{
  message_t *msg = PacketLinkLayerP__currentSendMsg;

//line 231
  PacketLinkLayerP__currentSendMsg = (message_t *)0;




  PacketLinkLayerP__DelayTimer__stop();
  PacketLinkLayerP__PacketLink__setRetries(msg, PacketLinkLayerP__totalRetries);
  PacketLinkLayerP__Send__sendDone(msg, error);
}

// 97 "/opt/tinyos-2.x/tos/system/SimpleArbiterP.nc"
static   error_t /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Resource__release(uint8_t id)
//line 97
{
  bool released = FALSE;

//line 99
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
//line 99
    {
      if (/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state == /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_BUSY && /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId == id) {
          if (/*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__isEmpty() == FALSE) {
              /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__NO_RES;
              /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__reqResId = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__Queue__dequeue();
              /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_GRANTING;
              /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__grantedTask__postTask();
            }
          else {
              /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__resId = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__NO_RES;
              /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__state = /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__RES_IDLE;
            }
          released = TRUE;
        }
    }
//line 113
    __nesc_atomic_end(__nesc_atomic); }
  if (released == TRUE) {
      /*RF230RadioC.SendResourceC.Arbiter*/SimpleArbiterP$0__ResourceConfigure__unconfigure(id);
      return SUCCESS;
    }
  return FAIL;
}

// 174 "/opt/tinyos-2.x/tos/system/AMQueueImplP.nc"
static void /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__tryToSend(void)
//line 174
{
  /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__nextPacket();
  if (/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current < 1) {
      error_t nextErr;
      message_t *nextMsg = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__queue[/*AMQueueP.AMQueueImplP*/AMQueueImplP$0__current].msg;
      am_id_t nextId = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__type(nextMsg);
      am_addr_t nextDest = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMPacket__destination(nextMsg);
      uint8_t len = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__Packet__payloadLength(nextMsg);

//line 182
      nextErr = /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__AMSend__send(nextId, nextDest, nextMsg, len);
      if (nextErr != SUCCESS) {
          /*AMQueueP.AMQueueImplP*/AMQueueImplP$0__errorTask__postTask();
        }
    }
}

// 74 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static  error_t ActiveMessageLayerP__AMSend__send(am_id_t id, am_addr_t addr, message_t *msg, uint8_t len)
{
  if (len > ActiveMessageLayerP__Packet__maxPayloadLength()) {
    return EINVAL;
    }
  if (ActiveMessageLayerP__Config__checkFrame(msg) != SUCCESS) {
    return FAIL;
    }
  ActiveMessageLayerP__Packet__setPayloadLength(msg, len);
  ActiveMessageLayerP__AMPacket__setSource(msg, ActiveMessageLayerP__AMPacket__address());
  ActiveMessageLayerP__AMPacket__setGroup(msg, ActiveMessageLayerP__AMPacket__localGroup());
  ActiveMessageLayerP__AMPacket__setType(msg, id);
  ActiveMessageLayerP__AMPacket__setDestination(msg, addr);

  ActiveMessageLayerP__SendNotifier__aboutToSend(id, addr, msg);

  return ActiveMessageLayerP__SubSend__send(msg);
}

// 59 "/opt/tinyos-2.x/tos/chips/rf2xx/util/RadioPacket.nc"
static   uint8_t MetadataFlagsLayerC__SubPacket__maxPayloadLength(void){
//line 59
  unsigned char result;
//line 59

//line 59
  result = RF230DriverLayerP__RadioPacket__maxPayloadLength();
//line 59

//line 59
  return result;
//line 59
}
//line 59
// 276 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static   void Ieee154PacketLayerP__RadioPacket__setPayloadLength(message_t *msg, uint8_t length)
{
  Ieee154PacketLayerP__SubPacket__setPayloadLength(msg, length + sizeof(ieee154_header_t ));
}

// 132 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc"
static  error_t TinyosNetworkLayerC__TinyosSend__send(message_t *msg)
{

  __nesc_hton_leuint8((unsigned char *)&TinyosNetworkLayerC__getHeader(msg)->network, 0x3f);

  return TinyosNetworkLayerC__SubSend__send(msg);
}

// 131 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static  uint16_t PacketLinkLayerP__PacketLink__getRetries(message_t *msg)
//line 131
{
  return PacketLinkLayerP__getMeta(msg)->maxRetries;
}

// 137 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc"
static   void Ieee154PacketLayerP__Ieee154PacketLayer__setAckRequired(message_t *msg, bool ack)
{
  unsigned char *__nesc_temp43;
  unsigned char *__nesc_temp42;

//line 139
  if (ack) {
    (__nesc_temp42 = (unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->fcf, __nesc_hton_leuint16(__nesc_temp42, __nesc_ntoh_leuint16(__nesc_temp42) | (1 << IEEE154_FCF_ACK_REQ)));
    }
  else {
//line 142
    (__nesc_temp43 = (unsigned char *)&Ieee154PacketLayerP__getHeader(msg)->fcf, __nesc_hton_leuint16(__nesc_temp43, __nesc_ntoh_leuint16(__nesc_temp43) & ~ (uint16_t )(1 << IEEE154_FCF_ACK_REQ)));
    }
}

// 230 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static  error_t MessageBufferLayerP__Send__send(message_t *msg)
{
  error_t result;

  MessageBufferLayerP__Tasklet__suspend();

  if (MessageBufferLayerP__state != MessageBufferLayerP__STATE_READY) {
    result = EBUSY;
    }
  else {
      MessageBufferLayerP__txMsg = msg;
      MessageBufferLayerP__state = MessageBufferLayerP__STATE_TX_PENDING;
      MessageBufferLayerP__retries = 0;
      MessageBufferLayerP__sendTask__postTask();
      result = SUCCESS;
    }

  MessageBufferLayerP__Tasklet__resume();

  return result;
}

// 138 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/PacketLinkLayerP.nc"
static  uint16_t PacketLinkLayerP__PacketLink__getRetryDelay(message_t *msg)
//line 138
{
  return PacketLinkLayerP__getMeta(msg)->retryDelay;
}

// 144 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__startTimer(uint8_t num, uint32_t t0, uint32_t dt, bool isoneshot)
{
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer_t *timer = &/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__m_timers[num];

//line 147
  timer->t0 = t0;
  timer->dt = dt;
  timer->isoneshot = isoneshot;
  timer->isrunning = TRUE;
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__postTask();
}

// 199 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static   uint32_t /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__get(void)
//line 199
{
  uint32_t now;

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {


      // uint8_t now8 = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__get();

      // if (((Atm128_TIFR2_t )/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__getInterruptFlag()).bits.ocfa) {


        // now = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base + /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__get() + 1 + /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__get();
        // }
      // else {

        // now = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base + now8;
        // }
    }
//line 217
    __nesc_atomic_end(__nesc_atomic); }
//line 217
  return now;
}

// 76 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/MessageBufferLayerP.nc"
static  error_t MessageBufferLayerP__SplitControl__start(void)
{
  error_t error;

  MessageBufferLayerP__Tasklet__suspend();

  if (MessageBufferLayerP__state != MessageBufferLayerP__STATE_READY) {
    error = EBUSY;
    }
  else {
      error = MessageBufferLayerP__RadioState__turnOn();

      if (error == SUCCESS) {
        MessageBufferLayerP__state = MessageBufferLayerP__STATE_TURN_ON;
        }
    }
  MessageBufferLayerP__Tasklet__resume();

  return error;
}

// 73 "/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc"
static void /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__fireTimers(uint32_t now)
{
  uint8_t num;

  for (num = 0; num < /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__NUM_TIMERS; num++)
    {
      /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer_t *timer = &/*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__m_timers[num];

      if (timer->isrunning)
        {
          uint32_t elapsed = now - timer->t0;

          if (elapsed >= timer->dt)
            {
              if (timer->isoneshot) {
                timer->isrunning = FALSE;
                }
              else {
//line 90
                timer->t0 += timer->dt;
                }
              /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__Timer__fired(num);
              break;
            }
        }
    }
  /*HilTimerMilliC.VirtualizeTimerC*/VirtualizeTimerC$0__updateFromTimer__postTask();
}

// 262 "/opt/tinyos-2.x/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc"
static  void *ActiveMessageLayerP__Packet__getPayload(message_t *msg, uint8_t len)
{
  if (len > ActiveMessageLayerP__RadioPacket__maxPayloadLength()) {
    return (void *)0;
    }
  return (void *)msg + ActiveMessageLayerP__RadioPacket__headerLength(msg);
}

// 250 "/opt/tinyos-2.x/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc"
static   void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__startAt(uint32_t nt0, uint32_t ndt)
//line 250
{
  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {
      /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__set = TRUE;
      /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__t0 = nt0;
      /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__dt = ndt;
    }
//line 256
    __nesc_atomic_end(__nesc_atomic); }
  /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setInterrupt();
}

//line 128
static void /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setInterrupt(void)
//line 128
{
  bool fired = FALSE;

  { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
    {



      uint8_t interrupt_in = 1 + /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Compare__get() - /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Timer__get();
      uint8_t newOcr2A;
      uint8_t tifr2 = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__TimerCtrl__getInterruptFlag();

//line 139
      ;
      if ((interrupt_in != 0 && interrupt_in < /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MINDT) || tifr2 & (1 << 1)) {
          if (interrupt_in < /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MINDT) {
              ;
            }
          else {
              ;
            }
          {
//line 147
            __nesc_atomic_end(__nesc_atomic);
//line 147
            return;
          }
        }

      if (!/*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__set) {
          newOcr2A = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MAXT;
          ;
        }
      else
        {
          uint32_t now = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Counter__get();

//line 158
          ;

          if ((uint32_t )(now - /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__t0) >= /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__dt)
            {
              /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__set = FALSE;
              fired = TRUE;
              newOcr2A = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MAXT;
            }
          else
            {


              uint32_t alarm_in = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__t0 + /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__dt - /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__base;

              if (alarm_in > /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MAXT) {
                newOcr2A = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MAXT;
                }
              else {
//line 174
                if ((uint8_t )alarm_in < /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MINDT) {
                  newOcr2A = /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__MINDT;
                  }
                else {
//line 177
                  newOcr2A = alarm_in;
                  }
                }
            }
        }
//line 180
      newOcr2A--;
      /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__setOcr2A(newOcr2A);
    }
//line 182
    __nesc_atomic_end(__nesc_atomic); }
  if (fired) {
    /*AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP*/Atm1281AlarmAsyncP$0__Alarm__fired();
    }
}

// 242 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc"
__attribute((signal))   void __vector_13(void)
//line 242
{
  HplAtm1281Timer2AsyncP__stabiliseTimer2();


  HplAtm1281Timer2AsyncP__Compare__fired();
}


__attribute((signal))   void __vector_15(void)
//line 250
{
  HplAtm1281Timer2AsyncP__stabiliseTimer2();

  HplAtm1281Timer2AsyncP__Timer__overflow();
}

// 119 "/opt/tinyos-2.x/tos/chips/atm128/spi/HplAtm128SpiP.nc"
__attribute((signal))   void __vector_24(void)
//line 119
{
  HplAtm128SpiP__SPI__dataReady(HplAtm128SpiP__SPI__read());
}

// 142 "/opt/tinyos-2.x/tos/chips/atm128/spi/Atm128SpiP.nc"
static   uint8_t Atm128SpiP__SpiByte__write(uint8_t tx)
//line 142
{





  Atm128SpiP__Spi__enableSpi(TRUE);
  // nIVED: Unsure what a power update does, so commenting for now
  //Atm128SpiP__McuPowerState__update();

  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
		Atm128SpiP__Spi__write(tx);
  while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
  return Atm128SpiP__Spi__read();
}

// 226 "/opt/tinyos-2.x/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc"
__attribute((interrupt))   void __vector_17(void)
//line 226
{
  HplAtm1281Timer1P__CompareA__fired();
}

__attribute((interrupt))   void __vector_18(void)
//line 230
{
  HplAtm1281Timer1P__CompareB__fired();
}

__attribute((interrupt))   void __vector_19(void)
//line 234
{
  HplAtm1281Timer1P__CompareC__fired();
}

__attribute((interrupt))   void __vector_16(void)
//line 238
{
  HplAtm1281Timer1P__Capture__captured(HplAtm1281Timer1P__Capture__get());
}

__attribute((interrupt))   void __vector_20(void)
//line 242
{
  HplAtm1281Timer1P__Timer__overflow();
}


