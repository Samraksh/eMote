#include "Samraksh\DecisionFunction.h"
#include <cmath>

#define _precision 20 // Q11.20
#define _fx_one (1 << _precision) // 0x100000

//extern Data_Store g_dataStoreObject;
float DecisionFunction::rho = (float)-417.4166f;
float DecisionFunction::gamma = (float)0.0625;
float* DecisionFunction::weight = NULL;
UINT16 DecisionFunction::nSV = 77;
UINT16 DecisionFunction::nFeature = 13;
float* DecisionFunction::feature_min = NULL;
float* DecisionFunction::scalingFactors = NULL;
const UINT32 dataVectors[nSV*nFeature] = {
180061, 16, 1868, 2288, 447071, 341395, 292626, 4315, 0, 0, 0, 0, 0,
294639, 48, 14483, 3018, 447071, 430807, 373912, 0, 0, 0, 0, 0, 0,
164050, 19, 235615, 83882, 804719, 455197, 430807, 0, 0, 0, 0, 0, 0,
20007, 50, 84257, 20833, 820983, 820983, 739697, 539, 553, 556, 565, 0, 4333,
202920, 56, 2257, 7812, 349522, 349522, 284500, 4315, 2655, 1777, 1808, 0, 4333,
244077, 41, 24565, 7577, 398291, 398291, 390165, 8630, 2950, 2962, 1507, 0, 0,
223410, 67, 8628, 4378, 430807, 373912, 260110, 432, 0, 0, 0, 0, 0,
33344, 21, 19889, 8346, 634022, 455197, 130055, 30206, 17698, 17772, 18078, 0, 4333,
280096, 78, 13100, 11673, 455197, 455197, 276373, 1439, 984, 494, 502, 0, 0,
238740, 225, 14915, 11614, 520220, 520220, 317016, 2987, 1021, 1026, 695, 53248, 4333,
280096, 75, 7559, 10278, 382038, 357659, 308879, 1439, 0, 0, 0, 0, 0,
256639, 1993, 90968, 105183, 544609, 528357, 463324, 4475, 3441, 3127, 2846, 143361, 56328,
213406, 5, 386, 1167, 251983, 251983, 251983, 0, 0, 0, 0, 0, 0,
170058, 7, 1520, 862, 503967, 471450, 40643, 2158, 2212, 2222, 0, 0, 0,
80693, 218, 9288, 5849, 430807, 373912, 349522, 308, 158, 158, 161, 0, 4333,
166724, 22, 1046, 6013, 300753, 292626, 292626, 43151, 22122, 22215, 22599, 0, 8665,
75858, 453, 34446, 52913, 373912, 373912, 284500, 784, 403, 404, 411, 73729, 4333,
160055, 24, 2595, 3365, 512093, 268236, 235730, 10788, 2212, 2222, 0, 0, 0,
21674, 93, 13263, 24793, 357659, 357659, 260110, 863, 0, 0, 0, 0, 0,
0, 512093, 0, 0, 0, 0, 0, 432, 442, 445, 452, 0, 4333,
182557, 81, 8265, 9609, 495840, 373912, 284500, 5034, 1474, 1481, 753, 0, 0,
226744, 0, 1046, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
20007, 37, 86280, 29413, 634022, 617769, 138181, 1079, 1106, 1110, 1130, 0, 4333,
126710, 53, 5661, 32180, 406428, 406428, 349522, 7552, 4424, 4443, 1130, 0, 4333,
209401, 744, 55137, 56411, 520220, 479577, 463324, 2158, 1265, 1110, 969, 77824, 17332,
185514, 55, 5362, 18534, 333269, 317016, 268236, 479, 0, 0, 0, 0, 0,
0, 755950, 0, 0, 0, 0, 0, 287, 295, 296, 301, 0, 4333,
153386, 12, 9311, 9692, 357659, 300753, 203214, 21576, 4424, 0, 0, 0, 0,
0, 1048576, 0, 0, 0, 0, 0, 206, 211, 212, 215, 0, 4333,
24008, 93, 1048576, 945858, 699054, 650285, 625895, 1439, 1474, 1481, 1507, 49152, 4333,
216741, 66, 7580, 9116, 495840, 341395, 243857, 11867, 5530, 4443, 4519, 0, 4333,
5265, 667, 14092, 40974, 512093, 430807, 373912, 4061, 3123, 2875, 2658, 90113, 30331,
81626, 302, 11513, 18065, 447071, 414555, 365785, 1126, 770, 580, 589, 32768, 8665,
235080, 3, 12032, 673, 487714, 455197, 0, 0, 0, 0, 0, 0, 0,
190065, 25, 8650, 5187, 365785, 365785, 308879, 0, 0, 0, 0, 0, 0,
148845, 195, 11371, 14113, 447071, 398291, 365785, 563, 192, 193, 196, 0, 4333,
229303, 492, 18884, 31512, 422681, 414555, 349522, 1978, 922, 926, 753, 73729, 12999,
13004, 732, 22240, 64361, 406428, 398291, 317016, 4794, 2704, 2715, 2260, 98304, 30331,
111464, 83, 6759, 15370, 357659, 357659, 243857, 7767, 4424, 3555, 3615, 0, 8665,
187391, 206, 95787, 58245, 1040450, 991680, 796593, 154, 0, 0, 0, 0, 0,
140048, 62, 3770, 1833, 438944, 414555, 406428, 8630, 5899, 4443, 4519, 32768, 8665,
195067, 28, 16849, 18852, 495840, 414555, 341395, 0, 0, 0, 0, 0, 0,
2858, 39, 16588, 17984, 284500, 284500, 211341, 3452, 885, 888, 0, 0, 0,
140048, 29, 4353, 5115, 991680, 544609, 365785, 73357, 22122, 17772, 9040, 0, 0,
270092, 59, 5142, 7815, 479577, 349522, 243857, 8630, 5530, 4443, 3390, 0, 8665,
186730, 5, 6171, 15167, 186961, 178824, 154445, 12946, 0, 0, 0, 0, 0,
193399, 24, 662, 269, 211341, 203214, 195088, 47466, 22122, 22215, 18078, 0, 8665,
67022, 453, 19549, 34622, 365785, 333269, 300753, 2876, 1721, 1481, 1255, 81920, 12999,
185776, 69, 5136, 10411, 308879, 284500, 268236, 5178, 2655, 1777, 1808, 0, 4333,
13918, 1676, 30310, 62004, 577126, 536483, 503967, 6370, 5267, 5078, 4519, 151551, 73660,
145050, 29, 10297, 22264, 317016, 317016, 235730, 15103, 8849, 6665, 6780, 0, 8665,
165392, 312, 24411, 44277, 479577, 438944, 382038, 4315, 3063, 2393, 2086, 40961, 17332,
458721, 3329, 31698, 69530, 772203, 682791, 520220, 5975, 4595, 4614, 4346, 180229, 90992,
306771, 83, 23557, 36555, 398291, 317016, 284500, 1233, 632, 634, 646, 28672, 0,
188062, 13, 16631, 1141, 455197, 455197, 414555, 1439, 1474, 1481, 0, 0, 0,
181603, 114, 3466, 5970, 430807, 292626, 268236, 1569, 403, 404, 0, 0, 0,
155430, 429, 30213, 48549, 463324, 438944, 398291, 7845, 5229, 4443, 4108, 61440, 30331,
193399, 5, 3140, 3500, 284500, 235730, 227593, 4315, 0, 0, 0, 0, 0,
51445, 70, 26256, 20754, 1016060, 731560, 357659, 863, 0, 0, 0, 0, 0,
221501, 173, 21805, 33542, 414555, 390165, 373912, 1798, 1106, 1110, 753, 0, 4333,
114588, 279, 11133, 34322, 577126, 447071, 268236, 8151, 5899, 5431, 5022, 53248, 30331,
270092, 58, 4211, 5357, 357659, 341395, 317016, 2158, 737, 0, 0, 0, 0,
0, 560862, 0, 0, 0, 0, 0, 392, 403, 404, 411, 0, 4333,
160055, 5, 1542, 1436, 414555, 414555, 130055, 0, 0, 0, 0, 0, 0,
135046, 14, 4843, 6111, 325142, 292626, 219467, 4315, 2212, 2222, 2260, 0, 0,
68356, 252, 80798, 70760, 471450, 463324, 398291, 6473, 2655, 2665, 2260, 73729, 12999,
98494, 744, 21028, 20723, 463324, 447071, 447071, 3057, 2028, 1852, 1694, 53248, 25997,
156049, 176, 18514, 12165, 438944, 430807, 317016, 5933, 2765, 2222, 1694, 36864, 8665,
150051, 40, 4843, 23477, 317016, 300753, 284500, 19419, 13273, 11108, 9040, 0, 0,
106703, 78, 782143, 774373, 959164, 959164, 658411, 73357, 53093, 48874, 22599, 77824, 12999,
0, 999807, 0, 0, 0, 0, 0, 216, 221, 222, 226, 0, 4333,
265541, 92, 13176, 6521, 422681, 414555, 333269, 1439, 492, 494, 0, 36864, 0,
125043, 39, 15653, 36695, 284500, 251983, 251983, 30206, 11061, 11108, 6780, 32768, 8665,
230079, 80, 2704, 1735, 487714, 487714, 195088, 10788, 6636, 6665, 6780, 32768, 12999,
155053, 9, 8066, 8749, 333269, 284500, 113802, 2158, 0, 0, 0, 0, 0,
386012, 179, 29113, 23772, 373912, 373912, 317016, 2013, 590, 592, 301, 32768, 0,
100032, 22, 2198, 11846, 398291, 243857, 178824, 10788, 4424, 4443, 4519, 0, 0
};

void DecisionFunction::Initialize(UINT16 p_nSV, UINT16 p_nFeature, float p_rho, float p_gamma, float* p_weight, float* p_feature_min, float* p_scalingFactors)
{
	nSV = p_nSV;
    nFeature = p_nFeature;
    rho = p_rho;
    gamma = p_gamma;
    
    // Initialize weights, feature minima and scaling factors
    if(!weight) weight = (float*)(private_malloc(nSV*sizeof(float)));
    if(!feature_min) feature_min = (float*)private_malloc(nFeature*sizeof(float));
    if(!scalingFactors) scalingFactors = (float*)private_malloc(nFeature*sizeof(float));
    
    for(UINT16 i=0; i < nSV; i++)
    {
        weight[i] = p_weight[i];
    }
    
    for(UINT8 i=0; i < nFeature; i++)
    {
        feature_min[i] = p_feature_min[i];
        scalingFactors[i] = p_scalingFactors[i];
    }
}

INT32 DecisionFunction::Double_to_Fixed(double d) {

    double temp = d * _fx_one;
    temp += (temp >= 0) ? 0.5f : -0.5f;
    return (INT32)temp;
}

UINT64 DecisionFunction::Fixed_Point_Mult(INT32 tmp, INT32 tmp2) {
    UINT64 product = ((INT64)tmp * (INT64)tmp2) >> _precision;
    return product;
}

double DecisionFunction::Fixed_to_Double(UINT64 l) {
    return (double)l/_fx_one;
}

UINT32 DecisionFunction::Bytes_to_UINT32(UINT8* value, UINT16 offset)
{
	return (UINT32)(
		value[0 + offset] << 0 |
		value[1 + offset] << 8 |
		value[2 + offset] << 16 |
		value[3 + offset] << 24);
}

void DecisionFunction::Normalize(float* featureVector, UINT32* features_normalized)
{
	for (UINT8 i = 0; i < nFeature; i++)
	{
		features_normalized[i] = Double_to_Fixed((featureVector[i] - feature_min[i]) * scalingFactors[i]);
	}
}

float DecisionFunction::Kernel(UINT32 *sv, UINT32* features_normalized)
{
    float res = 0;
	UINT64 sum = 0;

    for (UINT8 i = 0; i < nFeature; i++)
	{
		INT32 tmp = features_normalized[i] - sv[i];
		sum += Fixed_Point_Mult(tmp, tmp);
	}

	double d_sum = Fixed_to_Double(sum);

	res = (float)exp(-gamma*d_sum);
    return res;
}

double DecisionFunction::Decide(UINT32* features_normalized)
{
	double decision = -rho;
	
	//InitDataStore();
	//Assuming that the support vector is always written to the first block in datastore
	UINT32 sv1row[nFeature] = {0};
	//UINT8 sv1row_bytes[nFeature * sizeof(UINT32)] = {0};
	ushort dataIdOffset = 0;
	ushort arrayLength = 1;
	UINT32 dataIDArray[arrayLength] = {0};
	//g_dataStoreObject.getRecordIDAfterPersistence(dataIDArray, arrayLength, dataIdOffset);
	//LPVOID givenPtr = g_dataStoreObject.getAddress(dataIDArray[0]);

	//if (givenPtr)
	{
		for (UINT16 i = 0; i < nSV; i++)
		{
			//g_dataStoreObject.readRawData(givenPtr, (void*)sv1row_bytes, i*nFeature*sizeof(UINT32), nFeature*sizeof(UINT32));
			//UINT16 offset = 0;
			for (UINT8 j = 0; j < nFeature; j++)
			{
				//sv1row[i] = Bytes_to_UINT32(sv1row_bytes, offset);
				sv1row[j] = dataVectors[i * nFeature + j];
				//offset += sizeof(UINT32);
			}
			decision += weight[i] * Kernel(sv1row, features_normalized);
			sv1row[nFeature] = {0};
			//sv1row_bytes[nFeature * sizeof(UINT32)] = {0};
		}
	}
	/*else
	{
		hal_printf("ERROR: No valid pointer to record in data store\n");
	}*/

	return decision;
}

BOOL DecisionFunction::InitDataStore()
{
	/*int eraseDataStore = false;
	if (g_dataStoreObject.init(eraseDataStore) != DS_Success)
	{
		hal_printf("ERROR: Could not initialize data store!\n");
		return false;
	}*/
}


