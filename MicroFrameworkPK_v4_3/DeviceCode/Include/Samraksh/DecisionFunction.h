#include <tinyhal.h>
#include <Samraksh\DataStore\Datastore.h>
#include <Samraksh\HAL_util.h>
#include <cstdlib>

class DecisionFunction
{
	static const UINT16 nSV = 389;
	static const UINT16 nFeature = 12;

	static float rho;
	static float gamma;
	
	static float weight[nSV];
	static float feature_min[nFeature];
	static float scalingFactors[nFeature];

	static float Kernel(UINT32*, INT32*);
	static BOOL InitDataStore();

public:
	static void Normalize(float*, INT32*);
	static float Decide(INT32*);
};

float DecisionFunction::rho = (float)1.0471;
float DecisionFunction::gamma = (float)1;

float DecisionFunction::weight[] = { 0.77632, 10, 9.6017, 2.5374, 0.81379, 10, 4.1664, 10, 10, 10, 10, 10, 1.3391, 10, 6.1989, 10, 10, 4.7084, 5.9982, 10, 10, 1.8151, 10, 10, 10, 10, 10, 5.9833, 10, 10, 10, 10, 10, 1.3766, 5.5115, 10, 10, 10, 10, 10, 3.3518, 1.4011, 1.0581, 2.3896, 10, 10, 10, 10, 10, 10, 6.4246, 10, 10, 0.77774, 10, 10, 0.33445, 7.8884, 10, 4.506, 9.7722, 5.6824, 10, 10, 10, 10, 10, 7.0042, 1.979, 3.7544, 7.0092, 10, 6.6198, 2.2741, 0.8519, 10, 0.81434, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1.6213, 1.0772, 10, 10, 10, 3.723, 10, 10, 0.70575, 9.2464, 4.7941, 10, 3.0459, 10, 0.53873, 10, 4.5528, 10, 10, 10, 0.69412, 7.9078, 1.2122, 10, 10, 2.0893, 5.1365, 10, 3.5254, 10, 10, 4.3854, 3.1631, 10, 5.7705, 10, 8.6171, 10, 10, 2.7754, 10, 10, 10, 10, 10, 4.7956, 10, 0.69782, 10, 10, 10, 2.3442, 10, 9.1792, 10, 5.4224, 3.0897, 0.6662, 10, 10, 2.6491, 4.8491, 4.8507, 9.3506, 10, 10, 10, 5.4983, 10, 4.9317, 10, 10, 10, 10, 10, 10, 10, 10, 1.7004, 10, 10, 10, 3.7566, 8.1366, 2.4634, 10, 10, 10, 10, 10, 10, 10, 4.1959, 5.1918, 1.5498, 10, 1.4888, 10, 1.8947, 0.98516, 10, 3.3533, 10, 10, 10, -10, -6.6798, -10, -10, -10, -10, -1.1259, -10, -10, -10, -3.5392, -7.405, -3.2982, -1.7046, -10, -10, -1.1192, -6.2041, -10, -6.9595, -8.1298, -10, -5.901, -0.45034, -10, -1.8022, -6.8058, -10, -8.9672, -3.5508, -3.7062, -1.2623, -6.4656, -10, -10, -9.8276, -4.4078, -10, -1.1765, -6.5282, -1.9475, -10, -8.6726, -10, -10, -10, -1.2889, -2.3939, -10, -10, -5.8033, -10, -9.6986, -6.9495, -10, -10, -1.5298, -10, -10, -3.7592, -10, -10, -1.0175, -6.353, -1.1726, -0.21131, -10, -6.2906, -10, -10, -10, -0.53347, -8.1762, -3.6277, -10, -6.6442, -5.6498, -10, -3.5209, -2.5453, -10, -9.1299, -6.1908, -0.71501, -4.9726, -10, -3.0976, -10, -8.0527, -10, -10, -10, -10, -0.42879, -10, -2.1465, -2.0662, -10, -0.5986, -10, -10, -3.765, -10, -3.9261, -10, -2.3898, -10, -10, -10, -10, -10, -10, -0.82952, -0.8157, -10, -10, -10, -8.9325, -10, -0.57285, -10, -4.3149, -10, -0.26412, -8.5538, -10, -1.8767, -10, -9.6586, -10, -10, -8.4468, -10, -10, -10, -4.4801, -10, -10, -2.993, -3.336, -10, -2.8038, -10, -9.5179, -2.7152, -4.6295, -5.5343, -10, -10, -10, -2.1849, -6.7356, -10, -4.6031, -0.68148, -10, -2.5666, -10, -10, -10, -10, -2.3703, -6.6833, -5.0763, -10, -10, -10, -10, -10, -7.7365, -10, -10, -10, -2.828, -10, -10, -3.8214, -10, -6.4153, -10, -10, -2.4554, -10, -3.881, -10, -8.4954, -10, -10, -10, -10, -10, -4.0086, -10, -2.9907, -4.6261, -10, -10, -1.625 };
float DecisionFunction::feature_min[] = { 487071.4276, 3352.9162, 80, 8, 1.7564, 60, -148, 41, 14, 3, -1, -41 };
float DecisionFunction::scalingFactors[] = { 2.0944e-14, 2.2021e-06, 5.5047e-07, 0.0040323, 7.0137e-05, 0.014706, 0.0043353, 0.011494, 0.0087719, 2.8774e-06, 0.0077519, 0.0096774 };
