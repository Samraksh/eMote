<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <PropertyGroup>
    <Author>Michael McGrath</Author>
    <Description>This is "The Samraksh Company" solution for the EmoteDotNow platform</Description>
    <Documentation />
    <PlatformGuid>{a3226721-64ea-47d8-a61b-c7ab9fdf93f3}</PlatformGuid>
    <TARGETPLATFORM>EmoteDotNow</TARGETPLATFORM>
    <PLATFORM>EmoteDotNow</PLATFORM>
    <IsSolutionWizardVisible>True</IsSolutionWizardVisible>
    <ENDIANNESS>le</ENDIANNESS>
  </PropertyGroup>
  <PropertyGroup>
    <!-- Custom overrides for some debug console version printouts. -->
    <!-- SamRevisionNumber: e.g. eMote Release 12. decimal numbers only. determines SAM_VERSION_REVISION debug console printout.  Also see "RevisionNumber" in file ReleaseInfo.settings. -->
    <SamRevisionNumber>13</SamRevisionNumber>
  </PropertyGroup>
  <ItemGroup>
    <IncludePaths Include="Solutions\EmoteDotNow" />
    <IncludePaths Include="DeviceCode\Targets\Native\STM32F10x\DeviceCode\cmsis" />
    <IncludePaths Include="DeviceCode\Targets\Native\STM32F10x\DeviceCode\drivers" />
    <IncludePaths Include="DeviceCode\Targets\Native\STM32F10x\DeviceCode\processor" />
  </ItemGroup>
  <Import Project="$(SPOCLIENT)\DeviceCode\Targets\Native\STM32F10x\STM32F10x.settings" />
  <!-- Samraksh Heap and Stack settings to be propagated across ASM, C/C++, and Linker Script targets -->
  <PropertyGroup>
    <!-- BEFORE YOU CHANGE THIS: check size of ER_RAM_RO + ER_RAM_RW + .bss in map file and accommodate accordingly. -->
    <SAM_STACK_BOTTOM     >0x20000000</SAM_STACK_BOTTOM>    <!-- Stack always must sit at the base of ram. period. -->
    <SAM_STACK_TOP        >0x20002000</SAM_STACK_TOP>
    <!-- Linker will collect and place ER_RAM_RO, ER_RAM_RW, .bss sections between stack and heap -->
    <!-- After you know the size of sections below the heap, come back here and re-define ...-->
    <!-- ... SAM_HEAP_BEGIN to hug the variable-sized sections below the HEAP. -->
    <!-- ... Finding the lowest possible SAM_HEAP_BEGIN address is done manually by calculating: -->
    <!-- ... SAM_STACK_TOP + 8 + (Image$$ER_RAM_RW$$ZI$$Base -  Image$$ER_RAM_RO$$Base) + Image$$ER_RAM_RW$$ZI$$Length -->
    <!-- ... for TinyBooter Debug build, SAM_HEAP_BEGIN could start as low as SAM_STACK_TOP + 0x3200 = 0x20005200 -->
    <!-- ... for TinyCLR Debug build, SAM_HEAP_BEGIN could start as low as SAM_STACK_TOP + 0x98c4 = 0x2000B8D0 -->
    <SAM_HEAP_BEGIN       >0x2000DB7C</SAM_HEAP_BEGIN>
    <SAM_HEAP_END         >0x20016FF8</SAM_HEAP_END>
    <SAM_CUSTOM_HEAP_BEGIN>0x20017000</SAM_CUSTOM_HEAP_BEGIN>
    <SAM_CUSTOM_HEAP_END  >0x20017FF8</SAM_CUSTOM_HEAP_END>
    <SAM_PROFILER_BUFFER_BEGIN>0x20017F00</SAM_PROFILER_BUFFER_BEGIN>
    <SAM_PROFILER_BUFFER_END  >0x20017FF8</SAM_PROFILER_BUFFER_END>
  </PropertyGroup>
</Project>
