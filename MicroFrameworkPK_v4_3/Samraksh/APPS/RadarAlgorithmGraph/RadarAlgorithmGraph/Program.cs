#region hide
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
// Allow managed code to call unmanaged functions that are implemented in a DLL
using System.Runtime.InteropServices;

namespace testchart2
{
    static class Program
    {        
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Test(int a);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int xHeapTrackNew(int nItems);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void xHeapTrackInsert(int v);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int xHeapTrackMedian();
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void xResetHeapTrack(int nItems);

        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int yTest(int a);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int yHeapTrackNew(int nItems);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void yHeapTrackInsert(int v);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int yHeapTrackMedian();
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void yResetHeapTrack(int nItems);

        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int wHeapTrackNew(int nItems);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void wHeapTrackInsert(int v);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int wHeapTrackMedian();
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void wResetHeapTrack(int nItems);

        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int zHeapTrackNew(int nItems);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void zHeapTrackInsert(int v);
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern int zHeapTrackMedian();
        [DllImport(@"..\..\meanTrackerDll.dll", CallingConvention = CallingConvention.Cdecl)]
        private static extern void zResetHeapTrack(int nItems);

        public class FakeChartForm1 : Form
        {


            private System.ComponentModel.IContainer components = null;
            System.Windows.Forms.DataVisualization.Charting.Chart chart1;
        #endregion
            #region arcTan table
            static int[] arcTan = new int[]{
                     0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
                     39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
                     79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
                     119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
                     159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
                     199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
                     239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
                     279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
                     319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
                     359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
                     398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
                     438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
                     477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
                     517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
                     556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
                     595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 629, 630, 631, 632, 633,
                     634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 668, 669, 670, 671, 672,
                     673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 703, 704, 705, 706, 707, 708, 709, 710, 711,
                     712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
                     751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
                     790, 791, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
                     828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 862, 863, 864, 865,
                     866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
                     904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
                     942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 977, 978, 979,
                     980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
                     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
                     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
                     1093, 1094, 1095, 1096, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
                     1130, 1131, 1132, 1133, 1134, 1135, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
                     1167, 1168, 1169, 1170, 1171, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
                     1204, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1236, 1237, 1238, 1239,
                     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
                     1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
                     1313, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
                     1349, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1382, 1383,
                     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1414, 1415, 1416, 1417, 1418, 1419,
                     1420, 1421, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1451, 1452, 1453, 1454,
                     1455, 1456, 1457, 1458, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1487, 1488, 1489,
                     1490, 1491, 1492, 1493, 1494, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1521, 1522, 1523, 1524,
                     1525, 1526, 1527, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
                     1559, 1560, 1561, 1562, 1563, 1564, 1565, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1590, 1591, 1592, 1593,
                     1594, 1595, 1596, 1596, 1597, 1598, 1599, 1600, 1601, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1625, 1626, 1627,
                     1628, 1629, 1630, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1636, 1637, 1638, 1639, 1640, 1641, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1653, 1654, 1655, 1656, 1657, 1658, 1658, 1659, 1660, 1661,
                     1662, 1663, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1669, 1670, 1671, 1672, 1673, 1674, 1674, 1675, 1676, 1677, 1678, 1679, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1685, 1686, 1687, 1688, 1689, 1690, 1690, 1691, 1692, 1693, 1694, 1695,
                     1695, 1696, 1697, 1698, 1699, 1700, 1700, 1701, 1702, 1703, 1704, 1705, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1711, 1712, 1713, 1714, 1715, 1716, 1716, 1717, 1718, 1719, 1720, 1721, 1721, 1722, 1723, 1724, 1725, 1726, 1726, 1727, 1728,
                     1729, 1730, 1731, 1731, 1732, 1733, 1734, 1735, 1735, 1736, 1737, 1738, 1739, 1740, 1740, 1741, 1742, 1743, 1744, 1745, 1745, 1746, 1747, 1748, 1749, 1750, 1750, 1751, 1752, 1753, 1754, 1755, 1755, 1756, 1757, 1758, 1759, 1760, 1760, 1761,
                     1762, 1763, 1764, 1764, 1765, 1766, 1767, 1768, 1769, 1769, 1770, 1771, 1772, 1773, 1774, 1774, 1775, 1776, 1777, 1778, 1778, 1779, 1780, 1781, 1782, 1783, 1783, 1784, 1785, 1786, 1787, 1788, 1788, 1789, 1790, 1791, 1792, 1792, 1793, 1794,
                     1795, 1796, 1797, 1797, 1798, 1799, 1800, 1801, 1801, 1802, 1803, 1804, 1805, 1806, 1806, 1807, 1808, 1809, 1810, 1810, 1811, 1812, 1813, 1814, 1815, 1815, 1816, 1817, 1818, 1819, 1819, 1820, 1821, 1822, 1823, 1824, 1824, 1825, 1826, 1827,
                     1828, 1828, 1829, 1830, 1831, 1832, 1832, 1833, 1834, 1835, 1836, 1837, 1837, 1838, 1839, 1840, 1841, 1841, 1842, 1843, 1844, 1845, 1845, 1846, 1847, 1848, 1849, 1850, 1850, 1851, 1852, 1853, 1854, 1854, 1855, 1856, 1857, 1858, 1858, 1859,
                     1860, 1861, 1862, 1862, 1863, 1864, 1865, 1866, 1866, 1867, 1868, 1869, 1870, 1871, 1871, 1872, 1873, 1874, 1875, 1875, 1876, 1877, 1878, 1879, 1879, 1880, 1881, 1882, 1883, 1883, 1884, 1885, 1886, 1887, 1887, 1888, 1889, 1890, 1891, 1891,
                     1892, 1893, 1894, 1895, 1895, 1896, 1897, 1898, 1899, 1899, 1900, 1901, 1902, 1903, 1903, 1904, 1905, 1906, 1907, 1907, 1908, 1909, 1910, 1911, 1911, 1912, 1913, 1914, 1915, 1915, 1916, 1917, 1918, 1919, 1919, 1920, 1921, 1922, 1923, 1923,
                     1924, 1925, 1926, 1927, 1927, 1928, 1929, 1930, 1930, 1931, 1932, 1933, 1934, 1934, 1935, 1936, 1937, 1938, 1938, 1939, 1940, 1941, 1942, 1942, 1943, 1944, 1945, 1946, 1946, 1947, 1948, 1949, 1949, 1950, 1951, 1952, 1953, 1953, 1954, 1955,
                     1956, 1957, 1957, 1958, 1959, 1960, 1961, 1961, 1962, 1963, 1964, 1964, 1965, 1966, 1967, 1968, 1968, 1969, 1970, 1971, 1972, 1972, 1973, 1974, 1975, 1975, 1976, 1977, 1978, 1979, 1979, 1980, 1981, 1982, 1983, 1983, 1984, 1985, 1986, 1986,
                     1987, 1988, 1989, 1990, 1990, 1991, 1992, 1993, 1993, 1994, 1995, 1996, 1997, 1997, 1998, 1999, 2000, 2000, 2001, 2002, 2003, 2004, 2004, 2005, 2006, 2007, 2008, 2008, 2009, 2010, 2011, 2011, 2012, 2013, 2014, 2015, 2015, 2016, 2017, 2018,
                     2018, 2019, 2020, 2021, 2021, 2022, 2023, 2024, 2025, 2025, 2026, 2027, 2028, 2028, 2029, 2030, 2031, 2032, 2032, 2033, 2034, 2035, 2035, 2036, 2037, 2038, 2039, 2039, 2040, 2041, 2042, 2042, 2043, 2044, 2045, 2045, 2046, 2047, 2048, 2049,
                     2049, 2050, 2051, 2052, 2052, 2053, 2054, 2055, 2055, 2056, 2057, 2058, 2059, 2059, 2060, 2061, 2062, 2062, 2063, 2064, 2065, 2065, 2066, 2067, 2068, 2069, 2069, 2070, 2071, 2072, 2072, 2073, 2074, 2075, 2075, 2076, 2077, 2078, 2078, 2079,
                     2080, 2081, 2081, 2082, 2083, 2084, 2085, 2085, 2086, 2087, 2088, 2088, 2089, 2090, 2091, 2091, 2092, 2093, 2094, 2094, 2095, 2096, 2097, 2097, 2098, 2099, 2100, 2101, 2101, 2102, 2103, 2104, 2104, 2105, 2106, 2107, 2107, 2108, 2109, 2110,
                     2110, 2111, 2112, 2113, 2113, 2114, 2115, 2116, 2116, 2117, 2118, 2119, 2119, 2120, 2121, 2122, 2122, 2123, 2124, 2125, 2125, 2126, 2127, 2128, 2129, 2129, 2130, 2131, 2132, 2132, 2133, 2134, 2135, 2135, 2136, 2137, 2138, 2138, 2139, 2140,
                     2141, 2141, 2142, 2143, 2144, 2144, 2145, 2146, 2147, 2147, 2148, 2149, 2150, 2150, 2151, 2152, 2153, 2153, 2154, 2155, 2156, 2156, 2157, 2158, 2159, 2159, 2160, 2161, 2161, 2162, 2163, 2164, 2164, 2165, 2166, 2167, 2167, 2168, 2169, 2170,
                     2170, 2171, 2172, 2173, 2173, 2174, 2175, 2176, 2176, 2177, 2178, 2179, 2179, 2180, 2181, 2182, 2182, 2183, 2184, 2185, 2185, 2186, 2187, 2188, 2188, 2189, 2190, 2190, 2191, 2192, 2193, 2193, 2194, 2195, 2196, 2196, 2197, 2198, 2199, 2199,
                     2200, 2201, 2202, 2202, 2203, 2204, 2205, 2205, 2206, 2207, 2207, 2208, 2209, 2210, 2210, 2211, 2212, 2213, 2213, 2214, 2215, 2216, 2216, 2217, 2218, 2218, 2219, 2220, 2221, 2221, 2222, 2223, 2224, 2224, 2225, 2226, 2227, 2227, 2228, 2229,
                     2229, 2230, 2231, 2232, 2232, 2233, 2234, 2235, 2235, 2236, 2237, 2238, 2238, 2239, 2240, 2240, 2241, 2242, 2243, 2243, 2244, 2245, 2246, 2246, 2247, 2248, 2248, 2249, 2250, 2251, 2251, 2252, 2253, 2254, 2254, 2255, 2256, 2256, 2257, 2258,
                     2259, 2259, 2260, 2261, 2262, 2262, 2263, 2264, 2264, 2265, 2266, 2267, 2267, 2268, 2269, 2269, 2270, 2271, 2272, 2272, 2273, 2274, 2275, 2275, 2276, 2277, 2277, 2278, 2279, 2280, 2280, 2281, 2282, 2282, 2283, 2284, 2285, 2285, 2286, 2287,
                     2288, 2288, 2289, 2290, 2290, 2291, 2292, 2293, 2293, 2294, 2295, 2295, 2296, 2297, 2298, 2298, 2299, 2300, 2300, 2301, 2302, 2303, 2303, 2304, 2305, 2305, 2306, 2307, 2308, 2308, 2309, 2310, 2310, 2311, 2312, 2313, 2313, 2314, 2315, 2315,
                     2316, 2317, 2318, 2318, 2319, 2320, 2320, 2321, 2322, 2323, 2323, 2324, 2325, 2325, 2326, 2327, 2328, 2328, 2329, 2330, 2330, 2331, 2332, 2333, 2333, 2334, 2335, 2335, 2336, 2337, 2337, 2338, 2339, 2340, 2340, 2341, 2342, 2342, 2343, 2344,
                     2345, 2345, 2346, 2347, 2347, 2348, 2349, 2349, 2350, 2351, 2352, 2352, 2353, 2354, 2354, 2355, 2356, 2357, 2357, 2358, 2359, 2359, 2360, 2361, 2361, 2362, 2363, 2364, 2364, 2365, 2366, 2366, 2367, 2368, 2368, 2369, 2370, 2371, 2371, 2372,
                     2373, 2373, 2374, 2375, 2375, 2376, 2377, 2378, 2378, 2379, 2380, 2380, 2381, 2382, 2382, 2383, 2384, 2385, 2385, 2386, 2387, 2387, 2388, 2389, 2389, 2390, 2391, 2392, 2392, 2393, 2394, 2394, 2395, 2396, 2396, 2397, 2398, 2398, 2399, 2400,
                     2401, 2401, 2402, 2403, 2403, 2404, 2405, 2405, 2406, 2407, 2407, 2408, 2409, 2410, 2410, 2411, 2412, 2412, 2413, 2414, 2414, 2415, 2416, 2416, 2417, 2418, 2419, 2419, 2420, 2421, 2421, 2422, 2423, 2423, 2424, 2425, 2425, 2426, 2427, 2428,
                     2428, 2429, 2430, 2430, 2431, 2432, 2432, 2433, 2434, 2434, 2435, 2436, 2436, 2437, 2438, 2438, 2439, 2440, 2441, 2441, 2442, 2443, 2443, 2444, 2445, 2445, 2446, 2447, 2447, 2448, 2449, 2449, 2450, 2451, 2451, 2452, 2453, 2454, 2454, 2455,
                     2456, 2456, 2457, 2458, 2458, 2459, 2460, 2460, 2461, 2462, 2462, 2463, 2464, 2464, 2465, 2466, 2466, 2467, 2468, 2469, 2469, 2470, 2471, 2471, 2472, 2473, 2473, 2474, 2475, 2475, 2476, 2477, 2477, 2478, 2479, 2479, 2480, 2481, 2481, 2482,
                     2483, 2483, 2484, 2485, 2485, 2486, 2487, 2487, 2488, 2489, 2489, 2490, 2491, 2491, 2492, 2493, 2494, 2494, 2495, 2496, 2496, 2497, 2498, 2498, 2499, 2500, 2500, 2501, 2502, 2502, 2503, 2504, 2504, 2505, 2506, 2506, 2507, 2508, 2508, 2509,
                     2510, 2510, 2511, 2512, 2512, 2513, 2514, 2514, 2515, 2516, 2516, 2517, 2518, 2518, 2519, 2520, 2520, 2521, 2522, 2522, 2523, 2524, 2524, 2525, 2526, 2526, 2527, 2528, 2528, 2529, 2530, 2530, 2531, 2532, 2532, 2533, 2534, 2534, 2535, 2536,
                     2536, 2537, 2538, 2538, 2539, 2540, 2540, 2541, 2542, 2542, 2543, 2544, 2544, 2545, 2546, 2546, 2547, 2548, 2548, 2549, 2549, 2550, 2551, 2551, 2552, 2553, 2553, 2554, 2555, 2555, 2556, 2557, 2557, 2558, 2559, 2559, 2560, 2561, 2561, 2562,
                     2563, 2563, 2564, 2565, 2565, 2566, 2567, 2567, 2568, 2569, 2569, 2570, 2571, 2571, 2572, 2572, 2573, 2574, 2574, 2575, 2576, 2576, 2577, 2578, 2578, 2579, 2580, 2580, 2581, 2582, 2582, 2583, 2584, 2584, 2585, 2586, 2586, 2587, 2588, 2588,
                     2589, 2589, 2590, 2591, 2591, 2592, 2593, 2593, 2594, 2595, 2595, 2596, 2597, 2597, 2598, 2599, 2599, 2600, 2601, 2601, 2602, 2602, 2603, 2604, 2604, 2605, 2606, 2606, 2607, 2608, 2608, 2609, 2610, 2610, 2611, 2611, 2612, 2613, 2613, 2614,
                     2615, 2615, 2616, 2617, 2617, 2618, 2619, 2619, 2620, 2621, 2621, 2622, 2622, 2623, 2624, 2624, 2625, 2626, 2626, 2627, 2628, 2628, 2629, 2630, 2630, 2631, 2631, 2632, 2633, 2633, 2634, 2635, 2635, 2636, 2637, 2637, 2638, 2638, 2639, 2640,
                     2640, 2641, 2642, 2642, 2643, 2644, 2644, 2645, 2646, 2646, 2647, 2647, 2648, 2649, 2649, 2650, 2651, 2651, 2652, 2653, 2653, 2654, 2654, 2655, 2656, 2656, 2657, 2658, 2658, 2659, 2659, 2660, 2661, 2661, 2662, 2663, 2663, 2664, 2665, 2665,
                     2666, 2666, 2667, 2668, 2668, 2669, 2670, 2670, 2671, 2672, 2672, 2673, 2673, 2674, 2675, 2675, 2676, 2677, 2677, 2678, 2678, 2679, 2680, 2680, 2681, 2682, 2682, 2683, 2683, 2684, 2685, 2685, 2686, 2687, 2687, 2688, 2689, 2689, 2690, 2690,
                     2691, 2692, 2692, 2693, 2694, 2694, 2695, 2695, 2696, 2697, 2697, 2698, 2699, 2699, 2700, 2700, 2701, 2702, 2702, 2703, 2704, 2704, 2705, 2705, 2706, 2707, 2707, 2708, 2709, 2709, 2710, 2710, 2711, 2712, 2712, 2713, 2713, 2714, 2715, 2715,
                     2716, 2717, 2717, 2718, 2718, 2719, 2720, 2720, 2721, 2722, 2722, 2723, 2723, 2724, 2725, 2725, 2726, 2727, 2727, 2728, 2728, 2729, 2730, 2730, 2731, 2731, 2732, 2733, 2733, 2734, 2735, 2735, 2736, 2736, 2737, 2738, 2738, 2739, 2739, 2740,
                     2741, 2741, 2742, 2743, 2743, 2744, 2744, 2745, 2746, 2746, 2747, 2747, 2748, 2749, 2749, 2750, 2751, 2751, 2752, 2752, 2753, 2754, 2754, 2755, 2755, 2756, 2757, 2757, 2758, 2758, 2759, 2760, 2760, 2761, 2762, 2762, 2763, 2763, 2764, 2765,
                     2765, 2766, 2766, 2767, 2768, 2768, 2769, 2769, 2770, 2771, 2771, 2772, 2772, 2773, 2774, 2774, 2775, 2776, 2776, 2777, 2777, 2778, 2779, 2779, 2780, 2780, 2781, 2782, 2782, 2783, 2783, 2784, 2785, 2785, 2786, 2786, 2787, 2788, 2788, 2789,
                     2789, 2790, 2791, 2791, 2792, 2792, 2793, 2794, 2794, 2795, 2795, 2796, 2797, 2797, 2798, 2798, 2799, 2800, 2800, 2801, 2801, 2802, 2803, 2803, 2804, 2804, 2805, 2806, 2806, 2807, 2807, 2808, 2809, 2809, 2810, 2810, 2811, 2812, 2812, 2813,
                     2813, 2814, 2815, 2815, 2816, 2816, 2817, 2818, 2818, 2819, 2819, 2820, 2821, 2821, 2822, 2822, 2823, 2824, 2824, 2825, 2825, 2826, 2827, 2827, 2828, 2828, 2829, 2830, 2830, 2831, 2831, 2832, 2833, 2833, 2834, 2834, 2835, 2835, 2836, 2837,
                     2837, 2838, 2838, 2839, 2840, 2840, 2841, 2841, 2842, 2843, 2843, 2844, 2844, 2845, 2846, 2846, 2847, 2847, 2848, 2848, 2849, 2850, 2850, 2851, 2851, 2852, 2853, 2853, 2854, 2854, 2855, 2856, 2856, 2857, 2857, 2858, 2858, 2859, 2860, 2860,
                     2861, 2861, 2862, 2863, 2863, 2864, 2864, 2865, 2866, 2866, 2867, 2867, 2868, 2868, 2869, 2870, 2870, 2871, 2871, 2872, 2873, 2873, 2874, 2874, 2875, 2875, 2876, 2877, 2877, 2878, 2878, 2879, 2880, 2880, 2881, 2881, 2882, 2882, 2883, 2884,
                     2884, 2885, 2885, 2886, 2887, 2887, 2888, 2888, 2889, 2889, 2890, 2891, 2891, 2892, 2892, 2893, 2893, 2894, 2895, 2895, 2896, 2896, 2897, 2897, 2898, 2899, 2899, 2900, 2900, 2901, 2902, 2902, 2903, 2903, 2904, 2904, 2905, 2906, 2906, 2907,
                     2907, 2908, 2908, 2909, 2910, 2910, 2911, 2911, 2912, 2912, 2913, 2914, 2914, 2915, 2915, 2916, 2916, 2917, 2918, 2918, 2919, 2919, 2920, 2920, 2921, 2922, 2922, 2923, 2923, 2924, 2924, 2925, 2926, 2926, 2927, 2927, 2928, 2928, 2929, 2930,
                     2930, 2931, 2931, 2932, 2932, 2933, 2934, 2934, 2935, 2935, 2936, 2936, 2937, 2938, 2938, 2939, 2939, 2940, 2940, 2941, 2942, 2942, 2943, 2943, 2944, 2944, 2945, 2946, 2946, 2947, 2947, 2948, 2948, 2949, 2949, 2950, 2951, 2951, 2952, 2952,
                     2953, 2953, 2954, 2955, 2955, 2956, 2956, 2957, 2957, 2958, 2959, 2959, 2960, 2960, 2961, 2961, 2962, 2962, 2963, 2964, 2964, 2965, 2965, 2966, 2966, 2967, 2967, 2968, 2969, 2969, 2970, 2970, 2971, 2971, 2972, 2973, 2973, 2974, 2974, 2975,
                     2975, 2976, 2976, 2977, 2978, 2978, 2979, 2979, 2980, 2980, 2981, 2981, 2982, 2983, 2983, 2984, 2984, 2985, 2985, 2986, 2986, 2987, 2988, 2988, 2989, 2989, 2990, 2990, 2991, 2991, 2992, 2993, 2993, 2994, 2994, 2995, 2995, 2996, 2996, 2997,
                     2998, 2998, 2999, 2999, 3000, 3000, 3001, 3001, 3002, 3003, 3003, 3004, 3004, 3005, 3005, 3006, 3006, 3007, 3008, 3008, 3009, 3009, 3010, 3010, 3011, 3011, 3012, 3012, 3013, 3014, 3014, 3015, 3015, 3016, 3016, 3017, 3017, 3018, 3019, 3019,
                     3020, 3020, 3021, 3021, 3022, 3022, 3023, 3023, 3024, 3025, 3025, 3026, 3026, 3027, 3027, 3028, 3028, 3029, 3029, 3030, 3031, 3031, 3032, 3032, 3033, 3033, 3034, 3034, 3035, 3035, 3036, 3037, 3037, 3038, 3038, 3039, 3039, 3040, 3040, 3041,
                     3041, 3042, 3042, 3043, 3044, 3044, 3045, 3045, 3046, 3046, 3047, 3047, 3048, 3048, 3049, 3050, 3050, 3051, 3051, 3052, 3052, 3053, 3053, 3054, 3054, 3055, 3055, 3056, 3057, 3057, 3058, 3058, 3059, 3059, 3060, 3060, 3061, 3061, 3062, 3062,
                     3063, 3064, 3064, 3065, 3065, 3066, 3066, 3067, 3067, 3068, 3068, 3069, 3069, 3070, 3071, 3071, 3072, 3072, 3073, 3073, 3074, 3074, 3075, 3075, 3076, 3076, 3077, 3077, 3078, 3079, 3079, 3080, 3080, 3081, 3081, 3082, 3082, 3083, 3083, 3084,
                     3084, 3085, 3085, 3086, 3087, 3087, 3088, 3088, 3089, 3089, 3090, 3090, 3091, 3091, 3092, 3092, 3093, 3093, 3094, 3094, 3095, 3096, 3096, 3097, 3097, 3098, 3098, 3099, 3099, 3100, 3100, 3101, 3101, 3102, 3102, 3103, 3103, 3104, 3105, 3105,
                     3106, 3106, 3107, 3107, 3108, 3108, 3109, 3109, 3110, 3110, 3111, 3111, 3112, 3112, 3113, 3113, 3114, 3115, 3115, 3116, 3116, 3117, 3117, 3118, 3118, 3119, 3119, 3120, 3120, 3121, 3121, 3122, 3122, 3123, 3123, 3124, 3124, 3125, 3126, 3126,
                     3127, 3127, 3128, 3128, 3129, 3129, 3130, 3130, 3131, 3131, 3132, 3132, 3133, 3133, 3134, 3134, 3135, 3135, 3136, 3136, 3137, 3138, 3138, 3139, 3139, 3140, 3140, 3141, 3141, 3142, 3142, 3143, 3143, 3144, 3144, 3145, 3145, 3146, 3146, 3147,
                     3147, 3148, 3148, 3149, 3149, 3150, 3150, 3151, 3151, 3152, 3153, 3153, 3154, 3154, 3155, 3155, 3156, 3156, 3157, 3157, 3158, 3158, 3159, 3159, 3160, 3160, 3161, 3161, 3162, 3162, 3163, 3163, 3164, 3164, 3165, 3165, 3166, 3166, 3167, 3167,
                     3168, 3168, 3169, 3169, 3170, 3170, 3171, 3172, 3172, 3173, 3173, 3174, 3174, 3175, 3175, 3176, 3176, 3177, 3177, 3178, 3178, 3179, 3179, 3180, 3180, 3181, 3181, 3182, 3182, 3183, 3183, 3184, 3184, 3185, 3185, 3186, 3186, 3187, 3187, 3188,
                     3188, 3189, 3189, 3190, 3190, 3191, 3191, 3192, 3192, 3193, 3193, 3194, 3194, 3195, 3195, 3196, 3196, 3197, 3197, 3198, 3198, 3199, 3199, 3200, 3200, 3201, 3201, 3202, 3202, 3203, 3203, 3204, 3204, 3205, 3205, 3206, 3206, 3207, 3207, 3208,
                     3208, 3209, 3209, 3210, 3210, 3211, 3211, 3212, 3212, 3213, 3213, 3214, 3214, 3215, 3215, 3216, 3216
                    };
            #endregion            
            static int MAX_IQ_REJECTION = 4000;
            static int wPhase = 0, uwPhase = 0, wPhase_prev = 0, uwPhase_prev = 0;
            static double wPhaseApprox = 0, uwPhaseApprox = 0, wPhase_prevApprox = 0, uwPhase_prevApprox = 0;
            //static int wPhaseMaxApprox = 0, uwPhaseMaxApprox = 0, wPhase_prevMaxApprox = 0, uwPhase_prevMaxApprox = 0;
            static int wPhaseMax = 0, uwPhaseMax = 0, wPhase_prevMax = 0, uwPhase_prevMax = 0;
            static int unwrapMax = 0;
            static int wPhaseZero = 0, uwPhaseZero = 0, wPhase_prevZero = 0, uwPhase_prevZero = 0;
            static int unwrapZero = 0;
            //static double runningApproxUnwrap = 0;
            static int plotPt = 0;
            //unsafe static HeapTrack* unwrapMedianZero;
            //unsafe static HeapTrack* unwrapMedianMax;

            static int ADCBufferSize = 128;

            static int INITIAL_ADJUST_SAMPLE_CNT = 10;
            static int IQ_ADJUSTMENT_PERIOD = 80;
            static int adjustmentIQPeriod = IQ_ADJUSTMENT_PERIOD;
            static int IQRejectionToUse = 300;
            static int initialAdjustmentCnt = 270;
            static int noiseRejectionPassedParameter = 1;
            static int prevIQrejectionValue = IQRejectionToUse;

            static bool fixIQRjections = false;
            static int IQRejectionToFixTo = 550;
            static BinaryWriter outPut;

            static float threshold = 4f; // double of what we should enter into radar app
            static int detection = 0;
            static int M = 2;
            static int N = 3;
            static int USE_TARGET_FILTER = 2; // 0 - don't use any small target filter, 1 - use sample suppression, 2 - use walk level suppression
            static int targetFilter = 310;
            static int ADJUST_RADAR_MEDIAN = 1;
            static int ADJUST_SCALING_PARAMETER = 1;
            static double adjustmentParameter = 1;
            static int adjustmentParameterStepSize = 4;
            static int time = 8;
            static int graphScalingFactor = 40; // this helps some graphs look better (1 is no scaling)

            static int contDetectCnt = -1;
            static int RAW_UNWRAP_RESULT_DATA = 0;

            enum PI
            {
                HALF = 6434,
                FULL = 12868,
                NEG_FULL = -12868,
                TWO = 25736,
                NEG_HALF = -6434
            };

            static int approxUnwrappedPhase = 0;
            static int crossUnwrappedPhase = 0;
            static int crossUnwrappedPhaseMax = 0;
            static int crossUnwrappedPhaseZero = 0;

            static int prevQ = 0, prevI = 0;
            static int prevQMax = 0, prevIMax = 0;
            static int prevQZero = 0, prevIZero = 0;

            static int dataCntMax = 3750;
            static int dataCnt = 0;
            static ushort[] radarMedian = new ushort[dataCntMax];
            static ushort[] radarQMedian = new ushort[dataCntMax];
            static ushort[] radarIMedian = new ushort[dataCntMax];

            

            static int xTrackSampleCnt = 300; //unwrap phase median (background noise)
            static int yTrackSampleCnt = 100; //rawQ median

            static int wTrackSampleCnt = 100;
            static int zTrackSampleCnt = 100;

            static int size = 128;
            static UInt16 medianI = 2040;
            static UInt16 medianQ = 2040;
            //static UInt16 qsmedianI = 2040;
            //static UInt16 qsmedianQ = 2040;
            static int DetectLength = 0;
            static Int16 maxMinValueI = 0;
            static Int16 maxMinValueQ = 0;

            //static bool detection = false;
            static UInt16[] prevBufferI = new UInt16[size];
            static UInt16[] prevBufferQ = new UInt16[size];

            static int countOverTarget = 0;
            
            #region read in samples from file
            static bool readInSamples(BinaryReader r, UInt16[] I, UInt16[] Q, int size)
            {
                // Read data from Test.data.
                //UInt16 data;
                try
                {
                    for (int i = 0; i < size; i++)
                    {
                        I[i] = r.ReadUInt16();
                        if (RAW_UNWRAP_RESULT_DATA == 1)
                        {
                            outPut.Write(I[i]);
                        }
                        Q[i] = r.ReadUInt16();
                        if (RAW_UNWRAP_RESULT_DATA == 1)
                        {
                            outPut.Write(Q[i]);
                        }

                        // ADJUSTME
                        //change 10kHz to 250 - read in 39 neglected points
                        /*for (int neglect = 0; neglect < 39; neglect++)
                        {
                            r.ReadUInt16();
                            r.ReadUInt16();
                        }*/
                        if (I[i] > 4096 || Q[i] > 4096)
                        {
                            System.Diagnostics.Debug.WriteLine(i.ToString() + ": bad value: " + I[i].ToString("X") + " " + Q[i].ToString("X"));
                            i--;
                            r.ReadChar();
                        }
                        //System.Diagnostics.Debug.WriteLine(i.ToString() + ": " + I[i].ToString() + " " + Q[i].ToString() + " " + Math.Sqrt(I[i]*2 + Q[i]*2).ToString());
                    }
                    return true;
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("exception thrown reading: " + ex.ToString());
                    return false;
                }

            }
            #endregion
            #region approx arctan
            static double PI_FLOAT = 3.14159265f;
            static double PIBY2_FLOAT = 1.5707963f;

            static double atan2_approximation2(double y, double x)
            {
                double atan;
                double z = y / x;
                if (x == 0.0f)
                {
                    if (y > 0.0f) return PIBY2_FLOAT;
                    if (y == 0.0f) return 0.0f;
                    return -PIBY2_FLOAT;
                }
                if (Math.Abs(z) < 1.0f)
                {
                    atan = z / (1.0f + 0.28f * z * z);
                    if (x < 0.0f)
                    {
                        if (y < 0.0f) return atan - PI_FLOAT;
                        return atan + PI_FLOAT;
                    }
                }
                else
                {
                    atan = PIBY2_FLOAT - z / (z * z + 0.28f);
                    if (y < 0.0f) return atan - PI_FLOAT;
                }
                return atan;
            }
            static double approxUnwrapPhase(Int16 valueI, Int16 valueQ, Int32 noiseRejection)
            {
                double phase_diffApprox;

                double newPhase = atan2_approximation2(valueQ, valueI);
                //System.Diagnostics.Debug.WriteLine(newPhase.ToString() + " " + valueQ.ToString() + " " + valueI.ToString());

                // Ignore small changes
                if (Math.Abs(valueI) < noiseRejection && Math.Abs(valueQ) < noiseRejection)
                {
                    newPhase = wPhase_prevApprox;
                }

                // phase unwrap with currently used IQ rejection parameter
                wPhaseApprox = newPhase;
                phase_diffApprox = wPhaseApprox - wPhase_prevApprox + (double)PI.FULL / 4096;

                if (phase_diffApprox < 0)
                    phase_diffApprox += (double)PI.TWO / 4096;
                else if (phase_diffApprox > (double)PI.TWO / 4096)
                    phase_diffApprox -= (double)PI.TWO / 4096;
                uwPhaseApprox = uwPhase_prevApprox + phase_diffApprox - (double)PI.FULL / 4096;
                //System.Diagnostics.Debug.WriteLine(newPhase.ToString() + " " + phase_diffApprox.ToString() + " " + uwPhaseApprox.ToString());
                wPhase_prevApprox = wPhaseApprox;
                uwPhase_prevApprox = uwPhaseApprox;

                //runningApproxUnwrap += newPhase;

                return uwPhaseApprox;
            }
            #endregion
            #region QuickSelect median
            static void ELEM_SWAP(ref UInt16 a, ref UInt16 b)
            {
                UInt16 t = a;
                a = b;
                b = t;
            }

            static UInt16 quick_select(UInt16[] arr, int n)
            {
                int low, high;
                int median;
                int middle, ll, hh;

                low = 0; high = n - 1; median = (low + high) / 2;
                for (; ; )
                {
                    if (high <= low) // One element only 
                        return arr[median];

                    if (high == low + 1)
                    {  // Two elements only 
                        if (arr[low] > arr[high])
                            ELEM_SWAP(ref arr[low], ref arr[high]);
                        return arr[median];
                    }

                    // Find median of low, middle and high items; swap into position low 
                    middle = (low + high) / 2;
                    if (arr[middle] > arr[high]) ELEM_SWAP(ref arr[middle], ref arr[high]);
                    if (arr[low] > arr[high]) ELEM_SWAP(ref arr[low], ref arr[high]);
                    if (arr[middle] > arr[low]) ELEM_SWAP(ref arr[middle], ref arr[low]);

                    // Swap low item (now in position middle) into position (low+1) 
                    ELEM_SWAP(ref arr[middle], ref arr[low + 1]);

                    // Nibble from each end towards middle, swapping items when stuck 
                    ll = low + 1;
                    hh = high;
                    for (; ; )
                    {
                        do ll++; while (arr[low] > arr[ll]);
                        do hh--; while (arr[hh] > arr[low]);

                        if (hh < ll)
                            break;

                        ELEM_SWAP(ref arr[ll], ref arr[hh]);
                    }

                    // Swap middle item (in position low) back into correct position 
                    ELEM_SWAP(ref arr[low], ref arr[hh]);

                    // Re-set active partition 
                    if (hh <= median)
                        low = ll;
                    if (hh >= median)
                        high = hh - 1;
                }
            }
            #endregion
            #region Get median of samples
            static int partitions(int low, int high, UInt16[] buffer)
            {
                int p = low, r = high, x = buffer[r], i = p - 1;
                UInt16 tempVal;
                for (int j = p; j <= r - 1; j++)
                {
                    if (buffer[j] <= x)
                    {
                        i++;
                        tempVal = buffer[i];
                        buffer[i] = buffer[j];
                        buffer[j] = tempVal;
                    }
                }
                tempVal = buffer[i + 1];
                buffer[i + 1] = buffer[r];
                buffer[r] = tempVal;

                return i + 1;
            }

            static UInt16 findMedian(UInt16[] buffer, Int32 length)
            {
                int left = 0;
                int right = length - 1;
                int kth = (int)(length >> 1); // divide by 2

                UInt16[] iBuffer = new UInt16[length];
                int i;
                for (i = 0; i < length; i++)
                {
                    iBuffer[i] = (UInt16)buffer[i];
                }

                while (true)
                {
                    int pivotIndex = partitions(left, right, iBuffer);

                    int len = pivotIndex - left + 1;

                    if (kth == len)
                    {
                        //buffer[0] = buffer[pivotIndex]; // for debugging median
                        return iBuffer[pivotIndex];
                    }
                    else if (kth < len)
                        right = pivotIndex - 1;
                    else
                    {
                        kth = kth - len;
                        left = pivotIndex + 1;
                    }
                }
            }
            static Int16 findMaxOffset(Int16[] buffer, Int32 length)
            {
                Int16 max = 2048;
                Int16 min = 2048;

                for (int i = 0; i < length; i++)
                {
                    if (buffer[i] > max)
                        max = buffer[i];
                    if (buffer[i] < min)
                        min = buffer[i];
                }
                    if ((max - 2048) > (2048 - min))
                        return (Int16)(Math.Abs(max));
                    else
                        return (Int16)(Math.Abs(min));
            }
            #endregion
            static int partitions(int low, int high, Int16[] buffer)
            {
                int p = low, r = high, x = buffer[r], i = p - 1;
                Int16 tempVal;
                for (int j = p; j <= r - 1; j++)
                {
                    if (buffer[j] <= x)
                    {
                        i++;
                        tempVal = buffer[i];
                        buffer[i] = buffer[j];
                        buffer[j] = tempVal;
                    }
                }
                tempVal = buffer[i + 1];
                buffer[i + 1] = buffer[r];
                buffer[r] = tempVal;

                return i + 1;
            }

            static Int16 findMedian(Int16[] buffer, Int32 length)
            {
                int left = 0;
                int right = length - 1;
                int kth = (int)(length >> 1); // divide by 2

                Int16[] iBuffer = new Int16[length];
                int i;
                for (i = 0; i < length; i++)
                {
                    iBuffer[i] = (Int16)buffer[i];
                }

                while (true)
                {
                    int pivotIndex = partitions(left, right, iBuffer);

                    int len = pivotIndex - left + 1;

                    if (kth == len)
                    {
                        //buffer[0] = buffer[pivotIndex]; // for debugging median
                        return iBuffer[pivotIndex];
                    }
                    else if (kth < len)
                        right = pivotIndex - 1;
                    else
                    {
                        kth = kth - len;
                        left = pivotIndex + 1;
                    }
                }
            }
            #region m of n
            class Counter
            {
                public int count;
            };
            // M-out-of-N detector to detect Displacement Detection
            // state is the current state of the detector
            // state = 1 iff there are M hits in the last N seconds
            class MoutOfNDetector
            {
                public int state;
                public int prevstate;

                public int M, N, End;
                public int[] Buff;
                public bool initialized = false;
                //int Buff[3];

                public void Init(int x, int y)
                {
                    initialized = true;
                    state = 0;
                    prevstate = 0;
                    M = x;
                    N = y;
                    End = 0;
                    Buff = new int[M];

                    int i;

                    for (i = 0; i < M; i++)
                        Buff[i] = -N;
                }

                public void Uninit()
                {
                    initialized = false;
                }

                public void Update(int index, int detect)
                {
                    prevstate = state;

                    if (detect == 1)
                    {
                        Buff[End] = index;
                        End = (End + 1) % M;
                    }

                    if (index - Buff[End] < N)
                        state = 1;
                    else
                        state = 0;
                }
            };
            static Counter mOfnCounter;
            static MoutOfNDetector mOfnDetector;
            #endregion

            #region Main function
            static int calculatePhase(UInt16[] bufferI, UInt16[] bufferQ, UInt16[] bufferUnwrap, Int32 length, UInt16 medianI, UInt16 medianQ, Int32 noiseRejection, UInt16 debugVal, UInt16 IDNumber, UInt16 versionNumber)
            {
                int i;
                int unwrappedPhase;
                int unwrappedPhaseZero;
                int unwrappedPhaseMax;
                int unwrappedPhaseApprox = 0;
                int minPhase = 0, maxPhase = 0;
                int minPhaseZero = 0, maxPhaseZero = 0;
                int minPhaseMax = 0, maxPhaseMax = 0;
                int minPhaseApprox = 0, maxPhaseApprox = 0;
                int initialPhaseApprox = 0;
	            int maxOffsetQ = 2048;
	            int maxOffsetI = 2048;
	            int minOffsetQ = 2048;
	            int minOffsetI = 2048;

                Int16[] iBufferI = new Int16[length];
                Int16[] iBufferQ = new Int16[length];
                crossUnwrappedPhase = 0;
                crossUnwrappedPhaseMax = 0;
                crossUnwrappedPhaseZero = 0;

                countOverTarget = 0;

                for (i = 0; i < length; i++)
                {
                    iBufferI[i] = (Int16)(bufferI[i] - medianI);
                    if (iBufferI[i] > maxOffsetI)
                        maxOffsetI = iBufferI[i];
                    if (iBufferI[i] < minOffsetI)
                        minOffsetI = iBufferI[i];
                    iBufferQ[i] = (Int16)(bufferQ[i] - medianQ);
                    if (iBufferQ[i] > maxOffsetQ)
                        maxOffsetQ = iBufferQ[i];
                    if (iBufferQ[i] < minOffsetQ)
                        minOffsetQ = iBufferQ[i];
                    if (Math.Abs(iBufferI[i] + iBufferQ[i]) > targetFilter)
                    {
                        countOverTarget++;
                    }
                    unwrappedPhase = (unwrapPhase(iBufferI[i], iBufferQ[i], noiseRejection) >> 12);	// divide by 4096
                    // scaling and using abs on cross product result
                    //crossUnwrappedPhase += (int)(Math.Abs((double)unwrapCrossProduct(iBufferI[i], iBufferQ[i], noiseRejection)*2*Math.PI));                    
                    unwrapCrossProduct(iBufferI[i], iBufferQ[i], noiseRejection);
                    unwrappedPhaseApprox = (int)(approxUnwrapPhase(iBufferI[i], iBufferQ[i], noiseRejection));

                    bufferUnwrap[i] = (UInt16)unwrappedPhase;

                    unwrappedPhaseZero = uwPhaseZero >> 12;
                    unwrappedPhaseMax = uwPhaseMax >> 12;

                    if (i == 0)
                    {
                        minPhase = maxPhase = unwrappedPhase;
                        minPhaseZero = maxPhaseZero = unwrappedPhaseZero;
                        minPhaseMax = maxPhaseMax = unwrappedPhaseMax;
                        minPhaseApprox = maxPhaseApprox = initialPhaseApprox = unwrappedPhaseApprox;
                    }

                    if (unwrappedPhase < minPhase) minPhase = unwrappedPhase;
                    else if (unwrappedPhase > maxPhase) maxPhase = unwrappedPhase;

                    if (unwrappedPhaseMax < minPhaseMax) minPhaseMax = unwrappedPhaseMax;
                    else if (unwrappedPhaseMax > maxPhaseMax) maxPhaseMax = unwrappedPhaseMax;

                    if (unwrappedPhaseZero < minPhaseZero) minPhaseZero = unwrappedPhaseZero;
                    else if (unwrappedPhaseZero > maxPhaseZero) maxPhaseZero = unwrappedPhaseZero;

                    if (unwrappedPhaseApprox < minPhaseApprox) minPhaseApprox = unwrappedPhaseApprox;
                    else if (unwrappedPhaseApprox > maxPhaseApprox) maxPhaseApprox = unwrappedPhaseApprox;
                }

                unwrapMax = maxPhaseMax - minPhaseMax;
                unwrapZero = maxPhaseZero - minPhaseZero;
                approxUnwrappedPhase = (int)((maxPhaseApprox - minPhaseApprox) / (2 * Math.PI));
                //approxUnwrappedPhase = (int)((maxPhaseApprox - minPhaseApprox));
                //approxUnwrappedPhase = (int)runningApproxUnwrap;

                // ADJUSTME
                //crossUnwrappedPhase = (int)(Math.Abs(crossUnwrappedPhase)*2*Math.PI);
                crossUnwrappedPhase = (Math.Abs(crossUnwrappedPhase));
                crossUnwrappedPhaseZero = (Math.Abs(crossUnwrappedPhaseZero));
                crossUnwrappedPhaseMax = (Math.Abs(crossUnwrappedPhaseMax));
                //return (int)((maxPhase - minPhase) / (2 * Math.PI));

                maxMinValueI = findMaxOffset(iBufferI, length);
                maxMinValueQ = findMaxOffset(iBufferQ, length);

                for (i = 0; i < length; i++)
                {
                    iBufferI[i] = Math.Abs(iBufferI[i]);
                    iBufferQ[i] = Math.Abs(iBufferQ[i]);
                }
                Int16 medI = findMedian(iBufferI, length);
                Int16 medQ = findMedian(iBufferQ, length);
                //System.Diagnostics.Debug.WriteLine("| " + medI.ToString() + " " + medQ.ToString() + " |");
                
                return (int)((maxPhase - minPhase));
            }
            #endregion
            #region Cross product
            static void unwrapCrossProduct(Int16 valueI, Int16 valueQ, Int32 noiseRejection)
            {
                int crossProductResultValue = 0;
                int cprod = 0;
                // Ignore small changes
                if (Math.Abs(valueI) > noiseRejection || Math.Abs(valueQ) > noiseRejection)
                {
                    cprod = (prevQ * valueI) - (prevI * valueQ);

                    // we will track the unwrap with zero noise rejection at all times in case we need it
                    if ((cprod < 0) && (prevI < 0) && (valueI > 0))
                        crossProductResultValue = 1;
                    else if ((cprod > 0) && (prevI > 0) && (valueI < 0))
                        crossProductResultValue = -1;
                    else
                        crossProductResultValue = 0;
                    // this is the unwrap result if we apply the user's noise rejection value
                    crossUnwrappedPhase += crossProductResultValue;

                    // here we keep track of the current point if it is not considered noise 
                    prevQ = valueQ;
                    prevI = valueI;
                }

                // Ignore small changes                                
                cprod = (prevQZero * valueI) - (prevIZero * valueQ);

                // we will track the unwrap with zero noise rejection at all times in case we need it
                if ((cprod < 0) && (prevIZero < 0) && (valueI > 0))
                    crossProductResultValue = 1;
                else if ((cprod > 0) && (prevIZero > 0) && (valueI < 0))
                    crossProductResultValue = -1;
                else
                    crossProductResultValue = 0;
                // this is the unwrap result if we apply the user's noise rejection value
                crossUnwrappedPhaseZero += crossProductResultValue;

                // here we keep track of the current point if it is not considered noise 
                prevQZero = valueQ;
                prevIZero = valueI;


                // Ignore small changes
                if (Math.Abs(valueI) > MAX_IQ_REJECTION || Math.Abs(valueQ) > MAX_IQ_REJECTION)
                {
                    cprod = (prevQMax * valueI) - (prevIMax * valueQ);

                    // we will track the unwrap with zero noise rejection at all times in case we need it
                    if ((cprod < 0) && (prevIMax < 0) && (valueI > 0))
                        crossProductResultValue = 1;
                    else if ((cprod > 0) && (prevIMax > 0) && (valueI < 0))
                        crossProductResultValue = -1;
                    else
                        crossProductResultValue = 0;
                    // this is the unwrap result if we apply the user's noise rejection value
                    crossUnwrappedPhaseMax += crossProductResultValue;

                    // here we keep track of the current point if it is not considered noise 
                    prevQMax = valueQ;
                    prevIMax = valueI;
                }

            }
            #endregion
            #region arctan lookup table
            static int findArcTan(int small, int big)
            {
                int temp;
                // small * 4096
                temp = (small << 12) / big;
                return arcTan[temp];
            }

            static int unwrapPhase(Int16 valueI, Int16 valueQ, Int32 noiseRejection)
            {
                int phase_diff;
                int phase_diffMax;
                int phase_diffZero;
                int newPhase = 0;
                int newPhaseMax = 0;
                int newPhaseZero = 0;

                if (valueI > 0 && valueQ >= 0)
                {			//1st Quadrant: arg = atan(imag/real)
                    if (valueQ <= valueI) 					// Q/I is in {0,1}
                        newPhase = findArcTan(valueQ, valueI);
                    else
                        newPhase = (int)PI.HALF - findArcTan(valueI, valueQ);	// atan(x) = pi/2 - atan(1/x) for x > 0		
                }
                else if (valueI < 0 && valueQ >= 0)
                {		//2nd quadrant: arg = pi - atan(Math.Abs(imag/real)
                    if (valueQ <= Math.Abs(valueI))
                        newPhase = (int)PI.FULL - findArcTan(valueQ, Math.Abs(valueI));
                    else
                        newPhase = (int)PI.HALF + findArcTan(Math.Abs(valueI), valueQ);  // pi - (pi/2 - atan(1/x))
                }
                else if (valueI < 0 && valueQ < 0)
                {			// 3rd quadrant: arg = -pi + atan(b/a)
                    if (Math.Abs(valueQ) <= Math.Abs(valueI))
                        newPhase = (int)PI.NEG_FULL + findArcTan(Math.Abs(valueQ), Math.Abs(valueI));
                    else
                        newPhase = (int)PI.NEG_HALF - findArcTan(Math.Abs(valueI), Math.Abs(valueQ));	// -pi + pi/2 - atan(1/x)
                }
                else if (valueI > 0 && valueQ < 0)
                {							//4th quadrant: arg = - atan(b/a)
                    if (Math.Abs(valueQ) <= valueI)
                        newPhase = 0 - findArcTan(Math.Abs(valueQ), valueI);
                    else
                        newPhase = (int)PI.NEG_HALF + findArcTan(valueI, Math.Abs(valueQ));
                }
                #region
                newPhaseZero = newPhase;
                newPhaseMax = newPhase;
                #endregion
                // Ignore small changes
                if (Math.Abs(valueI) < noiseRejection && Math.Abs(valueQ) < noiseRejection)
                {
                    newPhase = wPhase_prev;
                }
                #region
                // always keeping track of phase with max IQ rejection
                if (Math.Abs(valueI) < MAX_IQ_REJECTION && Math.Abs(valueQ) < MAX_IQ_REJECTION)
                {
                    newPhaseMax = wPhase_prevMax;
                }
                #endregion

                // phase unwrap with currently used IQ rejection parameter
                wPhase = newPhase;
                phase_diff = wPhase - wPhase_prev + (int)PI.FULL;
                if (phase_diff < 0)
                    phase_diff += (int)PI.TWO;
                else if (phase_diff > (int)PI.TWO)
                    phase_diff -= (int)PI.TWO;
                uwPhase = uwPhase_prev + phase_diff - (int)PI.FULL;

                wPhase_prev = wPhase;
                uwPhase_prev = uwPhase;
                #region
                // phase unwrap with currently used IQ rejection of zero
                wPhaseZero = newPhaseZero;

                phase_diffZero = wPhaseZero - wPhase_prevZero + (int)PI.FULL;
                if (phase_diffZero < 0)
                    phase_diffZero += (int)PI.TWO;
                else if (phase_diffZero > (int)PI.TWO)
                    phase_diffZero -= (int)PI.TWO;
                uwPhaseZero = uwPhase_prevZero + phase_diffZero - (int)PI.FULL;

                wPhase_prevZero = wPhaseZero;
                uwPhase_prevZero = uwPhaseZero;

                // phase unwrap with currently used IQ rejection of MAX
                wPhaseMax = newPhaseMax;

                phase_diffMax = wPhaseMax - wPhase_prevMax + (int)PI.FULL;
                if (phase_diffMax < 0)
                    phase_diffMax += (int)PI.TWO;
                else if (phase_diffMax > (int)PI.TWO)
                    phase_diffMax -= (int)PI.TWO;
                uwPhaseMax = uwPhase_prevMax + phase_diffMax - (int)PI.FULL;

                wPhase_prevMax = wPhaseMax;
                uwPhase_prevMax = uwPhaseMax;
                #endregion
                return uwPhase;
            }
            #endregion
            #region main
            static int processPhase(UInt16[] bufferI, UInt16[] bufferQ, Int32 length, System.Windows.Forms.DataVisualization.Charting.Series normalUnwrapSeries, System.Windows.Forms.DataVisualization.Charting.Series approxUnwrapSeries, System.Windows.Forms.DataVisualization.Charting.Series crossSeries, System.Windows.Forms.DataVisualization.Charting.Series detectionSeries, System.Windows.Forms.DataVisualization.Charting.Series humanDetectionSeries, System.Windows.Forms.DataVisualization.Charting.Series debugSeries, System.Windows.Forms.DataVisualization.Charting.Series debug2Series)
            {
                //bool detection = false;
                ushort medianQData = 0;
                int unwrap;
                //Int32 backgroundDisplacementNoise = 0;
                Int32 currentDisplacementNoise = 0;
                //Int32 currentRadarNoise = 0;
                UInt16[] bufferUnwrap = new UInt16[size];

                dataCnt++;
                // Find median I
                medianI = findMedian(bufferI, length);
                wHeapTrackInsert(medianI);
                //System.Diagnostics.Debug.WriteLine(medianI.ToString() + " " + wHeapTrackMedian().ToString() );
                // Find median Q
                medianQ = findMedian(bufferQ, length);
                zHeapTrackInsert(medianQ);
                // tracking the raw I/Q radar median. To save time I just use one data point each pass
                medianQData = (ushort)Math.Abs((bufferQ[0] - zHeapTrackMedian()));
                if (plotPt < 5)
                {
                    // This helps remove some innacurate first couple of samples from being included which throws off the graph's scale
                    yHeapTrackInsert(100);
                }
                else
                {
                    yHeapTrackInsert(medianQData * 2);
                }
                /*if (dataCnt < dataCntMax)
                {
                    double v1 = (bufferI[100] - medianI) * (bufferI[100] - medianI);
                    double v2 = (bufferQ[100] - medianQ) * (bufferQ[100] - medianQ);
                    double answer = Math.Sqrt(v1 + v2);
                    //System.Diagnostics.Debug.WriteLine(dataCnt.ToString() + " " + answer.ToString() + " " + v1.ToString() + " " + v2.ToString() + " " + Math.Abs((bufferI[100] - medianI)).ToString() + " " + Math.Abs((bufferQ[100] - medianQ)).ToString());
                    radarMedian[dataCnt] = (ushort)answer;
                    radarQMedian[dataCnt] = (ushort)Math.Abs((bufferQ[100] - medianQ));
                    radarIMedian[dataCnt] = (ushort)Math.Abs((bufferI[100] - medianI));
                }
                else
                {
                    ushort medianData = findMedian(radarMedian, dataCntMax);
                    medianQData = findMedian(radarQMedian, dataCntMax);
                    ushort medianIData = findMedian(radarIMedian, dataCntMax);
                    //System.Diagnostics.Debug.WriteLine(dataCnt.ToString() + " " + medianData.ToString() + " " + medianQData.ToString() + " " + medianIData.ToString());
                }*/
                //System.Diagnostics.Debug.WriteLine("old median: " + medianI.ToString() + " " + medianQ.ToString());

                /*// Find median I
                qsmedianI = quick_select(bufferI, length);
                // Find median Q
                qsmedianQ = quick_select(bufferQ, length);
                System.Diagnostics.Debug.WriteLine("qs median: " + qsmedianI.ToString() + " " + qsmedianQ.ToString());*/


                //HeapTrackInsert(radarQ, medianQ);

                //backgroundDisplacementNoise = HeapTrackMedian(unwrapMedianZero);
                currentDisplacementNoise = xHeapTrackMedian();
                //currentRadarNoise = HeapTrackMedian(radarQ);
                if (ADJUST_RADAR_MEDIAN == 1)
                {
                    if (ADJUST_SCALING_PARAMETER == 0)
                    {
                        //System.Diagnostics.Debug.WriteLine(yHeapTrackMedian().ToString());
                        IQRejectionToUse = (int)((double)yHeapTrackMedian() * adjustmentParameter);
                    }
                    else
                    {
                        double temp = yHeapTrackMedian();
                        if (temp > 100)
                        {
                            temp = temp - 100;
                            temp = temp / adjustmentParameterStepSize;
                            temp = adjustmentParameter + (temp * 0.1);
                        }
                        else
                        {
                            temp = adjustmentParameter;
                        }
                        IQRejectionToUse = (int)((double)yHeapTrackMedian() * temp);
                    }
                }
                else
                {
                    if (initialAdjustmentCnt > 0)
                    {
                        // this section will make large initial adjustments to the IQ rejection parameter
                        initialAdjustmentCnt--;
                        // we'll only make adjustments every INITIAL_ADJUST_SAMPLE_CNT samples
                        if ((initialAdjustmentCnt % INITIAL_ADJUST_SAMPLE_CNT) == 0)
                        {
                            if (currentDisplacementNoise < (noiseRejectionPassedParameter))
                                IQRejectionToUse = IQRejectionToUse - 10;
                            else if (currentDisplacementNoise > (noiseRejectionPassedParameter))
                                IQRejectionToUse = IQRejectionToUse + 10;
                            else
                                // we are close enough to where we want to be so the initial large adjustment period is over
                                initialAdjustmentCnt = 0;
                            xResetHeapTrack(300);
                            System.Diagnostics.Debug.WriteLine("--------------------------------------" + initialAdjustmentCnt.ToString());
                        }
                    }
                    else
                    {
                        // this section will make small adjustments every IQ_ADJUSTMENT_PERIOD
                        adjustmentIQPeriod--;
                        // only adjusted every IQ_ADJUSTMENT_PERIOD calls
                        if (adjustmentIQPeriod <= 0)
                        {
                            if (currentDisplacementNoise < (noiseRejectionPassedParameter))
                                IQRejectionToUse--;
                            else if (currentDisplacementNoise > (noiseRejectionPassedParameter))
                                IQRejectionToUse++;
                            adjustmentIQPeriod = IQ_ADJUSTMENT_PERIOD;

                            // NEW
                            if (IQRejectionToUse == prevIQrejectionValue)
                            {
                                //IQRejectionToUse++;
                                IQRejectionToUse += 2;
                            }
                            prevIQrejectionValue = IQRejectionToUse;
                        }
                    }
                }
                // capping the noise rejection to a max or min
                if (IQRejectionToUse < 0)
                    IQRejectionToUse = 0;
                else if (IQRejectionToUse > MAX_IQ_REJECTION)
                    IQRejectionToUse = MAX_IQ_REJECTION;

                if (fixIQRjections == true)
                {
                    IQRejectionToUse = IQRejectionToFixTo;
                }
                // copying to temp buffer so I don't modify original I/Q buffers in case I want to save them to NOR         
                //System.Diagnostics.Debug.WriteLine(IQRejectionToUse.ToString());
                //debugSeries.Points.AddXY(plotPt, IQRejectionToUse);
                
                debugSeries.Points.AddXY(plotPt, yHeapTrackMedian());
                debug2Series.Points.AddXY(plotPt, IQRejectionToUse);

                //debugSeries.Points.AddXY(plotPt, medianQData);
                //debug2Series.Points.AddXY(plotPt, medianI);

                unwrap = calculatePhase(bufferI, bufferQ, bufferUnwrap, length, (ushort)wHeapTrackMedian(), (ushort)zHeapTrackMedian(), IQRejectionToUse, 0, 0, 0);
                //System.Diagnostics.Debug.WriteLine("! " + crossUnwrappedPhase.ToString() +  " !");
                //unwrap = calculatePhase(bufferI, bufferQ, bufferUnwrap, length, medianI, medianQ, IQRejectionToUse, 0, 0, 0);

                //normalUnwrapSeries.Points.AddXY(plotPt, unwrap/6.28318);
                //approxUnwrapSeries.Points.AddXY(plotPt, approxUnwrappedPhase / 6.28318);
                normalUnwrapSeries.Points.AddXY(plotPt, unwrap);
                approxUnwrapSeries.Points.AddXY(plotPt, approxUnwrappedPhase);
                crossSeries.Points.AddXY(plotPt, crossUnwrappedPhase * graphScalingFactor);


                /*

                // if the AD callbacks per second is not yet set we will attempt to read the correct value now and then adjust the threshold appropriately
                if (callbacksPerSecond == 0)
                {
                    callbacksPerSecond = AD_GetCallbacksPerSecond();
                    if (callbacksPerSecond != 0)
                    {
                        threshold = threshold / callbacksPerSecond;
                    }
                }*/

                mOfnCounter.count += 1;
                if (crossUnwrappedPhase > threshold)
                {
                    if ( ((maxMinValueI < targetFilter) && (maxMinValueQ < targetFilter)) && USE_TARGET_FILTER == 1)
                    {
                        // here we suppress the entire sample if the max I and max Q are both below a certain level
                        mOfnDetector.Update(mOfnCounter.count, 0);
                        //System.Diagnostics.Debug.WriteLine("SUPPRESSED *****" + plotPt.ToString() + "*****" + medianI.ToString() + " " + medianQ.ToString() + " " + maxMinValueI.ToString() + " " + maxMinValueQ.ToString());
                    }
                    else
                    {
                        mOfnDetector.Update(mOfnCounter.count, 1);
                        //System.Diagnostics.Debug.WriteLine("*****" + plotPt.ToString() + "*****" + medianI.ToString() + " " + medianQ.ToString() + " " + maxMinValueI.ToString() + " " + maxMinValueQ.ToString());
                    }
                }
                else
                {
                    mOfnDetector.Update(mOfnCounter.count, 0);
                    // we are only adding the current unwrap value to the background noise tracking if we did not detect anything

                }
                if (mOfnDetector.state == 1 && mOfnDetector.prevstate == 0)
                {
                    DetectLength = 1;                    
                    detection = 10;
                    contDetectCnt += 2;
                }
                else if (mOfnDetector.state == 1 && mOfnDetector.prevstate == 1)
                {
                    DetectLength++;
                    //System.Diagnostics.Debug.WriteLine("~~~~" + DetectLength.ToString());
                    contDetectCnt += 2;
                }
                else
                {
                    detection = 0;
                    contDetectCnt = -1;
                    //System.Diagnostics.Debug.WriteLine("####" + DetectLength.ToString());
                }
                /*if (crossUnwrappedPhase >= 2 * threshold)
                {
                    detection = 10;
                    //System.Diagnostics.Debug.WriteLine("*****" + plotPt.ToString() + "*****");
                }*/
                if ((contDetectCnt > time) )
                {
                    if (USE_TARGET_FILTER==2){
                        if (((double)countOverTarget)/(time*ADCBufferSize/2) <= 0.05){
                            // not enough samples are above the small target suppression target
                            humanDetectionSeries.Points.AddXY(plotPt, 0);
                        }
                        else
                        {
                            humanDetectionSeries.Points.AddXY(plotPt, graphScalingFactor * 10);
                        }
                    }
                    else {
                        humanDetectionSeries.Points.AddXY(plotPt, graphScalingFactor*10);
                    }

                    //System.Diagnostics.Debug.WriteLine("human @ " + plotPt.ToString());
                }
                else
                    humanDetectionSeries.Points.AddXY(plotPt, 0);

                detectionSeries.Points.AddXY(plotPt, detection);

                //if (debugVal == 6)
                //    hal_printf("%d %d %d %d %d %d %d\r\n", getUnwrapMax(), unwrap, getUnwrapZero(), HeapTrackMedian(unwrapMedianMax), HeapTrackMedian(unwrapMedian), HeapTrackMedian(unwrapMedianZero), IQRejectionToUse);


                //xHeapTrackInsert(unwrap);
                //System.Diagnostics.Debug.WriteLine(unwrap.ToString() + " " + xHeapTrackMedian().ToString() + " " + IQRejectionToUse.ToString());

                plotPt++;
                xHeapTrackInsert(crossUnwrappedPhase);
                //System.Diagnostics.Debug.Write(crossUnwrappedPhaseZero.ToString() + " " + crossUnwrappedPhase.ToString() + " " + crossUnwrappedPhaseMax.ToString() + " " + xHeapTrackMedian().ToString() + " " + IQRejectionToUse.ToString() + "   ");

                return unwrap;
            }
            #endregion
            #region Chart
            public FakeChartForm1()
            {
                InitializeComponent();
            }


            private void Form1_Load(object sender, EventArgs e)
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
                chart1.Series.Clear();
                var normalUnwrapSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Normal Unwrap",
                    Color = System.Drawing.Color.Green,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var approxUnwrapSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Approx Unwrap",
                    Color = System.Drawing.Color.Blue,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var crossSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Cross Product Unwrap",
                    Color = System.Drawing.Color.Blue,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var detectionSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Detections",
                    Color = System.Drawing.Color.Green,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var humanDetectionSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "HumanDetections",
                    Color = System.Drawing.Color.Red,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var debugSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Debug",
                    Color = System.Drawing.Color.DarkCyan,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var debug2Series = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Debug2",
                    Color = System.Drawing.Color.DarkOliveGreen,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };
                var rawSeries = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Raw Radar Data",
                    Color = System.Drawing.Color.Black,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    //ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range
                    ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line
                };

                UInt16[] IBuffer, QBuffer;
                //System.Diagnostics.Debug.WriteLine("size of table: " + arcTan.Length);
                bool detectionRet = false;
                int unwrapRet = 0;

                IBuffer = new UInt16[size];
                QBuffer = new UInt16[size];
                int readPoint = 0;

                xHeapTrackNew(xTrackSampleCnt);
                yHeapTrackNew(yTrackSampleCnt);
                xHeapTrackInsert(0);
                yHeapTrackInsert(0);
                wHeapTrackNew(wTrackSampleCnt);
                zHeapTrackNew(zTrackSampleCnt);
                wHeapTrackInsert(0);
                zHeapTrackInsert(0);

                mOfnCounter = new Counter();
                mOfnDetector = new MoutOfNDetector();
                mOfnCounter.count = 0;
                mOfnDetector.Init(M, N);
                
                string fileName;
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\generated.data";
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\south.bbs";
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\radar_data.a991.5715.1";
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\noise 9f3a(4693-06).bbs";
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\noise 56ce(4693-05).bbs";
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\test05.bbs";
                //fileName = @"D:\Users\Chris\Documents\Visual Studio 2013\Projects\RadarAlgorithmGraph\RadarAlgorithmGraph\i40-60 walk.bbs";
                //fileName = @"..\..\recorded.bbs";
                fileName = @"..\..\recorded.int";
                //fileName = @"..\..\office_noise.bbs";
                //fileName = @"E:\RadarAlgorithmGraph\RadarAlgorithmGraph\dataCollect\grass near tree.bbs";
                //fileName = @"E:\RadarAlgorithmGraph\RadarAlgorithmGraph\dataCollect\room1.bbs";
                //string fileName = @"..\..\dataCollect\room1.bbs";
                //fileName = @"..\..\dataCollect\room2.bbs";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\room 4m walk noise 2.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\room 4m walk back lobe.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\room 4m walk noise.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\tree 1m walk back lobe.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\tree 1m.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\under tree 1m walk.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\mofn tests\family.int";
                //fileName = @"C:\Work\data\integratedBoard\open grass.bbs";
                //fileName = @"C:\Work\data\integratedBoard\open room.bbs";
                //fileName = @"C:\Work\data\integratedBoard\room.bbs";
                //fileName = @"C:\Work\data\integratedBoard\tree back lobe.bbs";
                //fileName = @"C:\Work\data\integratedBoard\tree1.int";
                //fileName = @"C:\Work\data\integratedBoard\tree2.bbs";  
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\8-4 noise tests\tree_1.int";
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\8-4 noise tests\bush_1.int";
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\8-4 noise tests\open_grass.int";
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\9-14 noise test\Darree_Sep_13_collect.bbs";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\radar demo test\grass.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\radar demo test\high noise.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar alone.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar with OMAC.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar with OMAC fan-in.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\long radar blind radar only.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar blind r28 radar with OMAC.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar - no OMAC - no antenna.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar only while another sends.int";
                //fileName = @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar with OMAC - other radio turned on last 15 minutes.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar with OMAC 2.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar with OMAC.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar only rx off no power cycle.int";
                //fileName= @"D:\Work\radar\data collects\wwf-test-03 board\omac radar inteference test\radar only no rx tx - power cycle.int";
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\10-11 overnight noise\basement 5094-03 radar csma overnight.bbs";
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\10-5 radio interference test\overnight radar csma board 2 on stand.int";
                //fileName = @"D:\Work\radar\data collects\wild life node 6-13\10-12 overnight noise\radar csma overnight2.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-13\30670 on brown board.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-13\cleaned 30670 hour on stand.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\32203\32203 raw data collect.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-14\bipole on stand.int";                
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-14\bipole brown board on stand.int"; 
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 in woods board on stand within branches.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 bush brown board new position.int";                
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 bush brown board normal position.int";  
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 on tree trunk on block of wood upside down.int";                
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 upside down on stand in log.int";   
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\24783 walk pattern antenna away from walk pattern.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\29896 background noise 2.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 inside tree trunk on stand.int"; 

                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\29896 background noise problem.int";                
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\29896 background noise NO antenna.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\24783 background noise.int";
                fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\29896 walk pattern.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\24738 walk pattern.int";                
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\2-17 noise tests\2-17 raw radar tests\26315 walk pattern.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 in woods stand in branches.int";                 
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\30670 2-16\2-16 30670 bush wind problem.int";
                fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\3-2 30670 cold night\cold overnight.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\3-2 30670 cold night\close zoom.bbs";
                //fileName = @"C:\Users\Chris\Desktop\out.bbs";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\cooler tests\3-8 baseline cooler.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\cooler tests\3-9 30670 cooler test1.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\cooler tests\3-10 30670 cooler test2.int";                
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-2 30670 overnight cold.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-3 30670 cold with board.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-4 30670 cold overnight.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-5 30670 cold with board.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-11 26315 overnight outside.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-12 26315 overnight outside.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\radar cold tests\3-13 30670 snow.int";
                //fileName = @"D:\Users\Chris\Dropbox (Samraksh)\WWF-Google Indoor Networks Logs\Kenneth yard - December tests\raw data collect\group noise 3 min.int";
                fileName = @"D:\Work\Austere\radar data\4-17\15 13.3 walk pattern.det";

                if (fileName.Contains(".int"))
                {
                    RAW_UNWRAP_RESULT_DATA = 1;
                }
                else
                {
                    RAW_UNWRAP_RESULT_DATA = 0;
                }
                string outFileName = fileName.Substring(0, fileName.Length - 4) + ".bbs";
                if (RAW_UNWRAP_RESULT_DATA == 1)
                {
                    FileStream stream = new FileStream(outFileName, FileMode.Create);
                    outPut = new BinaryWriter(stream);
                }

                // Create the reader for data.
                FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                BinaryReader r = new BinaryReader(fs);
                int graphOnlyCnt = 0;
                if (RAW_UNWRAP_RESULT_DATA == 1)
                {

                    #region search for beginning of raw data
                    // Read data from Test.data.
                    //UInt16 data;
                    try
                    {
                        int dataMarker = r.ReadUInt16();
                        while (dataMarker != 0xa5a5)
                        {
                            dataMarker = r.ReadUInt16();
                        }
                        System.Diagnostics.Debug.WriteLine("found marker: " + dataMarker.ToString());
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine("exception thrown looking for marker: " + ex.ToString());
                    }
                    #endregion
                }
                while (readInSamples(r, IBuffer, QBuffer, size) == true)
                {
                    graphOnlyCnt++;
                    //detectionRet = processPhase(IBuffer, QBuffer, size);
                    // ADJUSTME
                    //if ((graphOnlyCnt > 800) && (graphOnlyCnt < 810))
                    //if ((graphOnlyCnt < 500))
                    {
                        unwrapRet = processPhase(IBuffer, QBuffer, size, normalUnwrapSeries, approxUnwrapSeries, crossSeries, detectionSeries, humanDetectionSeries, debugSeries, debug2Series);
                        /*for (int j = 0; j<size; j++){
                            rawSeries.Points.AddXY(plotPt, IBuffer[j]);
                            
                        }*/
                        if (RAW_UNWRAP_RESULT_DATA == 1)
                        {
                            try
                            {
                                // reading out unwrap data
                                char readChar = r.ReadChar();
                                string intString = "";
                                while (readChar != '\r' && readChar != ' ' && readChar != '\n')
                                {
                                    intString = String.Concat(intString, readChar);
                                    readChar = r.ReadChar();
                                }
                                int unwrapResultZero = int.Parse(intString);
                                readChar = r.ReadChar();
                                intString = "";
                                while (readChar != '\r' && readChar != ' ' && readChar != '\n')
                                {
                                    intString = String.Concat(intString, readChar);
                                    readChar = r.ReadChar();
                                }
                                int unwrapResult = int.Parse(intString);
                                readChar = r.ReadChar();
                                intString = "";
                                while (readChar != '\r' && readChar != ' ' && readChar != '\n')
                                {
                                    intString = String.Concat(intString, readChar);
                                    readChar = r.ReadChar();
                                }
                                int unwrapResultMax = int.Parse(intString);
                                readChar = r.ReadChar();
                                intString = "";
                                while (readChar != '\r' && readChar != ' ' && readChar != '\n')
                                {
                                    intString = String.Concat(intString, readChar);
                                    readChar = r.ReadChar();
                                }
                                int unwrapMedianResult = int.Parse(intString);
                                readChar = r.ReadChar();
                                intString = "";
                                while (readChar != '\r' && readChar != ' ' && readChar != '\n')
                                {
                                    intString = String.Concat(intString, readChar);
                                    readChar = r.ReadChar();
                                }
                                int iqrejectionValue = int.Parse(intString);
                                int returnChar = r.ReadChar();
                                int dataMarker = r.ReadUInt16();
                                //System.Diagnostics.Debug.Write(unwrapResultZero.ToString() + " " + unwrapResult.ToString() + " " + unwrapResultMax.ToString() + " " + unwrapMedianResult.ToString() + " " + iqrejectionValue.ToString() + "          ");
                            }
                            catch (Exception ex)
                            {
                                System.Diagnostics.Debug.WriteLine("exception thrown looking for unwrap data: " + ex.ToString());
                            }
                        }
                        else
                        {
                            //System.Diagnostics.Debug.WriteLine("");
                        }
                    }
                    //System.Diagnostics.Debug.WriteLine(unwrapRet.ToString());
                    //outPut.WriteLine(unwrapRet.ToString());
                    readPoint += 1;
                    if (detectionRet == true)
                        System.Diagnostics.Debug.WriteLine("*** detection @ " + readPoint.ToString() + " ***");
                }
                fs.Close();
                r.Close();
                if (RAW_UNWRAP_RESULT_DATA == 1)
                {
                    outPut.Close();
                }

                // ADJUSTME
                //this.chart1.Series.Add(normalUnwrapSeries);
                //this.chart1.Series.Add(approxUnwrapSeries);
                this.chart1.Series.Add(crossSeries);
                //this.chart1.Series.Add(detectionSeries);
                this.chart1.Series.Add(humanDetectionSeries);
                this.chart1.Series.Add(debugSeries);
                //this.chart1.Series.Add(debug2Series);
                //this.chart1.Series.Add(rawSeries);
                //this.chart1.ChartAreas[0].AxisX.Minimum = 5;
                //this.chart1.ChartAreas[0].AxisX.Maximum = 85937;
                //this.chart1.ChartAreas[0].AxisY.Minimum = 50;
                //this.chart1.ChartAreas[0].AxisY.Maximum = 400;

                chart1.Invalidate();
            }

            protected override void Dispose(bool disposing)
            {
                if (disposing && (components != null))
                {
                    components.Dispose();
                }
                base.Dispose(disposing);
            }

            private void InitializeComponent()
            {
                this.components = new System.ComponentModel.Container();
                System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
                System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend();
                this.chart1 = new System.Windows.Forms.DataVisualization.Charting.Chart();
                ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
                this.SuspendLayout();
                //
                // chart1
                //
                chartArea1.Name = "ChartArea1";
                this.chart1.ChartAreas.Add(chartArea1);
                this.chart1.Dock = System.Windows.Forms.DockStyle.Fill;
                legend1.Name = "Legend1";
                this.chart1.Legends.Add(legend1);
                this.chart1.Location = new System.Drawing.Point(0, 50);
                this.chart1.Name = "chart1";
                // this.chart1.Size = new System.Drawing.Size(284, 212);
                this.chart1.TabIndex = 0;
                this.chart1.Text = "chart1";
                //
                // Form1
                //
                this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
                this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                this.ClientSize = new System.Drawing.Size(284, 262);
                this.Controls.Add(this.chart1);
                this.Name = "Form1";
                this.Text = "Unwrap";
                this.Load += new System.EventHandler(this.Form1_Load);
                ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
                this.ResumeLayout(false);
            }

            /// <summary>
            /// The main entry point for the application.
            /// </summary>
            [STAThread]
            static void Main()
            {
                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);
                Application.Run(new FakeChartForm1());
            }
            #endregion
        }
    }
}
